#!/bin/sh
# $Id: metronightly-mail 1865 2004-02-26 23:54:44Z cxh $
# Script to mail a message about nightly build
# nightly which runs this script when everything is done
# This convoluted system is necessary so we can build on multiple
# machines simulatneously

#mailto=ealtech
#mailto=cxh
#if [ $# -ne 1 ]; then
#    echo "$0: Usage: $0 email-address"
#    exit 4
#fi
mailto=$1

ADMDIR=/users/metro/adm
if [ "`hostname`" = "gigasource.eecs.berkeley.edu" ]; then
    ADMDIR=/home/bldmastr/metro/adm
fi

# If you change the version number, then edit 
# buildmaster/web/adm/makefile
GENVERSION=gen-1.0
GENDIR=$ADMDIR/$GENVERSION
cd $GENDIR


# Generate the mail message
mailmsg=$ADMDIR/logs/metronightly_mail.txt

echo "`date`" > $mailmsg
echo "The Metropolis nightly build is run from a bldmaster cronjob" >> $mailmsg
echo "See  http://embedded.eecs.berkeley.edu/buildmaster" >> $mailmsg

# The log of the build
metrobuildlog=$METRO/adm/test/metronightly.txt
if [ "`hostname`" = "gigasource.eecs.berkeley.edu" ]; then
    metrobuildlog=/home/bldmastr/metro/adm/logs/metronightly.txt
fi


echo "------------------------------------------------" >> $mailmsg
echo "The build started at:" >> $mailmsg
grep "#metronightly-mail#: Starting make clean at" $metrobuildlog >> $mailmsg
echo "" >> $mailmsg

echo "------------------------------------------------" >> $mailmsg
echo "Errors during the build and test process in metropolis:" >> $mailmsg
echo "" >> $mailmsg
echo "To see the complete build and test log, see:" >> $mailmsg
if [ "`hostname`" = "gigasource.eecs.berkeley.edu" ]; then
    echo "http://www.gigascale.org/metropolis/src/metronightly.txt" >> $mailmsg
    echo " or, if you have a full account on gigascale, do" >> $mailmsg
    echo "scp gigasource:/home/bldmastr/metro/adm/logs/metronightly.txt /tmp" >> $mailmsg
else
    echo "$metrobuildlog on `hostname`" >> $mailmsg
fi
echo "" >> $mailmsg


if [ "`hostname`" = "gigasource.eecs.berkeley.edu" ]; then
    echo "To see the ChangeLog see:" >> $mailmsg
    echo "http://www.gigascale.org/metropolis/src/ChangeLog.txt" >> $mailmsg
fi
echo "" >> $mailmsg

AWK=awk
if [ -f /usr/local/bin/gawk ]; then
    AWK=/usr/local/bin/gawk
fi
# Find the first 100 lines that contain *** but not compileDemo or runDemo
# Print out the Entering directory line that precedes the *** line as well
$AWK ' $0 ~ /Entering directory/ { indir=$0 }
      $0 ~ /\*\*\*/ { 	if ( $0 !~ /runTreeShakeWithoutCodegen/ && $0 !~ /treeShakeAndRunSnapshots/ && $0 !~ /runTreeShakeCodegen/ && $0 !~ /compileDemo/) {
			    print indir
			    print $0
			}
		      }' $metrobuildlog | head -100 >> $mailmsg

# Note that in JDK1.4, the warning message format from javadoc changed
echo "javadoc had the following `grep ': warning -' $metrobuildlog | wc -l` warnings" >> $mailmsg

$AWK '{ if ($0 ~ /: warning -/) {
	    print $0
	    sawjavadocwarning=1
        } else {
	    if (sawjavadocwarning == 1) {
		sawjavadocwarning=0
		if ( $0 ~ /^	/) {
		    print $0
		}
   	        print ""
	    }
	}
      }' $metrobuildlog >> $mailmsg


echo "" >> $mailmsg

# The deprecated section works with jdk1.3 and probably won't work with jdk1.2
echo "The build had the following `egrep 'has been deprecated' $metrobuildlog| egrep 'in (metropolis).' | wc -l ` warnings for using deprecated metropolis methods" >> $mailmsg
echo "The warnings are broken down as:" >> $mailmsg
egrep 'has been deprecated' $metrobuildlog | egrep 'in (metropolis).' | $AWK '{printf("%35s in %-35s\n", $3,$5)}'  | sort | uniq -c | sort -nr >> $mailmsg

echo "" >> $mailmsg
echo "The warnings themselves are:" >> $mailmsg
egrep 'has been deprecated.' $metrobuildlog | egrep 'in (metropolis).' >> $mailmsg

# egrep '\*\*\*' $metrobuildlog >> $mailmsg

echo "" >> $mailmsg
echo "------------------------------------------------" >> $mailmsg
echo "Test results during code coverage" >> $mailmsg
echo "" >> $mailmsg
echo "............................................................" >> $mailmsg
echo "|To add a directory to the list of directories to be tested|" >> $mailmsg
echo "|edit the value of JSALLDIRS in                            |" >> $mailmsg
echo "| \$METRO/metro/adm/$GENVERSION/makefile                   |" >> $mailmsg
echo "............................................................" >> $mailmsg
echo "" >> $mailmsg
echo "------------------------------------------------" >> $mailmsg
echo "Test Failures during code coverage." >> $mailmsg
echo "" >> $mailmsg
egrep 'Total Tests' $metrobuildlog |
    egrep -v '^Failed: 0' >> $mailmsg
echo "------------------------------------------------" >> $mailmsg
echo "Tests without Failures during code coverage." >> $mailmsg
echo "" >> $mailmsg
egrep 'Total Tests' $metrobuildlog |
    egrep '^Failed: 0' >> $mailmsg


if [ "`hostname`" = "gigasource.eecs.berkeley.edu" ]; then
    echo "" >> $mailmsg
    echo "------------------------------------------------" >> $mailmsg
    echo "Javadoc doccheck output can be found at: "  >> $mailmsg
    echo "http://www.gigascale.org/metropolis/src/metro/doc/doccheck/"  >> $mailmsg

    echo "" >> $mailmsg
    echo "------------------------------------------------" >> $mailmsg
    echo "Code Coverage Summary" >> $mailmsg
    echo "" >> $mailmsg
    echo "To see code coverage, view:" >> $mailmsg
    echo "http://www.gigascale.org/metropolis/src/nightly/coverage.html" >> $mailmsg
    echo "" >> $mailmsg
    sh $ADMDIR/bin/coveragesummary >> $mailmsg
fi

cat $mailmsg | /usr/ucb/Mail -s "Metropolis Nightly Build" $mailto
