#!/bin/sh
# -[Tue Nov 25 09:18:17 2003 by cxh]-
# Color the coverage file with the appropriate accepted ratings


progname=`basename $0`
if [ $# -ne 2 ]; then
	echo "$0: Usage: $progname ptIItreedirectory summaryhtmlfile"
	exit 3
fi

tree=$1
summaryfile=$2
#tree=/users/ptII/adm/dists/ptII1.0devel 
#summaryfile=/users/ptdesign/public_html/java/js/coverage.html

javafiles=/tmp/coveragerating.javafiles

ratingfile=/tmp/coveragerating.ratingfile

complexityfile=/tmp/coveragerating.complexity

#find /tmp -name "$ratingfile" -mtime +1 -exec rm {} \;



# Create a file that has two records on each line, one line
# being the file name, the other being the rating
rm -f $ratingfile
#if [ ! -f $ratingfile ]; then
	echo "Regenerating $javafiles"
	find $tree -xdev \( -name adm -o -name "*.tmp" \) -prune -o -name '*.java' -print > $javafiles

	echo "Regenerating $ratingfile"
	cat $javafiles | xargs grep AcceptedRating | 
	        # Remove leading spaces
	        sed 's/^ *//' |
		awk '{split($1,f,":"); print f[1], $2 }' |
		# Remove the leading part of the tree name
		sed -e "s=$tree==" \
			-e 's=/=.=g'> $ratingfile
#fi

# Create a file that has three fields on each line:
# 1) The string "complexity"
# 2) The file name
# 3) The cyclometric complexity
#if [ ! -f $complexityfile ]; then
	echo "Regenerating $complexityfile"
	complexityfile_tmp=/tmp/coveragerating.complexity_tmp
	#if [ ! -f $complexityfile_tmp ]; then
	    rm -f $complexityfile_tmp
	    for javafile in `cat $javafiles`
	    do
		jv-scan --complexity $javafile >> $complexityfile_tmp
	    done    
        #fi	    
	# Look for all the lines with two fields, add a complexity tag
	# convert the / to . and sort by complexity
	awk ' NF == 2 {print "complexity", $0}' < $complexityfile_tmp |
	    sed "s@$tree/@\.@" |
	    sed 's@/@.@g' |
	    sort +2n -3n > $complexityfile

	#rm -f $complexityfile_tmp
#fi


# Read in the rating file, then the coverage file
awk '{
     if ($0 !~ /</) {
	if (NF == 3 && $1 ~ "complexity") {
	    # Reading in the complexity file
	    # It should be first in the list of files read in because
	    # we keep track of the rank
	    print "complexity: " $2, $3
	    complexityValue = $3 
	    complexityRank[$2] = NR

	    complexity[$2] = $3
	    maxComplexityRank = NR
	} else {
	    # Reading in the rating file, which has no < chars
	    print $1,$2
	    color = $2
	    # If the color is yellow, then substitute in gold
	    if (color ~ /ellow/) {
		color = "#ffaa00"
	    }
	    rating[$1] = color
	}
     } else {
	# Reading in the coverage html file
	if ($0 ~ />Package /) {
	    split($3,p,"<")
	    package=p[1]
	    printf("%s %s <a name=%c%s%c>%s</a></th></TR>\n", $1, $2, 34, package, 34, package)
	} else {
	    if ( $0 ~ /<TR><th align="center">/) {
		if ($0 !~ /TOTAL/) {
		    nf=split($2,f,"<")
		    nff=split(f[1],ff,">")	
		    file=package "." ff[2]
		    
		    # Reassemble the slashes in the filename
		    nfilearray=split(file,filearray,".")
		    filename=filearray[2]
		    for(i=3;i<nfilearray;i++) {
			filename = filename "/" filearray[i]
		    }

		    #print "-------------"file, rating[file], filename
		    printf("%s ",$1)

		    printf("%s>",ff[1]);
		    
		    # 34 is double quote
		    printf("<a href=%c%s.html%c><font color=%s>%s</font></a></th>", 34, filename, 34, rating[file], ff[nff]);

		    #for(i=3;i<nnf;i++) {
		    #	printf("%s>",ff[i]);
		    #}

		    #printf("%s",ff[nnf]);

		    # Print the complexity value
		    complexityValue = complexity[file]
		    if (complexityValue == "") {
			complexityValue = "&nbsp;"
 		    }
		    percentComplexityRank = int(complexityRank[file]/maxComplexityRank * 100.0)
	    if (complexityValue > 500) {
		complexityValue="<font color=#ff0000>" complexityValue"</font>"
	    }

		    # If the file is in the top 95%, we print it in red
		    if (percentComplexityRank <= 95) {
			printf("<td><font color=#ff0000>%s %2d%%</font></td>", complexityValue, percentComplexityRank) 
		    } else {
			printf("<td>%s %2d%% </td>", complexityValue, percentComplexityRank) 
		    }

		    printf("<");
		    for(i=3;i<nf;i++) {
			printf("%s<",f[i])
		    }
		    printf("%s ",f[nf]);

		    for(i=3;i<NF;i++) {
			printf("%s ",$i)
		    }
		    printf("%s\n",$NF);

		} else {
		    print $0
		}
	    } else {
		print $0
	    }
	}
    }
}' $complexityfile $ratingfile $summaryfile |
sed 's@<th align="center">method</th>@<th align="center"><a href="#complexity">complexity</a></th><th align="center">method</th>@' |
sed 's@<TR><th align="center">TOTAL</th>@<TR><th align="center">TOTAL</th><td>\&nbsp;</td>@' |
awk '{
	if (sawheader==1) {
	    print $0
	} else {
	    if ($0 ~ /<H1> Package Coverage <\/H1>/) {
		sawheader=1
	    } 
	}
     }
     END {
	print "<a name=\"complexity\">Complexity:</a>" 
	print "The complexity column measures the cyclomatic complexity"
	print "<br>The first number is the cyclomatic complexity as reported"
	print "by the GNU jv-scan program.  In general, low numbers are"
	print "good, high numbers are not so good"
	print "<a href=\"http://www.sei.cmu.edu/str/descriptions/cyclomatic.html\">SEI</a>"
	print "defines cyclomatic complexity:"
	print "<BLOCKQUOTE>"
	print "... it measures the number of linearly-independent paths"
	print "through a program module. This measure provides a single"
	print "ordinal number that can be compared to the complexity of"
	print "other programs."
	print "</BLOCKQUOTE>"
	print "<br>The second number is the rank of the file as a percentage"
	print "of all the files."
	print "Files that are in the top 95% are colored red.  These files"
	print "are the most complex files in the tree, and therefore the most"
 	print "likely to have complex bugs.  These files should probably"
	print "be refactored to aid in testability"
	print "<br>If a file has only a percentage, then jv-scan failed"
	print "to process it."
     }' > /tmp/coveragerating.out

# Create a TOC
awk ' BEGIN {
	print "<html><head>"
	print "<title> @tree@ Coverage Summary</title>"
	print "</head><body>"
	print "<h1>&nbsp;&nbsp;Package Coverage</h1>"
	print "<menu>"
    }
    { if (printedDate == 0) {
        printedDate = 1
	print date
      }
      if ($0 ~ />Package /) {
	split($4,p,"\"")
	package=p[2]
	printf("<li> <a href=%c#%s%c>%s</a>\n", 34, package, 34, package)
      }
    }
    END {
        print "</menu>" 
    }' date="`date`" /tmp/coveragerating.out |
sed "s=@tree@=$tree=" > /tmp/coveragerating.toc

cp $summaryfile $summaryfile.bak
cat /tmp/coveragerating.toc /tmp/coveragerating.out > $summaryfile

#rm -f /tmp/coveragerating.toc /tmp/coveragerating.out
