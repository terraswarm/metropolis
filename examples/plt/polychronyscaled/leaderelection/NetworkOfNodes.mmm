/* A network of nodes

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

@ProposedRating yellow apinto@eecs.berkeley.edu

*/

package leaderelection;

import metamodel.plt.polychronyscaled.*;

//////////////////////////////////////////////////////////////////////////
//// NetworkOfNodes
/** This Netlist is an interconnection of nodes as example of
    network that runs the leader election algorithm.


    @author Alessandro Pinto
    @version $Id: NetworkOfNodes.mmm,v 1.10 2006/10/12 14:21:09 cxh Exp $
*/

public netlist NetworkOfNodes extends SynchScheduledNetlist {

    ////////////////////////////////////////////////////////////////////////////
    ////////////////            Constructor                 ///////////////////

    /**The constructor instances six processes and eighteen
     * channels and connects processes through channels.*/

    public NetworkOfNodes(String n) {
        super(n,6,18);
        NetNode n1 = new NetNode("Node1",3,3,1,6,1,1);
        NetNode n2 = new NetNode("Node2",3,3,2,6,1,1);
        NetNode n3 = new NetNode("Node3",4,4,3,6,1,1);
        NetNode n4 = new NetNode("Node4",3,3,4,6,1,1);
        NetNode n5 = new NetNode("Node5",3,3,5,6,1,1);
        NetNode n6 = new NetNode("Node6",2,2,6,6,1,1);
        SynchSignal s12 = new SynchSignal("S12");
        SynchSignal s21 = new SynchSignal("S21");
        SynchSignal s13 = new SynchSignal("S13");
        SynchSignal s31 = new SynchSignal("S31");
        SynchSignal s14 = new SynchSignal("S14");
        SynchSignal s41 = new SynchSignal("S41");
        SynchSignal s23 = new SynchSignal("S23");
        SynchSignal s32 = new SynchSignal("S32");
        SynchSignal s25 = new SynchSignal("S25");
        SynchSignal s52 = new SynchSignal("S52");
        SynchSignal s35 = new SynchSignal("S35");
        SynchSignal s53 = new SynchSignal("S53");
        SynchSignal s34 = new SynchSignal("S34");
        SynchSignal s43 = new SynchSignal("S43");
        SynchSignal s46 = new SynchSignal("S46");
        SynchSignal s64 = new SynchSignal("S64");
        SynchSignal s56 = new SynchSignal("S56");
        SynchSignal s65 = new SynchSignal("S65");
        addSynchSignal(s12);
        addSynchSignal(s21);
        addSynchSignal(s13);
        addSynchSignal(s31);
        addSynchSignal(s14);
        addSynchSignal(s41);
        addSynchSignal(s23);
        addSynchSignal(s32);
        addSynchSignal(s25);
        addSynchSignal(s52);
        addSynchSignal(s35);
        addSynchSignal(s53);
        addSynchSignal(s34);
        addSynchSignal(s43);
        addSynchSignal(s46);
        addSynchSignal(s64);
        addSynchSignal(s56);
        addSynchSignal(s65);
        addSynchProcess(n1);
        addSynchProcess(n2);
        addSynchProcess(n3);
        addSynchProcess(n4);
        addSynchProcess(n5);
        addSynchProcess(n6);

        synchConnect(n1,0,true,s21);
        synchConnect(n2,0,false,s21);

        synchConnect(n1,1,true,s31);
        synchConnect(n3,0,false,s31);

        synchConnect(n1,2,true,s41);
        synchConnect(n4,0,false,s41);

        synchConnect(n2,0,true,s12);
        synchConnect(n1,0,false,s12);

        synchConnect(n3,0,true,s13);
        synchConnect(n1,1,false,s13);

        synchConnect(n4,0,true,s14);
        synchConnect(n1,2,false,s14);

        synchConnect(n2,1,true,s32);
        synchConnect(n3,1,false,s32);

        synchConnect(n3,1,true,s23);
        synchConnect(n2,1,false,s23);

        synchConnect(n4,1,true,s34);
        synchConnect(n3,2,false,s34);

        synchConnect(n3,2,true,s43);
        synchConnect(n4,1,false,s43);

        synchConnect(n2,2,true,s52);
        synchConnect(n5,0,false,s52);

        synchConnect(n5,0,true,s25);
        synchConnect(n2,2,false,s25);

        synchConnect(n3,3,true,s53);
        synchConnect(n5,1,false,s53);

        synchConnect(n5,1,true,s35);
        synchConnect(n3,3,false,s35);

        synchConnect(n4,2,true,s64);
        synchConnect(n6,0,false,s64);

        synchConnect(n6,0,true,s46);
        synchConnect(n4,2,false,s46);

        synchConnect(n5,2,true,s65);
        synchConnect(n6,1,false,s65);

        synchConnect(n6,1,true,s56);
        synchConnect(n5,2,false,s56);
    }
}
