/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package dining_phil;

process Philosopher {

    static final int THINKING = 0;        //states
    static final int HUNGRY = 1;
    static final int LEFT_CHOPSTICK = 2;
    static final int EATING = 3;
    static final int RIGHT_CHOPSTICK = 4;

    port ChopstickInterface chopstickLeft;
    port ChopstickInterface chopstickRight;

    parameter String NAME;        //process name
    parameter int ID;                //process id

    int state = THINKING;        //current state
    int temp = 0;
    int count = 0;

    public Philosopher(String name, int id) {
        NAME = name;
        ID = id;
    }

    void thread() {
        while (1) {
            temp = temp + 1;
            switch (state) {

            case THINKING:

                blackbox(SystemCSim) %%
                    cout << *NAME << ": Start thinking " << temp << endl;
                %%;
                think();
                blackbox(SystemCSim) %%
                    cout << *NAME << ": Finished thinking " << temp << endl;
                %%;
                state = HUNGRY;
                break;

            case HUNGRY:

                //wait on left chopstick
                blackbox(SystemCSim) %%
                    //cout << *NAME << ": Waiting on any cp" << endl;
                    %%;

                await {
                    (true ; ; ) { }
                    //(true ; ; ) { }

                    (chopstickLeft.isInUse() == 0;
                            chopstickLeft.ChopstickInterface;
                            chopstickLeft.ChopstickInterface)  {
                        chopstickLeft.chopstickUp();
                        state = LEFT_CHOPSTICK;
                        count = count + 1;
                        blackbox(SystemCSim) %%
                            cout << *NAME << ": Got left cp " << count << endl;
                        %%;
                    }

                    (chopstickRight.isInUse() == 0;
                            chopstickRight.ChopstickInterface;
                            chopstickRight.ChopstickInterface) {
                        chopstickRight.chopstickUp();
                        state = RIGHT_CHOPSTICK;
                        count = count + 1;
                        blackbox(SystemCSim) %%
                            cout << *NAME << ": Got right cs "
                                 << count << endl;
                        %%;
                    }
                }
                break;

            case LEFT_CHOPSTICK:

                // Wait on right chopstick.
                blackbox(SystemCSim) %%
                    //cout << *NAME << ": Waiting on right cp" << endl;
                    %%;

                await {
                    ( true ; ; ) { }
                    (chopstickRight.isInUse() == 0;
                            chopstickRight.ChopstickInterface;
                            chopstickRight.ChopstickInterface) {
                        chopstickRight.chopstickUp();
                        state = EATING;
                        count = count + 1;
                        blackbox(SystemCSim) %%
                            cout << *NAME << ": Got both  cps"
                                 << count << endl;
                        %%;
                    }
                }

                break;

            case RIGHT_CHOPSTICK:

                // Wait on left chopstick.
                blackbox(SystemCSim) %%
                    //cout << *NAME << ": Waiting on left cp" << endl;
                    %%;

                await {
                    (true ; ; ) { }
                    (chopstickLeft.isInUse() == 0;
                            chopstickLeft.ChopstickInterface;
                            chopstickLeft.ChopstickInterface) {
                        chopstickLeft.chopstickUp();
                        state = EATING;
                        count = count + 1;
                        blackbox(SystemCSim) %%
                            cout << *NAME << ": Got both  cps"
                                 << cout << endl;
                        %%;
                    }
                }

                break;


            case EATING:

                blackbox(SystemCSim) %%
                    cout << *NAME << ": Start eating" << temp << endl;
                %%;
                eat();
                await {
                    (true ; ; ) { }
                    (true ; ; ) { }
                    (true ; ; ) { }

                    (true; chopstickLeft.ChopstickInterface,
                            chopstickRight.ChopstickInterface;
                            chopstickLeft.ChopstickInterface,
                            chopstickRight.ChopstickInterface) {
                        chopstickRight.chopstickDown();
                        chopstickLeft.chopstickDown();
                        count = count - 2;
                        state = THINKING;
                        blackbox(SystemCSim) %%
                            cout << *NAME << ": Finish Eating " << temp << endl;
                        %%;

                        blackbox(SystemCSim) %%
                            //cout << *NAME << ": Put down both cps" << endl;
                            %%;
                        blackbox(SystemCSim) %%
                            //cout << *NAME << ": count = " << count << endl;
                            %%;
                    }
                }

                break;

            default:

                state = THINKING;
                blackbox(SystemCSim) %%
                    cout << *NAME << ": Default state" << endl; %%;
                blackbox(SystemCSim) %%
                    cout << *NAME << ": count = " << count << endl; %%;
                break;

            }
        }

    }

    //internal methods

    void think () {        //computation
        int i = 0;
        int temp = 0;
        await { (true ; ; ) { } }
        for (i = 0; i < 5000; i++) {
            temp = i * i;
        }
    }

    void eat () {        //computation
        int i = 0;
        int temp = 0;
        for (i = 0; i < 5000; i++) {
            temp = i * i;
        }
    }

}
