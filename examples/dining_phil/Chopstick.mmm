/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package dining_phil;


medium Chopstick implements ChopstickInterface {

    ///////////////////////////////////////////////////////////////////
    ////                           constructors                    ////

    /** Construct a Chopstick.
     *  @param name Medium name.
     *  @param id Medium id.
     */
    public Chopstick(String name, int id) {
        NAME = name;
        ID = id;
    }

    ///////////////////////////////////////////////////////////////////
    ////                           medium interface functions      ////

    /** Checks whether the chopstick is being used (has been picked up)
     *  @return NOTINUSE or INUSE depending on whether the Chopstick is
     *  in use.
     */
    public eval int isInUse() {
        return usage;
    }

    /** Puts chopstick down, setting chopstick usage to not in use. */
    public update void chopstickDown() {
        usage = NOTINUSE;
    }

    /** Picks chopstick down, setting chopstick usage to in use. */
    public update void chopstickUp() {
        usage = INUSE;
    }


    ///////////////////////////////////////////////////////////////////
    ////                         variables                         ////

    static final int NOTINUSE = 0;
    static final int INUSE = 1;

    /** Process ID */
    parameter int ID;

    /** Process Name */
    parameter String NAME;

    /** Flag that states whether object is in use. */
    int usage = NOTINUSE;
}
