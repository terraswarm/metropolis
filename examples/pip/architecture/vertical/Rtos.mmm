/*

@Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package pip.architecture.vertical;

/////////////////////////////////////////////////////////////////////
//        Design Example of Metropolis
//        Vertical Refinement Model
//        PiP Architecture
//
//        Author: Alessandro Pinto
//                Yoshi Watanabe
//                Haibo Zeng
//                Doug Densmore
/////////////////////////////////////////////////////////////////////

/*
  Release Version; Rev 2.0

  This is a new service not present in the original model. This looks like
  a CPU essentially but 1) It only has both the Time scheduling option and the
  fifo option  2) It does not have cache ports or the the
  calls to caches 3) it has a different service cycle interface.

*/


//whatever is the "top" service must interface with tasks and have this interface
public medium Rtos implements SwTaskService {

    ///////////////////////////////////////////////////////////////////
    ////                         public variables                  ////

    ///////////////////////////////////////////////////////////////////
    ////                         protected variables               ////

    port SchedReq                                         _portSM;
    port RtosSlave[]                                 _portSlaves;

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    final static int SERVICE_ID_REQUEST                 = 0;
    final static int SERVICE_ID_READ_INIT                = 1;
    final static int SERVICE_ID_READ                 = 2;
    final static int SERVICE_ID_READ_PROTECTED_INIT        = 3;
    final static int SERVICE_ID_READ_PROTECTED         = 4;
    final static int SERVICE_ID_WRITE_INIT                = 5;
    final static int SERVICE_ID_WRITE                 = 6;
    final static int SERVICE_ID_WRITE_PROTECTED_INIT = 7;
    final static int SERVICE_ID_WRITE_PROTECTED         = 8;
    final static int SERVICE_ID_RELEASE                 = 9;
    final static int SERVICE_ID_CONTEXT_SWITCH        = 10;
    final static int NUMBER_OF_SERVICES                 = 11;

    final static int FUNCTION_ID_REQUEST                 = 0;
    final static int FUNCTION_ID_READ                 = 1;
    final static int FUNCTION_ID_READ_LONG                 = 2;
    final static int FUNCTION_ID_READ_PROTECTED         = 3;
    final static int FUNCTION_ID_READ_LONG_PROTECTED        = 4;
    final static int FUNCTION_ID_WRITE                         = 5;
    final static int FUNCTION_ID_WRITE_LONG                 = 6;
    final static int FUNCTION_ID_WRITE_PROTECTED                 = 7;
    final static int FUNCTION_ID_WRITE_LONG_PROTECTED        = 8;

    private int _rtosID;
    private int _nSlaves;
    //private int _nMems;
    //private int[] _rtostoCpu;

    private SchedReqClass _src;

    private event e, r;
    private int id_port;

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    // Constructor
    public Rtos(String n, int id, int num_slaves, int[] slaves) {
        super(n);

        _rtosID                         = id;
        _nSlaves = num_slaves;
        //_nMems         = num_mems;
        //_cputoMem = new int[_nMems];

        /*
          for (int i=0; i<_nMems; i++) {
          _cputoMem[i] = cpu_to_mem[i];

          if ((_cputoMem[i] >= _nSlaves) || (_cputoMem[i] < -1)) {
          blackbox(SystemCSim)%%
          cout <<"Wrong connection from Cpu"<<_cpuID<<" to Mem"<<i<<endl;
          exit(-1);
          %%;
          }
          }*/

        _portSlaves = new RtosSlave[_nSlaves];
        _src = new SchedReqClass();
    }

    public int id(){ return _rtosID;}

    public eval         void request(int n) {

        {$
             beg{
            e = beg(getthread(), this.request);
            _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
            _portSM.request(e, _src);

            blackbox(SystemCSim)%%
                cout<<caller->name()<<" running Rtos request beg"<<endl;
            %%;
        }
        $}

        creq{@;
 {$
      beg{
     e =  beg(getthread(), this.creq);
     _src.setSchedReqClass(e, SERVICE_ID_REQUEST, n, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos request creq beg"<<n<<" times"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.creq);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos request creq end"<<endl;
     %%;
 }
 $}@};
    }

    public eval         void read (int target, int addr, int n) {
        /*
          if ((target>=0) && (target<_nMems)) {
          id_port = _cputoMem[target];

          if ((id_port<0) || (id_port>=_nSlaves)) {
          blackbox(SystemCSim)%%
          cout<<"Out of memory: Mem"<<target<<" is not connected to Cpu"<<_cpuID<<endl;
          exit(-1);
          %%;
          }
          } else {
          blackbox(SystemCSim)%%
          cout<<"Mem"<<target<<" does not exist"<<endl;
          exit(-1);
          %%;
          }*/

        cri{@;
 {$
      beg{
     e =  beg(getthread(), this.cri);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read cri beg"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.cri);
     _src.setSchedReqClass(r, e, SERVICE_ID_READ_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read cri end"<<endl;
     %%;
 }
 $}@};

        cr1{@;

 {$
      beg{
     e =  beg(getthread(), this.cr1);
     _src.setSchedReqClass(e, SERVICE_ID_READ, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read cr1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}

 @};

        {
            int prio = 1;
            _portSlaves[id_port].rtosRead(target, addr, n);
        }
        cr2{@;
 {$
      end{
     r =  end(getthread(), this.cr2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read cr end"<<endl;
     %%;
 }
 $}@};
    }

    public eval         void readProtect (int target, int addr, int n) {
        /*
          if ((target>=0) && (target<_nMems)) {
          id_port = _cputoMem[target];

          if ((id_port<0) || (id_port>=_nSlaves)) {
          blackbox(SystemCSim)%%
          cout<<"Out of memory: Mem"<<target<<" is not connected to Cpu"<<_cpuID<<endl;
          exit(-1);
          %%;
          }
          } else {
          blackbox(SystemCSim)%%
          cout<<"Mem"<<target<<" does not exist"<<endl;
          exit(-1);
          %%;
          }*/
        crpi{@;
 {$
      beg{
     e =  beg(getthread(), this.crpi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crpi beg"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.crpi);
     _src.setSchedReqClass(r, e, SERVICE_ID_READ_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crpi end"<<endl;
     %%;
 }
 $}@};

        crp1{@;

 {$
      beg{
     e =  beg(getthread(), this.crp1);
     _src.setSchedReqClass(e, SERVICE_ID_READ_PROTECTED, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crp1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            int prio = 1;
            _portSlaves[id_port].rtosReadProtect(target, addr, n);
        }
        crp2{@;
 {$

      end{
     r =  end(getthread(), this.crp2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crp2 end"<<endl;
     %%;
 }
 $}@};
    }

    public update void write(int target, int addr, int n) {
        /*
          if ((target>=0) && (target<_nMems)) {
          id_port = _cputoMem[target];

          if ((id_port<0) || (id_port>=_nSlaves)) {
          blackbox(SystemCSim)%%
          cout<<"Out of memory: Mem"<<target<<" is not connected to Cpu"<<_cpuID<<endl;
          exit(-1);
          %%;
          }
          } else {
          blackbox(SystemCSim)%%
          cout<<"Mem"<<target<<" does not exist"<<endl;
          exit(-1);
          %%;
          }*/
        cwi{@;
 {$
      beg{
     e =  beg(getthread(), this.cwi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwi beg"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.cwi);
     _src.setSchedReqClass(r, e, SERVICE_ID_WRITE_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwi end"<<endl;
     %%;
 }
 $}@};
        cw1{@;

 {$
      beg{
     e =  beg(getthread(), this.cw1);
     _src.setSchedReqClass(e, SERVICE_ID_WRITE, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cw1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            int prio = 1;
            _portSlaves[id_port].rtosWrite(target, addr, n);
        }
        cw2{@;
 {$
      end{
     r =  end(getthread(), this.cw2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cw2 end"<<endl;
     %%;
 }
 $}@};
    }

    public update void writeProtect(int target, int addr, int n) {
        /*
          if ((target>=0) && (target<_nMems)) {
          id_port = _cputoMem[target];

          if ((id_port<0) || (id_port>=_nSlaves)) {
          blackbox(SystemCSim)%%
          cout<<"Out of memory: Mem"<<target<<" is not connected to Cpu"<<_cpuID<<endl;
          exit(-1);
          %%;
          }
          } else {
          blackbox(SystemCSim)%%
          cout<<"Mem"<<target<<" does not exist"<<endl;
          exit(-1);
          %%;
          }*/
        cwpi{@;
 {$
      beg{
     e =  beg(getthread(), this.cwpi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwpi beg"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.cwpi);
     _src.setSchedReqClass(r, e, SERVICE_ID_WRITE_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwpi end"<<endl;
     %%;
 }
 $}@};

        cwp1{@;

 {$
      beg{
     e =  beg(getthread(), this.cwp1);
     _src.setSchedReqClass(e, SERVICE_ID_WRITE_PROTECTED, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwp1 beg"<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            int prio = 1;
            _portSlaves[id_port].rtosWriteProtect(target, addr, n);
        }
        cwp2{@;
 {$
      end{
     r =  end(getthread(), this.cwp2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwp2 end"<<endl;
     %%;
 }
 $}@};
    }

    public eval         void readLong (int target, int addr, int n, int[] data) {
        /*
          if ((target>=0) && (target<_nMems)) {
          id_port = _cputoMem[target];

          if ((id_port<0) || (id_port>=_nSlaves)) {
          blackbox(SystemCSim)%%
          cout<<"Out of memory: Mem"<<target<<" is not connected to Cpu"<<_cpuID<<endl;
          exit(-1);
          %%;
          }
          } else {
          blackbox(SystemCSim)%%
          cout<<"Mem"<<target<<" does not exist"<<endl;
          exit(-1);
          %%;
          }*/
        crli{@;
 {$
      beg{
     e =  beg(getthread(), this.crli);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crli beg"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.crli);
     _src.setSchedReqClass(r, e, SERVICE_ID_READ_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crli end"<<endl;
     %%;
 }
 $}@};

        crl1{@;

 {$
      beg{
     e =  beg(getthread(), this.crl1);
     _src.setSchedReqClass(e, SERVICE_ID_READ, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crl1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            int prio = 1;
            _portSlaves[id_port].rtosReadLong(target, addr, n, data);
        }
        crl2{@;
 {$
      end{
     r =  end(getthread(), this.crl2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crl2 end"<<endl;
     %%;
 }
 $}@};
    }

    public eval         void readLongProtect (int target, int addr, int n, int[] data) {
        /*
          if ((target>=0) && (target<_nMems)) {
          id_port = _cputoMem[target];

          if ((id_port<0) || (id_port>=_nSlaves)) {
          blackbox(SystemCSim)%%
          cout<<"Out of memory: Mem"<<target<<" is not connected to Cpu"<<_cpuID<<endl;
          exit(-1);
          %%;
          }
          } else {
          blackbox(SystemCSim)%%
          cout<<"Mem"<<target<<" does not exist"<<endl;
          exit(-1);
          %%;
          }*/
        crlpi{@;
 {$
      beg{
     e =  beg(getthread(), this.crlpi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crlpi beg"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.crlpi);
     _src.setSchedReqClass(r, e, SERVICE_ID_READ_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crlpi end"<<endl;
     %%;
 }
 $}@};
        crlp1{@;

 {$
      beg{
     e =  beg(getthread(), this.crlp1);
     _src.setSchedReqClass(e, SERVICE_ID_READ_PROTECTED, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crlp1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            int prio = 1;
            _portSlaves[id_port].rtosReadLongProtect(target, addr, n, data);
        }
        crlp2{@;
 {$
      end{
     r =  end(getthread(), this.crlp2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos read crlp2 end"<<endl;
     %%;
 }
 $}@};
    }

    public update void writeLong(int target, int addr, int n, int[] data) {
        /*
          if ((target>=0) && (target<_nMems)) {
          id_port = _cputoMem[target];

          if ((id_port<0) || (id_port>=_nSlaves)) {
          blackbox(SystemCSim)%%
          cout<<"Out of memory: Mem"<<target<<" is not connected to Cpu"<<_cpuID<<endl;
          exit(-1);
          %%;
          }
          } else {
          blackbox(SystemCSim)%%
          cout<<"Mem"<<target<<" does not exist"<<endl;
          exit(-1);
          %%;
          }*/
        cwli{@;
 {$
      beg{
     e =  beg(getthread(), this.cwli);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwli beg"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.cwli);
     _src.setSchedReqClass(r, e, SERVICE_ID_WRITE_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwli end"<<endl;
     %%;
 }
 $}@};
        cwl1{@;

 {$
      beg{
     e =  beg(getthread(), this.cwl1);
     _src.setSchedReqClass(e, SERVICE_ID_WRITE, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwl1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            int prio = 1;
            _portSlaves[id_port].rtosWriteLong(target, addr, n, data);
        }
        cwl2{@;
 {$
      end{
     r =  end(getthread(), this.cwl2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwl2 end"<<endl;
     %%;
 }
 $}@};
    }

    public update void writeLongProtect(int target, int addr, int n, int[] data) {
        /*
          if ((target>=0) && (target<_nMems)) {
          id_port = _cputoMem[target];

          if ((id_port<0) || (id_port>=_nSlaves)) {
          blackbox(SystemCSim)%%
          cout<<"Out of memory: Mem"<<target<<" is not connected to Cpu"<<_cpuID<<endl;
          exit(-1);
          %%;
          }
          } else {
          blackbox(SystemCSim)%%
          cout<<"Mem"<<target<<" does not exist"<<endl;
          exit(-1);
          %%;
          }*/
        cwlpi{@;
 {$
      beg{
     e =  beg(getthread(), this.cwlpi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwlpi beg"<<endl;
     %%;
 }

 end{
     r =  end(getthread(), this.cwlpi);
     _src.setSchedReqClass(r, e, SERVICE_ID_WRITE_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwlpi end"<<endl;
     %%;
 }
 $}@};
        cwlp1{@;

 {$
      beg{
     e =  beg(getthread(), this.cwlp1);
     _src.setSchedReqClass(e, SERVICE_ID_WRITE_PROTECTED, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwlp1 beg"<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            int prio = 1;
            _portSlaves[id_port].rtosWriteLongProtect(target, addr, n, data);
        }
        cwlp2{@;
 {$
      end{
     r =  end(getthread(), this.cwlp2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Rtos write cwlp2 end"<<endl;
     %%;
 }
 $}@};
    }

    public eval double ATime(process p, int id_fun, boolean is_beg) {
        event e;

        switch(id_fun) {
        case FUNCTION_ID_REQUEST:
            if (is_beg) {
                e = beg(p, this.request);
            } else {
                e = end(p,this.creq);
            }
            break;

        case FUNCTION_ID_READ:
            if (is_beg) {
                e = beg(p,this.cri);
            } else {
                e = end(p,this.cr);
            }
            break;

        case FUNCTION_ID_WRITE:
            if (is_beg) {
                e = beg(p,this.cwi);
            } else {
                e = end(p,this.cw);
            }
            break;

        case FUNCTION_ID_READ_LONG:
            if (is_beg) {
                e = beg(p,this.crli);
            } else {
                e = end(p,this.crl);
            }
            break;

        case FUNCTION_ID_WRITE_LONG:
            if (is_beg) {
                e = beg(p,this.cwli);
            } else {
                e = end(p,this.cwl);
            }
            break;

        case FUNCTION_ID_READ_PROTECTED:
            if (is_beg) {
                e = beg(p,this.crpi);
            } else {
                e = end(p,this.crp);
            }
            break;

        case FUNCTION_ID_WRITE_PROTECTED:
            if (is_beg) {
                e = beg(p,this.cwpi);
            } else {
                e = end(p,this.cwp);
            }
            break;

        case FUNCTION_ID_READ_LONG_PROTECTED:
            if (is_beg) {
                e = beg(p,this.crlpi);
            } else {
                e = end(p,this.crlp);
            }
            break;

        case FUNCTION_ID_WRITE_LONG_PROTECTED:
            if (is_beg) {
                e = beg(p,this.cwlpi);
            } else {
                e = end(p,this.cwlp);
            }
            break;

        default:
            blackbox(SystemCSim)%%
                cout<<caller->name()<<" ask for information for a wrong function "<<id_fun<<" in "<<this->name()<<endl;
            exit(-1);
            %%;
            break;
        }

        double time;

        if (is_beg) {
            time = _portSM.ATime(e, LAST);
            blackbox(SystemCSim)%%
                cout<<caller->name()<<" begins executing function "<<id_fun<<" at "<<time<<" seconds"<<endl;
            %%;
        } else {
            time = _portSM.ATime(e, LAST);
            blackbox(SystemCSim)%%
                cout<<caller->name()<<" ends executing function "<<id_fun<<" at "<<time<<" seconds"<<endl;
            %%;
        }

        return time;
    }
    ///////////////////////////////////////////////////////////////////
    ////                         protected methods                 ////

    ///////////////////////////////////////////////////////////////////
    ////                         private methods                  ////

}

//rev 2.0; Release Version; DMD
