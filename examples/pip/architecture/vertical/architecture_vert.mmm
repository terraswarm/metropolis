/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
//////////////////////////////////////////////////
//        Design Example of Metropolis
//        PiP Architecture Vertical Refinement
//
//        Author: Alessandro Pinto
//                Yoshi Watanabe
//                Haibo Zeng
//                Doug Densmore
//////////////////////////////////////////////////

//Cleaned up for the initial release, rev 2.0

/* This is a the "vertical refinement" of the architecture for PiP.
 * This is the netlist which brings the scheduling and scheduled Netlist
 * together.
 * 1. Change the number of quantities to reflect the new value
 *         - This will be one for each new service
 * 2. This requires the introduction of constructor to reflect
 * top level netlist call
 *         - This is defined in the top level netlist
 * 3. Fix the constructors to pass the values to the
 * scheduling and scheduled netlists
 *
 * 4. Majority of work entails using the same structure
 *  in place to add the other service. Just add the same
 *  structure for each new object in terms of variables and
 *  connections.
 *
 * Optional - change the Netlist name arguments
 */

package pip.architecture.vertical;

public netlist Architecture {

    ArchScheduledNetlist _ASDN;
    ArchSchedulingNetlist _ASGN;
    SchedToQuantity[] _stateMedia;
    final static int _NUM_QUAN = 5; //added a cache and rtos
    final static int NUM_GT = 1;

    public Architecture(String s, int num_swtasks, int num_cpus, int num_buses, int num_mems, int num_rtos, int num_cache, double[] cpu_clock, int[] cpu_sched_alg, double[] time_slice, int[][] cpu_service_cycle, double[] bus_clock, int[] bus_sched_alg, int[][] bus_service_cycle, double[] mem_clock, int[] mem_space, int[] mem_sched_alg, int[][] mem_service_cycle, double[] rtos_clock, int[] rtos_sched_alg, int[][] rtos_service_cycle, double[] cache_clock, int[] cache_space, int[] block_size, int[] assoc, int[] mis_pen, int[] cache_sched_alg, int[][] cache_service_cycle, int[][] task_to_rtos, int[][] rtos_to_cpu, int[][] cpu_to_cache, int[][] bus_to_mem, int[][] cpu_to_bus, int simulation) {

        super(s);

        int i, j, k, m, n, o;


        int num_quans = num_cpus + num_buses + num_mems + num_rtos + num_cache;

        int[][] task_to_quan = new int[num_swtasks][num_quans];
        for (i = 0; i<num_swtasks; i++) {
            for (j=0; j<num_quans; j++) {
                task_to_quan[i][j] = -1;
            }
        }

        int[][] task_to_sm = new int[num_swtasks][num_quans+NUM_GT];
        int[] cpu_to_sm = new int[num_cpus];
        int[] bus_to_sm = new int[num_buses];
        int[] mem_to_sm = new int[num_mems];
        int[] rtos_to_sm = new int[num_rtos];
        int[] cache_to_sm = new int[num_cache];

        int[][] cs_to_sm = new int[num_cpus][num_swtasks+1];
        int[][] bs_to_sm = new int[num_buses][num_swtasks+1];
        int[][] ms_to_sm = new int[num_mems][num_swtasks+1];
        int[][] cas_to_sm = new int[num_cache][num_swtasks+1];
        int[][] rs_to_sm = new int[num_rtos][num_swtasks+1];
        int[] gt_to_sm = new int[num_swtasks];

        int num_sms = 0;

        int[] num_conn_tasksm = new int[num_swtasks];
        int[] num_conn_cssm = new int[num_cpus];
        int[] num_conn_bssm = new int[num_buses];
        int[] num_conn_mssm = new int[num_mems];
        int[] num_conn_cassm = new int[num_cache];
        int[] num_conn_rssm = new int[num_rtos];

        //initalization

        for (i=0; i<num_swtasks; i++) {
            num_conn_tasksm[i] = 0;
            gt_to_sm[i] = -1;

            for (j=0; j<num_quans+NUM_GT; j++) {
                task_to_sm[i][j] = -1;
            }
        }


        for (i=0; i<num_cpus; i++) {
            num_conn_cssm[i] = 0;
            for (j=0; j<num_swtasks+1; j++) {
                cs_to_sm[i][j] = -1;
            }
        }


        for (i=0; i<num_buses; i++) {
            num_conn_bssm[i] = 0;
            for (j=0; j<num_swtasks+1; j++) {
                bs_to_sm[i][j] = -1;
            }
        }



        for (i=0; i<num_mems; i++) {
            num_conn_mssm[i] = 0;
            for (j=0; j<num_swtasks+1; j++) {
                ms_to_sm[i][j] = -1;
            }
        }

        for (i=0; i<num_rtos; i++) {
            num_conn_rssm[i] = 0;
            for (j=0; j<num_swtasks+1; j++) {
                rs_to_sm[i][j] = -1;
            }
        }

        for (i=0; i<num_cache; i++) {
            num_conn_cassm[i] = 0;
            for (j=0; j<num_swtasks+1; j++) {
                cas_to_sm[i][j] = -1;
            }
        }


        //set arrays explicitly so that connections can be made in the next netlists
        //This is very top down (i.e. rtos, then cpu, then cache, then mem, etc)

        //THIS IS A MAJOR MODIFICATION IN VERTICAL REFINEMENT
        for (i=0; i<num_swtasks; i++) {
            int id_cpu, id_bus, id_mem, id_rtos, id_cache;

            for (j=0; j<num_rtos; j++) {
                id_rtos = task_to_rtos[i][j];

                //i.e. there is a task connected to this rtos
                if ((id_rtos>=0) && (id_rtos<num_rtos)) {

                    if (task_to_quan[i][id_rtos] !=-1)
                        continue;

                    task_to_quan[i][id_rtos] = num_sms;
                    task_to_sm[i][num_conn_tasksm[i]] = num_sms;
                    rs_to_sm[id_rtos][num_conn_rssm[id_rtos]] = num_sms;

                    num_sms++;
                    num_conn_tasksm[i]++;
                    num_conn_rssm[id_rtos]++;


                    for (k=0; k<num_cpus; k++) {
                        id_cpu = rtos_to_cpu[id_rtos][k];


                        if ((id_cpu>=0) && (id_cpu<num_cpus)) {

                            if (task_to_quan[i][num_rtos+id_cpu] !=-1)
                                continue;

                            task_to_quan[i][num_rtos + id_cpu] = num_sms;
                            task_to_sm[i][num_conn_tasksm[i]] = num_sms;
                            cs_to_sm[id_cpu][num_conn_cssm[id_cpu]] = num_sms;

                            num_sms++;
                            num_conn_tasksm[i]++;
                            num_conn_cssm[id_cpu]++;


                            for (m=0; m<num_cache; m++) {
                                id_cache = cpu_to_cache[id_cpu][m];

                                if ((id_cache>=0) && (id_cache<num_cache)) {

                                    if (task_to_quan[i][num_rtos+num_cpus+id_cache] !=-1)
                                        continue;

                                    task_to_quan[i][num_rtos+num_cpus+id_cache] = num_sms;
                                    task_to_sm[i][num_conn_tasksm[i]] = num_sms;
                                    cas_to_sm[id_cache][num_conn_cassm[id_cache]] = num_sms;

                                    num_sms++;
                                    num_conn_tasksm[i]++;
                                    num_conn_cassm[id_cache]++;

                                    for (n=0; n<num_buses; n++) {
                                        id_bus = cpu_to_bus[id_cpu][n];

                                        if ((id_bus>=0) && (id_bus<num_buses)) {

                                            if (task_to_quan[i][num_rtos+num_cpus+num_cache+id_bus] !=-1)
                                                continue;

                                            task_to_quan[i][num_rtos+num_cpus+num_cache+id_bus] = num_sms;
                                            task_to_sm[i][num_conn_tasksm[i]] = num_sms;
                                            bs_to_sm[id_bus][num_conn_bssm[id_bus]] = num_sms;

                                            num_sms++;
                                            num_conn_tasksm[i]++;
                                            num_conn_bssm[id_bus]++;


                                            for (o=0; o<num_mems; o++) {
                                                id_mem = bus_to_mem[id_bus][o];

                                                if ((id_mem>=0) && (id_mem<num_mems)) {

                                                    if (task_to_quan[i][num_rtos+num_cpus+num_cache+num_buses+id_mem] !=-1)
                                                        continue;

                                                    task_to_quan[i][num_rtos+num_cpus+num_cache+num_buses+id_mem] = num_sms;
                                                    task_to_sm[i][num_conn_tasksm[i]] = num_sms;
                                                    ms_to_sm[id_mem][num_conn_mssm[id_mem]] = num_sms;

                                                    num_sms++;
                                                    num_conn_tasksm[i]++;
                                                    num_conn_mssm[id_mem]++;

                                                }
                                                else if (id_mem == -1) {
                                                    break;}
                                                else {
                                                    blackbox(SystemCSim)%%
                                                        cout << "Wrong bus to mem setting" << endl;
                                                    exit(-1);
                                                    %%;
                                                }

                                            }


                                        } else if (id_bus == -1) {
                                            break;}
                                        else {
                                            blackbox(SystemCSim)%%
                                                cout << "Wrong cpu to bus setting" << endl;
                                            exit(-1);
                                            %%;
                                        }

                                    }


                                } else if (id_cache == -1) {
                                    break;}
                                else {
                                    blackbox(SystemCSim)%%
                                        cout << "Wrong cpu to cache setting" << endl;
                                    exit(-1);
                                    %%;
                                }
                            }

                        } else if (id_cpu == -1) {
                            break;}
                        else {
                            blackbox(SystemCSim)%%
                                cout << "Wrong rtos to cpu setting" << endl;
                            exit(-1);
                            %%;
                        }
                    }


                } else if (id_rtos == -1) {
                    break;}
                else {
                    blackbox(SystemCSim)%%
                        cout << "Wrong task to rtos setting" << endl;
                    exit(-1);
                    %%;
                }
            }
        }


        for (i=0; i<num_rtos; i++) {
            rtos_to_sm[i] = num_sms;
            rs_to_sm[i][num_conn_rssm[i]] = num_sms;
            num_conn_rssm[i]++;
            num_sms++;
            if (num_conn_rssm[i] > num_rtos+1) {
                blackbox(SystemCSim)%%
                    cout << "Rtos scheduler to StateMedium wrong connection" << endl;
                exit(-1);
                %%;
            }

        }

        for (i=0; i<num_cpus; i++) {
            cpu_to_sm[i] = num_sms;
            cs_to_sm[i][num_conn_cssm[i]] = num_sms;
            num_conn_cssm[i]++;
            num_sms++;
            if (num_conn_cssm[i] > num_cpus+1) {
                blackbox(SystemCSim)%%
                    cout << "Cpu scheduler to StateMedium wrong connection" << endl;
                exit(-1);
                %%;
            }

        }


        for (i=0; i<num_cache; i++) {
            cache_to_sm[i] = num_sms;
            cas_to_sm[i][num_conn_cassm[i]] = num_sms;
            num_conn_cassm[i]++;
            num_sms++;
            if (num_conn_cassm[i] > num_cache+1) {
                blackbox(SystemCSim)%%
                    cout << "Cache scheduler to StateMedium wrong connection" << endl;
                exit(-1);
                %%;
            }

        }


        for (i=0; i<num_buses; i++) {
            bus_to_sm[i] = num_sms;
            bs_to_sm[i][num_conn_bssm[i]] = num_sms;
            num_conn_bssm[i]++;
            num_sms++;
            if (num_conn_bssm[i] > num_buses+1) {
                blackbox(SystemCSim)%%
                    cout << "Bus scheduler to StateMedium wrong connection" << endl;
                exit(-1);
                %%;
            }

        }


        for (i=0; i<num_mems; i++) {
            mem_to_sm[i] = num_sms;
            ms_to_sm[i][num_conn_mssm[i]] = num_sms;
            num_conn_mssm[i]++;
            num_sms++;
            if (num_conn_mssm[i] > num_mems+1) {
                blackbox(SystemCSim)%%
                    cout << "Mems scheduler to StateMedium wrong connection" << endl;
                exit(-1);
                %%;
            }

        }

        int tmp = 0;
        for (i=0; i< num_swtasks; i++) {
            tmp += num_conn_tasksm[i];
        }
        tmp += num_quans;
        if (tmp != num_sms) {
            blackbox(SystemCSim)%%
                cout << "ScheduledNetlist to StateMedium wrongly connected" << endl;
            exit(-1);
            %%;
        }

        tmp = 0;

        for (i=0; i< num_rtos; i++) {
            tmp += num_conn_rssm[i];
        }

        for (i=0; i< num_cpus; i++) {
            tmp += num_conn_cssm[i];
        }

        for (i=0; i< num_cache; i++) {
            tmp += num_conn_cassm[i];
        }

        for (i=0; i< num_buses; i++) {
            tmp += num_conn_bssm[i];
        }

        for (i=0; i< num_mems; i++) {
            tmp += num_conn_mssm[i];
        }

        tmp += num_swtasks;

        if (tmp != num_sms) {
            blackbox(SystemCSim)%%
                cout << "ScheduledNetlist to StateMedium wrongly connected" << endl;
            exit(-1);
            %%;

        }

        _stateMedia = new SchedToQuantity[num_sms];

        for (i=0; i<num_sms; i++) {
            _stateMedia[i] = new SchedToQuantity("StateMedium"+i, i);
        }


        _ASDN = new ArchScheduledNetlist("ScheduledNetlist_Vert", num_sms, num_swtasks, num_cpus, num_buses,
                num_mems, num_rtos, num_cache, mem_space, cache_space, block_size,
                assoc, mis_pen, task_to_rtos,
                task_to_sm, num_conn_tasksm, cpu_to_bus, cpu_to_sm,
                bus_to_mem, bus_to_sm,
                cpu_to_cache, cache_to_sm,
                rtos_to_cpu, rtos_to_sm,
                mem_to_sm, _stateMedia, simulation);



        _ASGN = new ArchSchedulingNetlist("SchedulingNetlist_Vert", true, num_sms, num_swtasks, num_cpus,
                num_buses, num_mems, num_rtos, num_cache, cpu_clock, cpu_sched_alg,
                time_slice, cpu_service_cycle, num_conn_cssm, cs_to_sm,
                bus_clock, bus_sched_alg, bus_service_cycle, num_conn_bssm, bs_to_sm,
                mem_clock, mem_sched_alg, mem_service_cycle, num_conn_mssm, ms_to_sm,
                rtos_clock, rtos_sched_alg, rtos_service_cycle, num_conn_rssm, rs_to_sm,
                cache_clock, cache_sched_alg, cache_service_cycle, num_conn_cassm, cas_to_sm,
                null, gt_to_sm, _stateMedia);


        addcomponent(_ASDN, this, "SchduledNetlistInst_Vert");
        addcomponent(_ASGN, this, "SchedulingNetlistInst_Vert");
    }

    public SwTask[] getTasks() {
        return _ASDN.getSwTasks();
    }

}

//rev 2.0; Release Version; DMD
