/*

@Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package pip.architecture.vertical;

/////////////////////////////////////////////////////////////////////
//        Design Example of Metropolis
//        Vertical Refinement
//        PiP Architecture
//
//        Author: Alessandro Pinto
//                Yoshi Watanabe
//                Haibo Zeng
//                Doug Densmore
/////////////////////////////////////////////////////////////////////

/*
  Release Version; Rev 2.0

  1. Need to add the infrastructure to support new services added by
  vertical refinement.

*/


public netlist ArchSchedulingNetlist extends SchedulingNetlist {

    ///////////////////////////////////////////////////////////////////
    ////                         public variables                  ////

    ///////////////////////////////////////////////////////////////////
    ////                         protected variables               ////

    MyScheduler[] _cpuSchedulers;
    MyScheduler[] _busSchedulers;
    MyScheduler[] _memSchedulers;
    MyScheduler[] _rtosSchedulers;
    MyScheduler[] _cacheSchedulers;
    GlobalTime _gTime;

    int _nCpus, _nBuses, _nMems,_nCache, _nRtos;

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    final static int SCHEDULING_ALGORITHM_FIFO                 = 0;
    final static int SCHEDULING_ALGORITHM_ROUND_ROBIN         = 1;
    final static int SCHEDULING_ALGORITHM_PRIORITY_BASED         = 2;
    final static int SCHEDULING_ALGORITHM_TIME_SLICE_BASED         = 3;


    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    // Constructors
    public ArchSchedulingNetlist(String n, boolean is_top,
            int num_sms, int num_swtasks, int num_cpus, int num_buses, int num_mems, int num_rtos, int num_cache,
            double[] cpu_clock, int[] cpu_sched_alg, double[] time_slice, int[][] cpu_service_cycle, int[] num_conn_cssm, int[][] cs_to_sm,
            double[] bus_clock, int[] bus_sched_alg, int[][] bus_service_cycle, int[] num_conn_bssm, int[][] bs_to_sm,
            double[] mem_clock, int[] mem_sched_alg, int[][] mem_service_cycle, int[] num_conn_mssm, int[][] ms_to_sm,
            double[] rtos_clock, int[] rtos_sched_alg, int[][]rtos_service_cycle, int[] num_conn_rssm, int[][] rs_to_sm,
            double[] cache_clock, int[]cache_sched_alg, int[][]cache_service_cycle, int[] num_conn_cassm, int[][] cas_to_sm,
            GlobalTime gt, int[] gt_to_sm,
            SchedToQuantity[] state_media)
    {
        super(n, is_top);

        int i, j;
        int id_sm;
        int[] connected = new int[num_sms];

        _nCpus = num_cpus;
        _nBuses = num_buses;
        _nMems = num_mems;
        _nCache = num_cache;
        _nRtos = num_rtos;

        _cpuSchedulers = new MyScheduler[_nCpus];
        _busSchedulers = new MyScheduler[_nBuses];
        _memSchedulers = new MyScheduler[_nMems];
        _cacheSchedulers = new MyScheduler[_nCache];
        _rtosSchedulers = new MyScheduler[_nRtos];


        for (i=0; i<num_sms; i++) {
            connected[i] = 0;
            addcomponent(state_media[i], this, "StateMediumInst"+i);
        }

        if (gt == null)         _gTime = new GlobalTime("GTime");
        else                                                 _gTime = gt;

        addcomponent(_gTime, this, "GlobalTimeInst");

        /*  This is commented out because the current implementation of GlobalTime does not connect to any statemedium.
            for (i=0; i<num_tasks; i++) {
            id_sm = gt_to_sm[i];
            if ((id_sm<0) || (id_sm>=num_sms)) {
            blackbox(SystemCSim)%%
            cout << "Bug! GlobalTime connects to state_medium"<<id_sm<<" which is non-existing"<< endl;
            exit(-1);
            %%;
            }
            if (connected[id_sm] == 1) {
            blackbox(SystemCSim)%%
            cout << "Bug! state_medium"<<id_sm<<" has more than one connections, here to GlobalTime"<< endl;
            exit(-1);
            %%;
            }
            connect(_gTime, _portSM[i], state_media[id_sm]);
            connect(state_media[id_sm], _portQuan, _gTime);
            connected[id_sm] = 1;
            }
        */


        for (i=0; i<num_mems; i++) {
            /*
              switch(mem_sched_alg[i]) {
              case SCHEDULING_ALGORITHM_FIFO:
              _memSchedulers[i] = new SchedulerFIFO("MemScheduler"+i, i, mem_clock[i], mem_service_cycle[i], num_conn_mssm[i], ms_to_sm[i]);
              break;

              case SCHEDULING_ALGORITHM_ROUND_ROBIN:
              blackbox(SystemCSim)%%
              //        cout << "RoundRobin is not supported by MemScheduler"<<i<<", use FIFO instead."<< endl;
              %%;
              _memSchedulers[i] = new SchedulerFIFO("MemScheduler"+i, i, mem_clock[i], mem_service_cycle[i], num_conn_mssm[i], ms_to_sm[i]);
              break;

              case SCHEDULING_ALGORITHM_PRIORITY_BASED:
              _memSchedulers[i] = new SchedulerPriorityBased("MemScheduler"+i, i, mem_clock[i], mem_service_cycle[i],
              num_conn_mssm[i], ms_to_sm[i]);
              break;

              default:
              blackbox(SystemCSim)%%
              cout << "Unknown scheduling algorithm for MemScheduler"<<i<< endl;
              exit(-1);
              %%;
              break;
              }
            */


            _memSchedulers[i] = new SchedulerFIFO("MemScheduler"+i, i, mem_clock[i], mem_service_cycle[i], num_conn_mssm[i], ms_to_sm[i]);
            addcomponent(_memSchedulers[i], this, "MemSchedulerInst"+i);
            connect(_memSchedulers[i], _portGT, _gTime);

            for (j=0; j<num_conn_mssm[i]; j++) {
                id_sm = ms_to_sm[i][j];
                if ((id_sm<0) || (id_sm>=num_sms)) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! MemScheduler"<<i<<" connects to state_medium"<<id_sm<<" which is non-existing"<< endl;
                    exit(-1);
                    %%;
                }
                else if (connected[id_sm] == 1) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! state_medium"<<id_sm<<" has more than one connections, here to MemScheduler"<<i<< endl;
                    exit(-1);
                    %%;
                }
                connect(_memSchedulers[i], _portSM[j], state_media[id_sm]);
                connect(state_media[id_sm], _portQuan, _memSchedulers[i]);
                connected[id_sm] = 1;
            }
        }

        for (i=0; i<num_buses; i++) {
            /*
              switch(bus_sched_alg[i]) {
              case SCHEDULING_ALGORITHM_FIFO:
              _busSchedulers[i] = new SchedulerFIFO("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i], num_conn_bssm[i], bs_to_sm[i]);
              break;

              case SCHEDULING_ALGORITHM_ROUND_ROBIN:
              blackbox(SystemCSim)%%
              //        cout << "RoundRobin is not supported by BusScheduler"<<i<<", use FIFO instead."<< endl;
              %%;
              _busSchedulers[i] = new SchedulerFIFO("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i], num_conn_bssm[i], bs_to_sm[i]);
              break;

              case SCHEDULING_ALGORITHM_PRIORITY_BASED:
              _busSchedulers[i] = new SchedulerPriorityBased("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i],
              num_conn_bssm[i], bs_to_sm[i]);
              break;

              default:
              blackbox(SystemCSim)%%
              cout << "Unknown scheduling algorithm for BusScheduler"<<i<< endl;
              exit(-1);
              %%;
              break;
              }
            */

            _busSchedulers[i] = new SchedulerFIFO("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i],
                    num_conn_bssm[i], bs_to_sm[i]);

            addcomponent(_busSchedulers[i], this, "BusSchedulerInst"+i);
            connect(_busSchedulers[i], _portGT, _gTime);

            for (j=0; j<num_conn_bssm[i]; j++) {
                id_sm = bs_to_sm[i][j];
                if ((id_sm<0) || (id_sm>=num_sms)) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! BusScheduler"<<i<<" connects to state_medium"<<id_sm<<" which is non-existing"<< endl;
                    exit(-1);
                    %%;
                }
                else if (connected[id_sm] == 1) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! state_medium"<<id_sm<<" has more than one connections, here to BusScheduler"<<i<< endl;
                    exit(-1);
                    %%;
                }
                connect(_busSchedulers[i], _portSM[j], state_media[id_sm]);
                connect(state_media[id_sm], _portQuan, _busSchedulers[i]);
                connected[id_sm] = 1;
            }
        }

        for (i=0; i<num_cpus; i++) {

            switch(cpu_sched_alg[i]) {
            case SCHEDULING_ALGORITHM_FIFO:
                _cpuSchedulers[i] = new SchedulerFIFO("CpuScheduler"+i, i, cpu_clock[i], cpu_service_cycle[i], num_conn_cssm[i], cs_to_sm[i]);
                break;

                /*                                case SCHEDULING_ALGORITHM_ROUND_ROBIN:
                                                  _cpuSchedulers[i] = new SchedulerRoundRobin("CpuScheduler"+i, i, cpu_clock[i],
                                                  time_slice[i], cpu_service_cycle[i], num_conn_cssm[i], cs_to_sm[i]);
                                                  break;

                                                  case SCHEDULING_ALGORITHM_PRIORITY_BASED:
                                                  _cpuSchedulers[i] = new SchedulerPriorityBased("CpuScheduler"+i, i, cpu_clock[i],
                                                  num_conn_cssm[i], cs_to_sm[i]);
                                                  break;
                */
            case SCHEDULING_ALGORITHM_TIME_SLICE_BASED:
                _cpuSchedulers[i] = new SchedulerTimeSliceBased("CpuScheduler"+i, i,
                        cpu_clock[i], time_slice[i],
                        cpu_service_cycle[i],
                        num_conn_cssm[i], cs_to_sm[i]);
                break;
            default:
                blackbox(SystemCSim)%%
                    cout << "Unknown scheduling algorithm for CpuScheduler"<<i<< endl;
                exit(-1);
                %%;
                break;
            }


            //            _cpuSchedulers[i] = new SchedulerFIFO("CpuScheduler"+i, i, cpu_clock[i], cpu_service_cycle[i], num_conn_cssm[i], cs_to_sm[i]);
            addcomponent(_cpuSchedulers[i], this, "CpuSchedulerInst"+i);
            connect(_cpuSchedulers[i], _portGT, _gTime);

            for (j=0; j<num_conn_cssm[i]; j++) {
                id_sm = cs_to_sm[i][j];
                if ((id_sm<0) || (id_sm>=num_sms)) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! CpuScheduler"<<i<<" connects to state_medium"<<id_sm<<" which is non-existing"<< endl;
                    exit(-1);
                    %%;
                }
                else if (connected[id_sm] == 1) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! state_medium"<<id_sm<<" has more than one connections, here to CpuScheduler"<<i<< endl;
                    exit(-1);
                    %%;
                }
                connect(_cpuSchedulers[i], _portSM[j], state_media[id_sm]);
                connect(state_media[id_sm], _portQuan, _cpuSchedulers[i]);
                connected[id_sm] = 1;
            }
        }


        for (i=0; i<num_rtos; i++) {

            switch(bus_sched_alg[i]) {
            case SCHEDULING_ALGORITHM_FIFO:
                _rtosSchedulers[i] = new SchedulerFIFO("RtosScheduler"+i, i, rtos_clock[i], rtos_service_cycle[i], num_conn_rssm[i], rs_to_sm[i]);

                break;
                /*
                  case SCHEDULING_ALGORITHM_ROUND_ROBIN:
                  blackbox(SystemCSim)%%
                  //        cout << "RoundRobin is not supported by BusScheduler"<<i<<", use FIFO instead."<< endl;
                  %%;
                  _busSchedulers[i] = new SchedulerFIFO("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i], num_conn_bssm[i], bs_to_sm[i]);
                  break;

                  case SCHEDULING_ALGORITHM_PRIORITY_BASED:
                  _busSchedulers[i] = new SchedulerPriorityBased("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i],
                  num_conn_bssm[i], bs_to_sm[i]);
                  break;
                */
            case SCHEDULING_ALGORITHM_TIME_SLICE_BASED:
                _rtosSchedulers[i] = new SchedulerTimeSliceBased("RtosScheduler"+i, i,
                        rtos_clock[i], time_slice[i],
                        rtos_service_cycle[i],
                        num_conn_rssm[i], rs_to_sm[i]);

            default:
                blackbox(SystemCSim)%%
                    cout << "Unknown scheduling algorithm for rtosScheduler"<<i<< endl;
                exit(-1);
                %%;
                break;
            }


            addcomponent(_rtosSchedulers[i], this, "RtosSchedulerInst"+i);
            connect(_rtosSchedulers[i], _portGT, _gTime);

            for (j=0; j<num_conn_rssm[i]; j++) {
                id_sm = rs_to_sm[i][j];
                if ((id_sm<0) || (id_sm>=num_sms)) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! RtosScheduler"<<i<<" connects to state_medium"<<id_sm<<" which is non-existing"<< endl;
                    exit(-1);
                    %%;
                }

                else if (connected[id_sm] == 1) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! state_medium"<<id_sm<<" has more than one connections, here to RtosScheduler"<<i<< endl;
                    exit(-1);
                    %%;
                }
                connect(_rtosSchedulers[i], _portSM[j], state_media[id_sm]);
                connect(state_media[id_sm], _portQuan, _rtosSchedulers[i]);
                connected[id_sm] = 1;
            }
        }



        for (i=0; i<num_cache; i++) {
            /*
              switch(bus_sched_alg[i]) {
              case SCHEDULING_ALGORITHM_FIFO:
              _busSchedulers[i] = new SchedulerFIFO("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i], num_conn_bssm[i], bs_to_sm[i]);
              break;

              case SCHEDULING_ALGORITHM_ROUND_ROBIN:
              blackbox(SystemCSim)%%
              //        cout << "RoundRobin is not supported by BusScheduler"<<i<<", use FIFO instead."<< endl;
              %%;
              _busSchedulers[i] = new SchedulerFIFO("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i], num_conn_bssm[i], bs_to_sm[i]);
              break;

              case SCHEDULING_ALGORITHM_PRIORITY_BASED:
              _busSchedulers[i] = new SchedulerPriorityBased("BusScheduler"+i, i, bus_clock[i], bus_service_cycle[i],
              num_conn_bssm[i], bs_to_sm[i]);
              break;

              default:
              blackbox(SystemCSim)%%
              cout << "Unknown scheduling algorithm for BusScheduler"<<i<< endl;
              exit(-1);
              %%;
              break;
              }
            */

            _cacheSchedulers[i] = new SchedulerFIFO("CacheScheduler"+i, i, cache_clock[i], cache_service_cycle[i],
                    num_conn_cassm[i], cas_to_sm[i]);

            addcomponent(_cacheSchedulers[i], this, "CacheSchedulerInst"+i);
            connect(_cacheSchedulers[i], _portGT, _gTime);

            for (j=0; j<num_conn_cassm[i]; j++) {
                id_sm = cas_to_sm[i][j];
                if ((id_sm<0) || (id_sm>=num_sms)) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! CacheScheduler"<<i<<" connects to state_medium"<<id_sm<<" which is non-existing"<< endl;
                    exit(-1);
                    %%;
                }

                else if (connected[id_sm] == 1) {
                    blackbox(SystemCSim)%%
                        cout << "Bug! state_medium"<<id_sm<<" has more than one connections, here to CacheScheduler"<<i<< endl;
                    exit(-1);
                    %%;
                }
                connect(_cacheSchedulers[i], _portSM[j], state_media[id_sm]);
                connect(state_media[id_sm], _portQuan, _cacheSchedulers[i]);
                connected[id_sm] = 1;
            }
        }

        for (i=0; i<num_sms; i++) {
            if (connected[i] == 0) {
                blackbox(SystemCSim)%%
                    cout << "Bug! state_medium"<<i<<" has no connection in ScheduledNetlist"<< endl;
                exit(-1);
                %%;
            }
        }

    }


    public update void resolve() {
        boolean stable;
        int i;

        do {
            stable = true;

            for (i=0; i<_nRtos; i++) {
                _rtosSchedulers[i].resolve();

                if (!_rtosSchedulers[i].stable()) stable = false;
            }

            for (i=0; i<_nCpus; i++) {
                _cpuSchedulers[i].resolve();

                if (!_cpuSchedulers[i].stable()) stable = false;
            }

            for (i=0; i<_nCache; i++) {
                _cacheSchedulers[i].resolve();

                if (!_cacheSchedulers[i].stable()) stable = false;
            }

            for (i=0; i<_nBuses; i++) {
                _busSchedulers[i].resolve();

                if (!_busSchedulers[i].stable()) stable = false;
            }

            for (i=0; i<_nMems; i++) {
                _memSchedulers[i].resolve();

                if (!_memSchedulers[i].stable()) stable = false;
            }


            _gTime.resolve();
            if (!_gTime.stable()) stable = false;

        } while (!stable);

        blackbox(SystemCSim)%%
            //        cout << "\n"<<endl;
            %%;
    }

    ///////////////////////////////////////////////////////////////////
    ////                         protected methods                 ////

    ///////////////////////////////////////////////////////////////////
    ////                         private methods                  ////


}

//rev 2.0; Release Version; DMD
