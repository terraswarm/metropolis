/*

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package pip.architecture.simple;

/////////////////////////////////////////////////////////////////////
//        Design Example of Metropolis
//        PiP Architecture
//
//        Author: Alessandro Pinto
//                                        Yoshi Watanabe
//                                        Haibo Zeng
/////////////////////////////////////////////////////////////////////

// public process SwTask implements TtlService{
public process SwTask {

    ///////////////////////////////////////////////////////////////////
    ////                         public variables                  ////

    ///////////////////////////////////////////////////////////////////
    ////                         protected variables               ////

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    final static int FUNCTION_ID_REQUEST                                                                         = 0;
    final static int FUNCTION_ID_READ                                                                                 = 1;
    final static int FUNCTION_ID_READ_LONG                                                                 = 2;
    final static int FUNCTION_ID_READ_PROTECTED                                         = 3;
    final static int FUNCTION_ID_READ_LONG_PROTECTED                        = 4;
    final static int FUNCTION_ID_WRITE                                                                                 = 5;
    final static int FUNCTION_ID_WRITE_LONG                                                         = 6;
    final static int FUNCTION_ID_WRITE_PROTECTED                                         = 7;
    final static int FUNCTION_ID_WRITE_LONG_PROTECTED                        = 8;

    port SwTaskService[]  _portSlaves;
    port StateMediumProc[] _portSM;

    int _swtaskID;
    int _mapped;

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    // Constructor
    public SwTask(String n, int id, int num_sms, int num_cpus, int mapped){
        super(n);

        _portSlaves = new SwTaskService[num_cpus];
        _portSM = new StateMediumProc[num_sms];

        _swtaskID = id;
        _mapped = mapped;

        blackbox(SystemCSim)%%
            //                        glb_counter = 0;

            //                        counter_read[_swtaskID] = 0;
            //                        counter_write[_swtaskID] = 0;
            //                        counter_execute[_swtaskID] = 0;
            %%;
    }


    public void thread() {
        int i=0;
        Nondet _baseAddr, _offset, _sizeObj, _numObj;
        Nondet _funId, _comp;

        _baseAddr    = new Nondet();
        _offset  = new Nondet();
        _sizeObj = new Nondet();
        _numObj  = new Nondet();
        _funId   = new Nondet();
        _comp    = new Nondet();

        if (_mapped) {
            while (true) {
                _baseAddr.setAny();
                _offset.setAny();
                _sizeObj.setAny();
                _numObj.setAny();
                _funId.setAny();
                _comp.setAny();
                await{
                    (true; ; )        read(_baseAddr, _offset, _sizeObj, _numObj);
                    (true; ; )        write(_baseAddr, _offset, _sizeObj, _numObj);
                    (true; ; )        execute(_funId, _comp);
                }
                i++;
            }
        } else {
            _funId.set(0);
            _comp.set(10);
            execute(_funId, _comp);

            _baseAddr.set(0);
            _offset.set(0);
            _sizeObj.set(1);
            _numObj.set(10);
            read(_baseAddr, _offset, _sizeObj, _numObj);

            _baseAddr.set(0);
            _offset.set(0);
            _sizeObj.set(1);
            _numObj.set(10);
            write(_baseAddr, _offset, _sizeObj, _numObj);
        }
    }

    public void execute(Nondet _funId, Nondet _comp)
        {
            if (_funId.isNondet() || _comp.isNondet()) {
                return;
            }

            _portSlaves[0].request(_comp.get());
            double time = _portSlaves[0].ATime(this, FUNCTION_ID_REQUEST, true);
            time = _portSlaves[0].ATime(this, FUNCTION_ID_REQUEST, false);
        }


    public void read(Nondet _baseAddr, Nondet _offset, Nondet _sizeObj, Nondet _numObj)
        {
            if (_baseAddr.isNondet() || _offset.isNondet() || _sizeObj.isNondet() || _numObj.isNondet()) {
                return;
            }

            int n = _sizeObj.get() * _numObj.get();
            _portSlaves[0].readProtect(_baseAddr.get(), _offset.get(), n);
            double time = _portSlaves[0].ATime(this, FUNCTION_ID_READ_PROTECTED, true);
            time = _portSlaves[0].ATime(this, FUNCTION_ID_READ_PROTECTED, false);
        }

    public void write(Nondet _baseAddr, Nondet _offset, Nondet _sizeObj, Nondet _numObj)
        {
            if (_baseAddr.isNondet() || _offset.isNondet() || _sizeObj.isNondet() || _numObj.isNondet()) {
                return;
            }

            int n = _sizeObj.get() * _numObj.get();
            _portSlaves[0].writeProtect(_baseAddr.get(), _offset.get(), n);
            double time = _portSlaves[0].ATime(this, FUNCTION_ID_WRITE_PROTECTED, true);
            time = _portSlaves[0].ATime(this, FUNCTION_ID_WRITE_PROTECTED, false);
        }

    ///////////////////////////////////////////////////////////////////
    ////                         protected methods                 ////

    ///////////////////////////////////////////////////////////////////
    ////                         private methods                  ////

}
