/*

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package pip.architecture.simple;

/////////////////////////////////////////////////////////////////////
//        Design Example of Metropolis
//        PiP Architecture
//
//        Author: Alessandro Pinto
//                                        Yoshi Watanabe
//                                        Haibo Zeng
/////////////////////////////////////////////////////////////////////

// The Bus medium object takes care of all the data transfers between
// a set of masters and a set of slaves.

public medium Bus implements CpuSlave {

    ///////////////////////////////////////////////////////////////////
    ////                         public variables                  ////

    ///////////////////////////////////////////////////////////////////
    ////                         protected variables               ////

    port SchedReq _portSM;
    port BusSlave[] _portSlaves;


    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    final static int SERVICE_ID_REQUEST                                                                         = 0;
    final static int SERVICE_ID_READ_INIT                                                                        = 1;
    final static int SERVICE_ID_READ                                                                                         = 2;
    final static int SERVICE_ID_READ_PROTECTED_INIT                                = 3;
    final static int SERVICE_ID_READ_PROTECTED                                                 = 4;
    final static int SERVICE_ID_WRITE_INIT                                                                = 5;
    final static int SERVICE_ID_WRITE                                                                                 = 6;
    final static int SERVICE_ID_WRITE_PROTECTED_INIT                        = 7;
    final static int SERVICE_ID_WRITE_PROTECTED                                                = 8;
    final static int SERVICE_ID_RELEASE                                                                         = 9;
    final static int SERVICE_ID_CONTEXT_SWITCH                                                = 10;
    final static int NUMBER_OF_SERVICES                                                                         = 11;

    private int _busID;
    private int _nSlaves;
    private int[] _slaves;

    private SchedReqClass _src;

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    // Constructor
    public Bus(String n, int id, int num_slaves, int[] slaves) {
        super(n);

        _busID        = id;
        _nSlaves = num_slaves;
        _slaves = new int[_nSlaves];

        for (int i=0; i<_nSlaves; i++) {
            _slaves[i] = slaves[i];

            if (_slaves[i]<0) {
                blackbox(SystemCSim)%%
                    cout <<"Wrong slave id"<<endl;
                exit(-1);
                %%;
            }
        }

        _portSlaves = new BusSlave[_nSlaves];
        _src = new SchedReqClass();
    }


    public int id() { return _busID; }

    public eval         void cpuSlaveRead (int target, int addr, int n, int p) {
        event e, r;
        int id_port;

        id_port = _slavePortID(target);
        if (id_port==-1) {
            blackbox(SystemCSim)%%
                cout<<"Out of memory: Mem"<<target<<" is not connected to Bus"<<_busID<<endl;
            exit(-1);
            %%;
        }

        bri{@;
 {$
      beg{
     e =  beg(getthread(), this.bri);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus read bri beg"<<endl;
         %%;
 }

 end{
     r =  end(getthread(), this.bri);
     _src.setSchedReqClass(r, e, SERVICE_ID_READ_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus read bri end"<<endl;
         %%;
 }
 $}@};

        br1{@;

 {$
      beg{
     e =  beg(getthread(), this.br1);
     _src.setSchedReqClass(e, SERVICE_ID_READ, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus read br1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            _portSlaves[id_port].busSlaveRead(target, addr, n);
        }
        br2{@;
 {$
      end{
     r =  end(getthread(), this.br2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus read br2 end"<<endl;
     %%;
 }
 $}@};
    }

    public eval         void cpuSlaveReadProtect (int target, int addr, int n, int p) {
        event e, r;
        int id_port;

        id_port = _slavePortID(target);
        if (id_port==-1) {
            blackbox(SystemCSim)%%
                cout<<"Out of memory: Mem"<<target<<" is not connected to Bus"<<_busID<<endl;
            exit(-1);
            %%;
        }

        brpi{@;
 {$
      beg{
     e =  beg(getthread(), this.brpi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus read brpi beg"<<endl;
         %%;
 }

 end{
     r =  end(getthread(), this.brpi);
     _src.setSchedReqClass(r, e, SERVICE_ID_READ_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus read brpi end"<<endl;
         %%;
 }
 $}@};

        brp1{@;

 {$
      beg{
     e =  beg(getthread(), this.brp1);
     _src.setSchedReqClass(e, SERVICE_ID_READ_PROTECTED, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus read brp1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            _portSlaves[id_port].busSlaveReadProtect(target, addr, n);
        }
        brp2{@;
 {$
      end{
     r =  end(getthread(), this.brp2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus read brp2 end"<<endl;
     %%;
 }
 $}@};
    }

    public update void cpuSlaveWrite(int target, int addr, int n, int p) {
        event e, r;
        int id_port;

        id_port = _slavePortID(target);
        if (id_port==-1) {
            blackbox(SystemCSim)%%
                cout<<"Out of memory: Mem"<<target<<" is not connected to Bus"<<_busID<<endl;
            exit(-1);
            %%;
        }

        bwi{@;
 {$
      beg{
     e =  beg(getthread(), this.bwi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus write bwi beg"<<endl;
         %%;
 }

 end{
     r =  end(getthread(), this.bwi);
     _src.setSchedReqClass(r, e, SERVICE_ID_WRITE_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus write bwi end"<<endl;
         %%;
 }
 $}@};

        bw1{@;
 {$
      beg{
     e =  beg(getthread(), this.bw1);
     _src.setSchedReqClass(e, SERVICE_ID_WRITE, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus write bw1 beg"<<n<<" times"<<endl;
     %%;
 }
 $}
 @};

        {
            _portSlaves[id_port].busSlaveWrite(target, addr, n);
        }
        bw2{@;
 {$
      end{
     r =  end(getthread(), this.bw2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus write bw2 end"<<endl;
     %%;
 }
 $}@};
    }

    public update void cpuSlaveWriteProtect(int target, int addr, int n, int p) {
        event e, r;
        int id_port;

        id_port = _slavePortID(target);
        if (id_port==-1) {
            blackbox(SystemCSim)%%
                cout<<"Out of memory: Mem"<<target<<" is not connected to Bus"<<_busID<<endl;
            exit(-1);
            %%;
        }

        bwpi{@;
 {$
      beg{
     e =  beg(getthread(), this.bwpi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus write bwpi beg"<<endl;
         %%;
 }

 end{
     r =  end(getthread(), this.bwpi);
     _src.setSchedReqClass(r, e, SERVICE_ID_WRITE_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus write bwpi end"<<endl;
         %%;
 }
 $}@};

        bwp1{@;
 {$
      beg{
     e =  beg(getthread(), this.bwp1);
     _src.setSchedReqClass(e, SERVICE_ID_WRITE_PROTECTED, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus write bwp1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            _portSlaves[id_port].busSlaveWriteProtect(target, addr, n);
        }

        bwp2{@;
 {$
      end{
     r =  end(getthread(), this.bwp2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus write bwp2 end"<<endl;
     %%;
 }
 $}@};
    }

    public eval          void cpuSlaveReadLong (int target, int addr, int n, int[] data, int p) {
        event e, r;
        int id_port;

        id_port = _slavePortID(target);
        if (id_port==-1) {
            blackbox(SystemCSim)%%
                cout<<"Out of memory: Mem"<<target<<" is not connected to Bus"<<_busID<<endl;
            exit(-1);
            %%;
        }

        brli{@;
 {$
      beg{
     e =  beg(getthread(), this.brli);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus read brli beg"<<endl;
         %%;
 }

 end{
     r =  end(getthread(), this.brli);
     _src.setSchedReqClass(r, e, SERVICE_ID_READ_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus read brli end"<<endl;
         %%;
 }
 $}@};

        brl1{@;
 {$
      beg{
     e =  beg(getthread(), this.brl1);
     _src.setSchedReqClass(e, SERVICE_ID_READ, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus read brl1 beg "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            _portSlaves[id_port].busSlaveReadLong(target, addr, n, data);
        }

        brl2{@;
 {$
      end{
     r =  end(getthread(), this.brl2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus read brl2 end"<<endl;
     %%;
 }
 $}@};
    }

    public eval          void cpuSlaveReadLongProtect (int target, int addr, int n, int[] data, int p) {
        event e, r;
        int id_port;

        id_port = _slavePortID(target);
        if (id_port==-1) {
            blackbox(SystemCSim)%%
                cout<<"Out of memory: Mem"<<target<<" is not connected to Bus"<<_busID<<endl;
            exit(-1);
            %%;
        }

        brlpi{@;
 {$
      beg{
     e =  beg(getthread(), this.brlpi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus read brlpi beg"<<endl;
         %%;
 }

 end{
     r =  end(getthread(), this.brlpi);
     _src.setSchedReqClass(r, e, SERVICE_ID_READ_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus read brlpi end"<<endl;
         %%;
 }
 $}@};

        brlp1{@;
 {$
      beg{
     e =  beg(getthread(), this.brlp1);
     _src.setSchedReqClass(e, SERVICE_ID_READ_PROTECTED, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus read brlp1 begx, "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};

        {
            _portSlaves[id_port].busSlaveReadLongProtect(target, addr, n, data);
        }

        brlp2{@;
 {$
      end{
     r =  end(getthread(), this.brlp2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus read brlp2 end"<<endl;
     %%;
 }
 $}@};
    }

    public update void cpuSlaveWriteLong(int target, int addr, int n, int[] data, int p) {
        event e, r;
        int id_port;

        id_port = _slavePortID(target);
        if (id_port==-1) {
            blackbox(SystemCSim)%%
                cout<<"Out of memory: Mem"<<target<<" is not connected to Bus"<<_busID<<endl;
            exit(-1);
            %%;
        }

        bwli{@;
 {$
      beg{
     e =  beg(getthread(), this.bwli);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus write bwli"<<endl;
         %%;
 }

 end{
     r =  end(getthread(), this.bwli);
     _src.setSchedReqClass(r, e, SERVICE_ID_WRITE_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus write bwli end"<<endl;
         %%;
 }
 $}@};

        bwl1{@;
 {$
      beg{
     e =  beg(getthread(), this.bwl1);
     _src.setSchedReqClass(e, SERVICE_ID_WRITE, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus write bwl1 beg, totally "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            _portSlaves[id_port].busSlaveWriteLong(target, addr, n, data);
        }

        bwl2{@;
 {$
      end{
     r =  end(getthread(), this.bwl2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus write bwl2 end"<<endl;
     %%;
 }
 $}@};
    }

    public update void cpuSlaveWriteLongProtect(int target, int addr, int n, int[] data, int p) {
        event e, r;
        int id_port;

        id_port = _slavePortID(target);
        if (id_port==-1) {
            blackbox(SystemCSim)%%
                cout<<"Out of memory: Mem"<<target<<" is not connected to Bus"<<_busID<<endl;
            exit(-1);
            %%;
        }

        bwlpi{@;
 {$
      beg{
     e =  beg(getthread(), this.bwlpi);
     _src.setSchedReqClass(e, SERVICE_ID_CONTEXT_SWITCH, 1, -1, -1);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus write bwlpi"<<endl;
         %%;
 }

 end{
     r =  end(getthread(), this.bwlpi);
     _src.setSchedReqClass(r, e, SERVICE_ID_WRITE_INIT, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         //        cout<<caller->name()<<" running Bus write bwlpi end"<<endl;
         %%;
 }
 $}@};

        bwlp1{@;
 {$
      beg{
     e =  beg(getthread(), this.bwlp1);
     _src.setSchedReqClass(e, SERVICE_ID_WRITE_PROTECTED, n, -1, id_port);
     _portSM.request(e, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus write bwlp1 beg, totally "<<n<<" times"<<endl;
     %%;
 }
 $}
 @};
        {
            _portSlaves[id_port].busSlaveWriteLongProtect(target, addr, n, data);
        }
        bwlp2{@;
 {$
      end{
     r =  end(getthread(), this.bwlp2);
     _src.setSchedReqClass(r, e, SERVICE_ID_RELEASE, 1, -1, -1);
     _portSM.request(r, _src);

     blackbox(SystemCSim)%%
         cout<<caller->name()<<" running Bus write bwlp2 end"<<endl;
     %%;
 }
 $}@};
    }

    ///////////////////////////////////////////////////////////////////
    ////                         protected methods                 ////

    ///////////////////////////////////////////////////////////////////
    ////                         private methods                  ////

    private int _slavePortID(int id_slave) {
        for (int i=0; i<_nSlaves; i++) {
            if (_slaves[i] == id_slave) return i;
        }
        return -1;
    }
}
