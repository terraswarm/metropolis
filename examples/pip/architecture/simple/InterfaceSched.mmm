/*

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package pip.architecture.simple;

/////////////////////////////////////////////////////////////////////
//        Design Example of Metropolis
//        PiP Architecture
//
//        Author: Alessandro Pinto
//                                        Yoshi Watanabe
//                                        Haibo Zeng
/////////////////////////////////////////////////////////////////////


// This interface define a minimum set of services that a CPU/RTOS
// combination must offer to the software task. The set includes a
// simple service to ask for a certain amount of cpu time
// (cpuRequest). There are then a set of simple read and write
// services to access the bus. The last set of services are protected
// read and write operation. This service emulates the semaphore
// behavior of a standard RTOS.

public interface SwTaskService extends Port {
    eval         void request(int n);

    eval         void read (int target, int addr, int n);
    update void write(int target, int addr, int n);
    eval         void readLong (int target, int addr, int n, int[] data);
    update void writeLong(int target, int addr, int n, int[] data);

    eval         void readProtect (int target, int addr, int n);
    update void writeProtect(int target, int addr, int n);
    eval         void readLongProtect (int target, int addr, int n, int[] data);
    update void writeLongProtect(int target, int addr, int n, int[] data);

    eval         double ATime(process p, int id_fun, boolean is_beg);
}



public interface CpuSlave extends Port {
    eval         void cpuSlaveRead (int target, int addr, int n, int p);
    update void cpuSlaveWrite(int target, int addr, int n, int p);
    eval          void cpuSlaveReadLong (int target, int addr, int n, int[] data, int p);
    update void cpuSlaveWriteLong(int target, int addr, int n, int[] data, int p);

    eval         void cpuSlaveReadProtect (int target, int addr, int n, int p);
    update void cpuSlaveWriteProtect(int target, int addr, int n, int p);
    eval          void cpuSlaveReadLongProtect (int target, int addr, int n, int[] data, int p);
    update void cpuSlaveWriteLongProtect(int target, int addr, int n, int[] data, int p);
}



public interface BusSlave extends Port {
    eval         void busSlaveRead (int target, int addr, int n);
    update void busSlaveWrite(int target, int addr, int n);
    eval          void busSlaveReadLong (int target, int addr, int n, int[] data);
    update void busSlaveWriteLong(int target, int addr, int n, int[] data);

    eval         void busSlaveReadProtect (int target, int addr, int n);
    update void busSlaveWriteProtect(int target, int addr, int n);
    eval          void busSlaveReadLongProtect (int target, int addr, int n, int[] data);
    update void busSlaveWriteLongProtect(int target, int addr, int n, int[] data);
}
