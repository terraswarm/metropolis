/*
  Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/

package pip.func;

import metamodel.plt.yapitemplate.*;
import metamodel.plt.TTLtemplate.*;
//*****************************************************************************

process SimpleProcess
{
    public SimpleProcess(String name)
        {
            super(name);
        }

    public elaborate int numOut() { return 0;}
    public elaborate int numIn()        { return 0;}

    void thread() {}
}

//*****************************************************************************
process Source extends SimpleProcess
{
    port yapioutinterface-<yapiint>- out;
    int length;
    int times;

    public Source(String name, int len, int t)
        {
            super(name);
            length = len;
            times = t;
        }

    public elaborate int numOut() { return 1;}
    public elaborate int numIn()        { return 0;}

    void thread()
        {
            int w = 0;
            yapiint[] data = new yapiint[length];

            for (int i = 0; i < length; i++)
                {
                    data[i] = new yapiint(100);
                }

            while (w < times)
                {
                    out.write(data, length);

                    blackbox(SystemCSim)%%
                        cout << name() << " wrote data " << w << endl;
                    %%;
                    w++;
                }
        }
}
//*****************************************************************************
process Sink extends SimpleProcess
{
    port yapiininterface-<yapiint>- in;
    int length;
    int times;

    public Sink(String name, int len, int t)
        {
            super(name);
            length = len;
            times = t;
        }

    public elaborate int numOut() { return 0;}
    public elaborate int numIn()        { return 1;}

    void thread()
        {
            int w = 0;
            yapiint[] data = new yapiint[length];

            for (int i = 0; i < length; i++)
                {
                    data[i] = null;
                }

            while (w < times)
                {
                    in.read(data, length);

                    blackbox(SystemCSim)%%
                        cout << name() << " read data " << w << endl;
                    %%;
                    w++;
                }
        }
}

//*****************************************************************************
process Join extends SimpleProcess
{
    port yapiininterface-<yapiint>- in1;
    port yapiininterface-<yapiint>- in2;
    port yapioutinterface-<yapiint>- out;
    int length;
    int times;

    public Join(String name, int len, int t)
        {
            super(name);
            length = len;
            times = t;
        }

    public elaborate int numOut() { return 1;}
    public elaborate int numIn()        { return 2;}

    void thread()
        {
            int w = 0;
            yapiint[] data = new yapiint[length];

            for (int i = 0; i < length; i++)
                {
                    data[i] = null;
                }

            while (w < times)
                {

                    in1.read(data, length);
                    in2.read(data, length);

                    blackbox(SystemCSim)%%
                        cout << name() << " read data " << w << endl;
                    %%;

                    out.write(data, length);

                    blackbox(SystemCSim)%%
                        cout << name() << " wrote data " << w << endl;
                    %%;

                    w++;
                }
        }
}
//*****************************************************************************


public netlist func
{
    yapichannel-<yapiint>- ch1, ch2, ch3;
    TTLmediumnetlist-<yapiint>- ch1_ttl, ch2_ttl, ch3_ttl;

    SimpleProcess source1, source2, join1, sink1;

    public func(String n)
    {
        super(n);

        ch1 = new yapichannel-<yapiint>-("ch1", 1);
        addcomponent(ch1, this, "ch1");

        ch2 = new yapichannel-<yapiint>-("ch2", 1);
        addcomponent(ch2, this, "ch2");

        ch3 = new yapichannel-<yapiint>-("ch3", 1);
        addcomponent(ch3, this, "ch3");

        source1 = new Source("source1", 5, 20);
        addcomponent(source1, this, "source1");
        connect(source1, out, ch1);

        source2 = new Source("source2", 5, 20);
        addcomponent(source2, this, "source2");
        connect(source2, out, ch2);

        join1 = new Join("join1", 5, 20);
        addcomponent(join1, this, "join1");
        connect(join1, in1, ch1);
        connect(join1, in2, ch2);
        connect(join1, out, ch3);

        sink1 = new Sink("sink1", 5, 20);
        addcomponent(sink1, this, "sink1");
        connect(sink1, in, ch3);

        refineIndepTTL();
    }
    //*****************************************************************************
    public elaborate LinkedList getProcs()
    {
        LinkedList retlist = new LinkedList();
        retlist.add(source1);
        retlist.add(source2);
        retlist.add(join1);
        retlist.add(sink1);
        return retlist;
    }
    //*****************************************************************************
    public elaborate void refineIndepTTL()
    {
        ch1_ttl = new TTLmediumnetlist-<yapiint>-("ch1_ttl", ch1, 1, 11, 0, 1, new stfunc());
        addcomponent(ch1_ttl, this, "ch1_ttl");

        ch2_ttl = new TTLmediumnetlist-<yapiint>-("ch2_ttl", ch2, 1, 17, 0, 1, new stfunc());
        addcomponent(ch2_ttl, this, "ch2_ttl");

        ch3_ttl = new TTLmediumnetlist-<yapiint>-("ch3_ttl", ch3, 1, 7, 0, 1, new stfunc());
        addcomponent(ch3_ttl, this, "ch3_ttl");
    }

}
