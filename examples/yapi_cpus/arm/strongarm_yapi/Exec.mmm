/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
import metamodel.plt.yapitemplate.*;

blackbox(SystemCSim)%%
#include "tracesim.h"
%%;

// AUTHOR: Trevor Meyerowitz (tcm@eecs.berkeley.edu)
//
// OVERVIEW:
// Execution block portion of 2-process microarchitectural
// models. Handles operand dependencies between instructions, models
// pipelined execution units of various latencies.

// NOTES:
// - Currently doesn't treat load-halfword and load-byte w/ different
//     execution times, which they have when there is sign extension
// - No value dependence exec time or resource dependencies for multiplies
// - No integration or non-determinism for memory instructions
// - Currently handles mispredicts at both sides?



process Exec extends yapiprocess-<Instruction;Instruction;Instruction;Instruction>- {
    // PORTS:
    ///////////////////////////////
    // The instruction sent from the Fetch process
    port yapiininterface-<Instruction>- FetchedInstruction;

    // Instruction count sent from Fetch process, needed to exit properly
    port yapiininterface-<yapiint>- DoConfig;

    port yapiininterface-<Instruction>-[] ResultsIn; // Results FIFO input
    // Stall outputs to the fetch unit for operand dependencies
    port yapioutinterface-<yapiint>- DoStall;
    port yapioutinterface-<Instruction>-[] ResultsOut; // Results FIFO output

    // PAREMTERS
    parameter int MispredictPenalty; // penalty for branch misprediction
    // configuration for different execution (commit) latencies
    parameter int num_commit_types;
    parameter int commit_lengths[];

    // constants used for instruction classification
    static final int tBranch = 0;
    static final int tSWI    = 1;
    static final int tDPI    = 2;
    static final int tMult   = 3;
    static final int tLoad   = 4;
    static final int tStore  = 5;
    static final int tSwap   = 6;
    static final int tCoProc = 7;

    // State for tracking stalls on registers and condition codes
    int[] StallFor;
    int CcStall; // stall for condition codes

    int num_inst_processed, num_inst_in_trace;

    // statistics that are kept about the exeuction
    int CYCLE_COUNT, NUM_STALLS, NUM_BUBBLES, NUM_BRANCHES;
    int NUM_MISPREDICTS, NUM_BTB_LOADS;

    // instruction tokens used in here
    Instruction ReadInst;
    Instruction BubbleInst; // empty instruction for bubbles
    Instruction ResultsInst;


    int stall;


    // The constructor, sets up parameters
    Exec(String n, int MP, int commit_types, int _commit_lengths[]) {
        super(n);
        MispredictPenalty = MP;
        num_commit_types = commit_types;

        commit_lengths = new int[num_commit_types];
        for (int i=0; i<num_commit_types; i++) {
            commit_lengths[i] = _commit_lengths[i];
        }

        num_inst_processed = 0;
        num_inst_in_trace = 0;

        ResultsIn = new yapiininterface-<Instruction>-[num_commit_types];
        ResultsOut = new yapioutinterface-<Instruction>-[num_commit_types];
        //ResultsInst = new Instruction[num_commit_types];

        // Initialize stalling mechanisms
        stall = 0; // stall signal
        CcStall = 0;
        StallFor = new int[256];
        for (int x=0;x<256;x++)
            StallFor[x]=0;

        // Zero Initialize Statistics to be taken
        CYCLE_COUNT=0;
        NUM_STALLS=NUM_BUBBLES=0;
        NUM_BRANCHES=NUM_MISPREDICTS=NUM_BTB_LOADS=0;
    }


    // main execution method
    public void execute() {
        BubbleInst = new Instruction(); // the dummy instruction

        // Initialize the Results Pipelines with bubbles
        for (int x=0; x<num_commit_types; x++) {
            blackbox(SystemCSim)%%
                //cout << "Commit_length[" << x << "]:" << commit_lengths[x] << endl;
                %%;
            for (int y=0; y<commit_lengths[x]; y++) {
                ResultsOut[x].write(BubbleInst);
            }
        }

        blackbox(SystemCSim)%%
            //cout << "Inst Size:" << sizeof(Instruction) << endl;
            %%;



        // read in # inst's in trace from Fetcher
        yapiint temp = DoConfig.read();
        num_inst_in_trace = temp.d;
        blackbox(SystemCSim)%%delete temp;%%

            // initial-cycle
            blackbox(SystemCSim)%%
#ifdef CPU_DEBUG
                cout << "### EXEC Cycle:" << CYCLE_COUNT << "###\n";
#endif
            %%;

            // Main exeution loop
            while (true) {
                if (stall == 0) {
                    // if not stalled read the fetched instruction
                    ReadInst = (Instruction)FetchedInstruction.read();
                }

                blackbox(SystemCSim)%%
#ifdef CPU_DEBUG
                    printf("\nExecuting PC: 0x%08x Inst: 0x%08x Cycle: %d\n",
                            ReadInst->PC, ReadInst->IW, CYCLE_COUNT);
                cout << "\tReadOps:" << ReadInst->num_op_regs
                     << " WriteOps:" << ReadInst->num_wr_regs << endl;
#endif
                %%;

                // read operands of current instruction and check for stalling
                reg_read_and_check_stall();

                // handle issuing of the current instruction
                compute_memory();

                yapiint temp = new yapiint(stall);
                DoStall.write( temp );
                blackbox(SystemCSim)%%delete temp; // memory cleanup%%

                CYCLE_COUNT++;

                blackbox(SystemCSim)%%
#ifdef CPU_DEBUG
                    cout << "### EXEC Cycle:" << CYCLE_COUNT << "###\n";
#endif
                %%;

                // handle results from exeuction units
                reg_write();
            }
    }


    // Read the operands for the current instruction and stall if needed
    private void reg_read_and_check_stall() {

        // Update StallFor Registers
        blackbox(SystemCSim)%% //cout << "RegREAD \n";%%
            stall=0;
        if (ReadInst.reads_cc && (CcStall > 0)) stall=1;
        if (ReadInst.executes) {
            for (int x=0; x<ReadInst.num_op_regs; x++) {
                if (StallFor[ReadInst.op_regs[x]] > 0) {
                    stall=1;
                    break;
                }
            }
            if (stall==0) {
                // update stalling information
                for (int x=0; x<ReadInst.num_wr_regs; x++) {
                    StallFor[ReadInst.wr_regs[x]]++;
                    blackbox(SystemCSim)%%
                        //cout << "Inc StallFor[" <<  ReadInst->wr_regs[x]
                        //     << "] to " << StallFor[ReadInst->wr_regs[x]] << endl;
                        %%;
                }
                if (ReadInst.writes_cc)
                    CcStall++;

            }
        } else {
            if ( (stall==0) && ReadInst.reads_cc ) {
                // non-executing b/c of condtion codes/delay on cc and
                // operands.  This isn't necessary if no reads-cc (means null inst)
                for (int x=0;x<ReadInst.num_op_regs;x++) {
                    if (StallFor[ReadInst.op_regs[x]] > 0) {
                        stall=1;
                        break;
                    }
                }
            }
        }

        if (stall==1)
            NUM_STALLS++;
    }


    // issues the current instruction or bubble to the appropriate slot
    private void compute_memory() {
        int selected_slot;

        if (stall > 0) {
            for (int i=0; i<num_commit_types; i++) {
                // We're stalled write bubbles to the results fifo's
                ResultsOut[i].write(BubbleInst);
            }
        } else {
            if (ReadInst.inst_num < 0) {
                // means that it's a bubble stall
                NUM_BUBBLES++;
            }
            if (ReadInst.isBranch()) {
                // handle branching of the instruction
                NUM_BRANCHES++;
                if (ReadInst.has_prediction) {
                    if ( (ReadInst.predict_taken && !ReadInst.executes) ||
                            (!ReadInst.predict_taken && ReadInst.executes) ) {
                        NUM_MISPREDICTS++;
                        NUM_STALLS += MispredictPenalty;
                        //CYCLE_COUNT += MispredictPenalty;
                    }
                    if ( !ReadInst.in_btb ) {
                        NUM_BTB_LOADS++;
                    }
                }
            }

            // select the proper queue to write the instruction to
            selected_slot = getSelectedSlot(ReadInst);

            // write instruction to correct queue and bubbles to all of the rest
            for (int i=0; i<selected_slot; i++)
                ResultsOut[i].write(BubbleInst);
            ResultsOut[selected_slot].write(ReadInst);
            blackbox(SystemCSim)%%delete ReadInst;%%
                for (int i=selected_slot+1; i<num_commit_types; i++)
                    ResultsOut[i].write(BubbleInst);
        }
    }

    // Write back results from result FIFO's,
    // updates the stall tables, and checks for exit conditions
    private void reg_write() {
        blackbox(SystemCSim)%%
            // cout << "RegWRITE \n";
            %%;
        // register writeback, read from results + check about stalling
        for (int i=0; i<num_commit_types; i++) {
            ResultsInst = (Instruction)ResultsIn[i].read();
            if (ResultsInst.executes) {
                blackbox(SystemCSim)%%
#ifdef CPU_DEBUG
                    printf("Commit Results for PC: 0x%08x\n",
                            ResultsInst->PC);
#endif
                %%;
                for (int j=0; j<ResultsInst.num_wr_regs; j++) {
                    StallFor[ResultsInst.wr_regs[j]]--;
                    blackbox(SystemCSim)%%
#ifdef CPU_DEBUG
                        cout << "Dec StallFor[" <<  ResultsInst->wr_regs[j]
                             << "] to " << StallFor[ResultsInst->wr_regs[j]] <<
                        endl;
#endif
                    %%;
                    if (StallFor[ResultsInst.wr_regs[j]] < 0) {
                        //int temp =
                        blackbox(SystemCSim)%%
                            printf("Instruction: pc:0x%08x Inst: 0x%08x\n", ResultsInst->PC,
                                    ResultsInst->IW);
                        cout << "Error, tried to decrement a stall[" <<
                            ResultsInst->wr_regs[j] << "] that was already at 0, exiting\n";
                        exit(-1);
                        %%;
                    }
                }
                // write condition codes
                if (ResultsInst.writes_cc)
                    CcStall--;
            }

            if (ResultsInst.inst_num >= 0) {
                num_inst_processed++;
                blackbox(SystemCSim)%%
#ifdef CPU_DEBUG
                    printf("INST_PROCESSED: %d(%d) pc: 0x%08x Inst: 0x%08x\n",
                            num_inst_processed, ResultsInst->inst_num,
                            ResultsInst->PC, ResultsInst->IW);
#endif
                %%;
            }

            // clean up memory
            blackbox(SystemCSim)%%
                delete ResultsInst;
            %%;

        }

        // check for exit condition
        if (num_inst_processed == num_inst_in_trace) {
            blackbox(SystemCSim)%%
                cout << "\nCycles: " << CYCLE_COUNT << "  Stalls: " << NUM_STALLS
                     << "  Bubbles: " << NUM_BUBBLES << endl
                     << "Branches: " << NUM_BRANCHES << "  Mispredicts: "
                     << NUM_MISPREDICTS << "  BTB_Loads: " << NUM_BTB_LOADS <<"\n\n";
            delete BubbleInst;
            sc_stop();
            %%;
        }
    }


    // Select which results fifo to write to, this will be replaced in
    // child classes with micro-arch specific logic
    private int getSelectedSlot(Instruction inst) {
        return 0;
    }

}
