/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
// Strongarm-specific process derived from general Exec process
//
// AUTHOR: Trevor Meyerowitz (tcm@eecs.berkeley.edu)
//

import metamodel.plt.yapitemplate.*;


blackbox(SystemCSim)%%
#include "tracesim.h"
%%;

// NOTES:
// - Currently doesn't treat load-halfword and load-byte w/ different
//     execution times, which they have when there is sign extension
// - No value dependence exec time or resource dependencies for multiplies
// - No integration or non-determinism for memory instructions
// - Currently handles mispredicts at both sides?



process StrongarmExec extends Exec {
    /*
    // see Exec.mmm for full details
    port yapiininterface FetchedInstruction;
    port yapiininterface DoConfig;
    port yapiininterface[] ResultsIn;
    port yapioutinterface DoStall;
    port yapioutinterface[] ResultsOut;

    parameter int MispredictPenalty;
    parameter int num_commit_types;
    parameter int commit_lengths[];
    */

    // constructor
    StrongarmExec(String n, int MP, int commit_types, int _commit_lengths[]) {
        super(n, MP, commit_types, _commit_lengths);
    }

    // Strongarm-specific: selects which slot (results fifo) the
    // instruction is issued to based on what its type is. This selects
    // the execution latency
    private int getSelectedSlot(Instruction inst) {
        int ss = 0;

        switch (inst.inst_type) {
        case tBranch: // tBranch
            ss = 0;
            break;
        case tSWI: // SWI
            ss = 0; // ??? questionable
            break;
        case tDPI: // DPI
            ss = 0;
            break;
        case tMult: // MULT
            ss = getMultSlot();
            // this is questionable, should be non-det or value based
            blackbox(SystemCSim) %% cout << "Mult:" << ss <<
                endl; %%;
            break;
        case tLoad: // LOAD
            // should check for sign extending for halfword and byte
            ss = 1;
            // ss = 2;
            break;
        case tStore: // STORE
            ss = 0;
            break;
        case tSwap: // SWP
            ss = 2;
            break;
        case tCoProc: // COPROC register transfer
            // check between MCR and MRC (MCR=2)
            if ( (inst.IW & 0x0010000) != 0 )
                ss = 1; // MRC (store)
            else
                ss = 2; // MCR (load)
            break;
        default:
            ss = 0;
            break;
        }

        return ss;
    }

    // selects which slot for multiplication
    private int getMultSlot() {
        return 1;
        /*
          await {
          (true;;)
          return 3;
          (true;;)
          return 2;
          (true;;)
          return 1;
          }
        */
    }

}
