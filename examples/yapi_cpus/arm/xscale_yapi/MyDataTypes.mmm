/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package metamodel.plt.yapitemplate;


// AUTHOR: Trevor Meyerowitz (tcm@eecs.berkeley.edu)
//
// Overview:
// This contains data structures used by the models.
// --Instruction and BTB_Entry (branch target buffer entry)
//

blackbox(SystemCSim)%%
#include "tracesim.h"
%%;

// The instruction token class used in the microarchitectural models
//
public class Instruction extends Object {
    public static final int REG_SIZE = 32;

    // Instruction specific variables
    public int IW, inst_type; // instruction word and types
    public int PC, inst_num;  // the program counter, and instruction #
    public int num_op_regs; // number of operand (read) registers in inst.
    public int num_wr_regs; // number of write registers in inst.
    public int op_regs[];        // array of operand register ID's
    public int wr_regs[];        // array of write register ID's
    public int extra_issue_cycles; // extra cycles used for issuing
    public boolean executes;       // whehter or not the instruction executes
    public boolean  reads_cc, writes_cc;  // if the inst reads/writes condition codes
    public boolean has_prediction, predict_taken, in_btb; // branch_pred information
    //public boolean op_stall; // to be annotated by execution block
    private boolean is_branch; // indicates if instruction is a branch


    // empty (bubble) instruction constructor
    public Instruction() {
        super();
        PC             = -1;
        inst_num       = -1;
        IW                   = 0xF0000000;
        num_op_regs    = num_wr_regs = 0;
        inst_type      = -1;
        executes       = reads_cc = writes_cc = false;
        has_prediction = predict_taken = false;
        in_btb = is_branch      = false;
        extra_issue_cycles = 0;
        op_regs = new int[REG_SIZE];
        wr_regs = new int[REG_SIZE];
    }

    // constructor for non-empty/non-bubble instruction
    public Instruction(int _inst_num, int _PC, int _IW, boolean _exec) {
        super();
        op_regs = new int[REG_SIZE];
        wr_regs = new int[REG_SIZE];
        setValues(_inst_num, _PC, _IW, _exec);
    }

    // sets the values of a particular instruction given
    // the number of it, the program counter, the instruction, and
    // execution status. Uses the tracesim instructions
    public void setValues(int _inst_num, int _PC, int _IW, boolean _exec) {
        inst_num = _inst_num;
        PC = _PC;
        IW                = _IW;
        executes = _exec;
        has_prediction = predict_taken = false;
        num_op_regs = num_wr_regs = 0;
        extra_issue_cycles = 0;
        blackbox(SystemCSim)%%
            CTraceInst *t_inst = new CTraceInst(_PC, IW, _exec);
        num_op_regs = t_inst->getNumOpRegs();
        num_wr_regs = t_inst->getNumWriteRegs();
        if (num_op_regs > 0) {
            if (num_op_regs > REG_SIZE) {
                cerr << "num_op_regs more than" << REG_SIZE << endl;
                exit(-1);
            }
            //op_regs = new int[num_op_regs];
            for (int i=0; i<num_op_regs; i++) {
                op_regs[i] = t_inst->getOpReg(i);
            }
        }
        if (num_wr_regs > 0) {
            //wr_regs = new int[num_wr_regs];
            if (num_wr_regs > REG_SIZE) {
                cerr << "num_wr_regs more than" << REG_SIZE << endl;
                exit(-1);
            }
            for (int i=0; i<num_wr_regs; i++) {
                wr_regs[i] = t_inst->getWriteReg(i);
            }
        }
        reads_cc = t_inst->getReadsCond();
        writes_cc = t_inst->getWritesCond();

        inst_type = t_inst->getInstType();
        is_branch = (inst_type == tBRANCH);
        extra_issue_cycles = t_inst->getExtraIssueCycles();
        delete t_inst;
        %%;
    }

    // FIXME: Can't have trailing semicolon after %% here, or we get:
    // "Syntax error"

    blackbox(SystemCSim)%%
    // Destructor for memory management
    ~Instruction() {
        delete [] op_regs;
        delete [] wr_regs;
    }
    %%//;

    // Returns whether the instruction is a branch or not
    public boolean isBranch() {
        return is_branch;
    }

    // Creates a clone of the object.
    public Object clone() {
        Instruction inst = new Instruction();

        // copy over everything
        inst.PC             = PC;
        inst.inst_num       = inst_num;
        inst.IW                = IW ;
        inst.num_op_regs    = num_op_regs;
        for (int i=0; i<num_op_regs; i++)
            inst.op_regs[i] = op_regs[i];
        inst.num_wr_regs    = num_wr_regs;
        for (int i=0; i<num_wr_regs; i++)
            inst.wr_regs[i] = wr_regs[i];
        inst.inst_type      = inst_type;
        inst.executes       = executes;
        inst.reads_cc       = reads_cc;
        inst.writes_cc      = writes_cc;
        //inst.op_stall       = op_stall;
        inst.in_btb         = in_btb;
        inst.is_branch      = is_branch;
        inst.extra_issue_cycles = extra_issue_cycles;
        inst.has_prediction = has_prediction;
        inst.predict_taken = predict_taken;

        return (Object)inst;
    }
}



// This is an entry in the branch target buffer for branch prediction
//
public class BTB_Entry extends Object {
    private boolean initialized; // has entry been initialized?
    private int branch_address;
    private int target_address;
    private int state;

    // potential states
    private static final int ST=0;  // Strongly Taken
    private static final int WT=1;  // Weakly Taken
    private static final int WN=2;  // Weakly Not-Taken
    private static final int SN=3;  // Strongly Not-Taken

    public BTB_Entry() {
        initialized = false;
        branch_address = 0;
        target_address = 0;
        state = WT;
    }

    public BTB_Entry(int br_addr, int tg_addr) {
        initialized = true;
        branch_address = br_addr;
        target_address = tg_addr;
        state = WT;
    }

    public BTB_Entry(BTB_Entry temp_entry) {
        initialized = temp_entry.getInitialized();
        branch_address = temp_entry.getBranchAddress();
        target_address = temp_entry.getTargetAddress();
        state = temp_entry.getState();
    }


    public void setValues(int br_addr, int tg_addr) {
        initialized = true;
        branch_address = br_addr;
        target_address = tg_addr;
        state = WT;
    }

    public int getBranchAddress() {
        return branch_address;
    }

    public int getTargetAddress() {
        return target_address;
    }

    public int getState() {
        return state;
    }

    public boolean getInitialized() {
        return initialized;
    }

    public boolean sameAddress(int br_addr) {
        return (br_addr == branch_address);
    }

    // do the prediction based on the state of the predictor
    public boolean getPrediction() {
        if (state==ST || state==WT) {
            return true;
        }
        else if (state==SN || state==WN) {
            return false;
        }
        else {
            blackbox(SystemCSim)%%
                cout << "Invalid BTB state, exiting\n";
            exit(-1);
            %%;
            return false;
        }
    }

    // update the state of the entry depending on the result
    public void updateState(boolean br_result) {
        if (br_result) {
            // update based on branch-taken
            if (state==ST || state==WT) {
                state = ST;
            }
            else if (state == SN) {
                state = WN;
            }
            else if (state == WN) {
                state = WT;
            }
            else {
                blackbox(SystemCSim)%%
                    cout << "Invalid BTB state, exiting\n";
                exit(-1);
                %%;
            }
        } else {
            // update based on branch-not-taken
            if (state==SN || state==WN) {
                state = SN;
            }
            else if (state==ST) {
                state = WT;
            }
            else if (state==WT) {
                state = WN;
            }
            else {
                blackbox(SystemCSim)%%
                    cout << "Invalid BTB state, exiting\n";
                exit(-1);
                %%;
            }
        }
    }


    public Object clone() {
        BTB_Entry entry = new BTB_Entry(this);
        return (Object)entry;
    }
}
