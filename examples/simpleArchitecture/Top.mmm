/*

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package simpleArchitecture;

/////////////////////////////////////////////////////////////////////
//        Design Example of Metropolis
//        PiP Architecture
//
//        Author: Alessandro Pinto
//                                        Yoshi Watanabe
//                                        Haibo Zeng
/////////////////////////////////////////////////////////////////////

public netlist TopNet {

    ///////////////////////////////////////////////////////////////////
    ////                         public variables                  ////

    ///////////////////////////////////////////////////////////////////
    ////                         protected variables               ////


    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    final static int SCHEDULING_ALGORITHM_FIFO                 = 0;
    final static int SCHEDULING_ALGORITHM_ROUND_ROBIN         = 1;
    final static int SCHEDULING_ALGORITHM_PRIORITY_BASED         = 2;
    final static int SCHEDULING_ALGORITHM_TIME_SLICE_BASED         = 3;

    final static int SERVICE_ID_REQUEST                         = 0;
    final static int SERVICE_ID_READ_INIT                        = 1;
    final static int SERVICE_ID_READ                         = 2;
    final static int SERVICE_ID_READ_PROTECTED_INIT                = 3;
    final static int SERVICE_ID_READ_PROTECTED                 = 4;
    final static int SERVICE_ID_WRITE_INIT                        = 5;
    final static int SERVICE_ID_WRITE                         = 6;
    final static int SERVICE_ID_WRITE_PROTECTED_INIT        = 7;
    final static int SERVICE_ID_WRITE_PROTECTED                = 8;
    final static int SERVICE_ID_RELEASE                         = 9;
    final static int SERVICE_ID_CONTEXT_SWITCH                = 10;
    final static int NUMBER_OF_SERVICES                         = 11;

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    // Constructor
    public TopNet(String n) {
        super(n);

        int i, j;

        int num_tasks   = 4;
        int num_cpus         = 2;
        int num_buses        = 1;
        int num_mems         = 1;

        // Architecture component specifications
        double[] cpu_clock = new double[num_cpus];
        int[] cpu_sched_alg = new int[num_cpus];
        double[] time_slice = new double[num_cpus];
        int[][] cpu_service_cycle = new int[num_cpus][NUMBER_OF_SERVICES];
        for (i=0; i<num_cpus; i++) {
            cpu_sched_alg[i] = SCHEDULING_ALGORITHM_FIFO;
            time_slice[i] = 20;
            cpu_service_cycle[i][SERVICE_ID_REQUEST]                 = 1;
            cpu_service_cycle[i][SERVICE_ID_READ_INIT]                = 0;
            cpu_service_cycle[i][SERVICE_ID_READ]                         = 7;
            cpu_service_cycle[i][SERVICE_ID_READ_PROTECTED_INIT]         = 0;
            cpu_service_cycle[i][SERVICE_ID_READ_PROTECTED]         = 7;
            cpu_service_cycle[i][SERVICE_ID_WRITE_INIT]                = 0;
            cpu_service_cycle[i][SERVICE_ID_WRITE]                         = 1;
            cpu_service_cycle[i][SERVICE_ID_WRITE_PROTECTED_INIT]         = 0;
            cpu_service_cycle[i][SERVICE_ID_WRITE_PROTECTED]         = 1;
            cpu_service_cycle[i][SERVICE_ID_RELEASE]                 = 0;
            cpu_service_cycle[i][SERVICE_ID_CONTEXT_SWITCH]         = 0;
        }
        cpu_clock[0] = 0.000000005; // 1/200M
        cpu_clock[1] = 0.000000005; // 1/200M

        double[] bus_clock = new double[num_buses];
        int[] bus_sched_alg = new int[num_buses];
        int[][] bus_service_cycle = new int[num_buses][NUMBER_OF_SERVICES];
        for (i=0; i<num_buses; i++) {
            bus_clock[i] = 0.000000005; // 1/200M
            bus_sched_alg[i] = SCHEDULING_ALGORITHM_FIFO;
            bus_service_cycle[i][SERVICE_ID_REQUEST]                 = 0;
            bus_service_cycle[i][SERVICE_ID_READ_INIT]                = 4;
            bus_service_cycle[i][SERVICE_ID_READ]                         = 1;
            bus_service_cycle[i][SERVICE_ID_READ_PROTECTED_INIT]         = 4;
            bus_service_cycle[i][SERVICE_ID_READ_PROTECTED]         = 1;
            bus_service_cycle[i][SERVICE_ID_WRITE_INIT]                = 4;
            bus_service_cycle[i][SERVICE_ID_WRITE]                         = 1;
            bus_service_cycle[i][SERVICE_ID_WRITE_PROTECTED_INIT]         = 4;
            bus_service_cycle[i][SERVICE_ID_WRITE_PROTECTED]         = 1;
            bus_service_cycle[i][SERVICE_ID_RELEASE]                 = 0;
            bus_service_cycle[i][SERVICE_ID_CONTEXT_SWITCH]         = 0;
        }

        double[] mem_clock = new double[num_mems];
        int[] mem_space = new int[num_mems];
        int[] mem_sched_alg = new int[num_mems];
        int[][] mem_service_cycle = new int[num_mems][NUMBER_OF_SERVICES];
        for (i=0; i<num_mems; i++) {
            mem_clock[i] = 0.000000005; // 1/200M;
            mem_space[i] = 1000;
            mem_sched_alg[i] = SCHEDULING_ALGORITHM_FIFO;
            mem_service_cycle[i][SERVICE_ID_REQUEST]                 = 0;
            mem_service_cycle[i][SERVICE_ID_READ_INIT]                = 0;
            mem_service_cycle[i][SERVICE_ID_READ]                         = 1;
            mem_service_cycle[i][SERVICE_ID_READ_PROTECTED_INIT]         = 0;
            mem_service_cycle[i][SERVICE_ID_READ_PROTECTED]         = 1;
            mem_service_cycle[i][SERVICE_ID_WRITE_INIT]                = 0;
            mem_service_cycle[i][SERVICE_ID_WRITE]                         = 1;
            mem_service_cycle[i][SERVICE_ID_WRITE_PROTECTED_INIT]         = 0;
            mem_service_cycle[i][SERVICE_ID_WRITE_PROTECTED]         = 1;
            mem_service_cycle[i][SERVICE_ID_RELEASE]                 = 0;
            mem_service_cycle[i][SERVICE_ID_CONTEXT_SWITCH]         = 0;
        }

        // Connections
        int[][] task_to_cpu = new int[num_tasks][num_cpus];

        task_to_cpu[0][0] = 0;
        task_to_cpu[0][1] = -1;
        task_to_cpu[1][0] = 0;
        task_to_cpu[1][1] = -1;
        task_to_cpu[2][0] = 1;
        task_to_cpu[2][1] = -1;
        task_to_cpu[3][0] = 1;
        task_to_cpu[3][1] = -1;

        int[][] cpu_to_bus  = new int[num_cpus][num_buses];

        cpu_to_bus[0][0] = 0;
        cpu_to_bus[1][0] = 0;

        int[][] bus_to_mem  = new int[num_buses][num_mems];
        bus_to_mem[0][0] = 0;


        Architecture arch = new Architecture("PiPArchitecture", num_tasks,
                num_cpus, num_buses, num_mems,
                cpu_clock, cpu_sched_alg,
                time_slice, cpu_service_cycle,
                bus_clock, bus_sched_alg,
                bus_service_cycle, mem_clock,
                mem_space, mem_sched_alg,
                mem_service_cycle, task_to_cpu,
                cpu_to_bus, bus_to_mem, null);
        addcomponent(arch, this, "ArchitectureInst");

    }

    ///////////////////////////////////////////////////////////////////
    ////                         protected methods                 ////

    ///////////////////////////////////////////////////////////////////
    ////                         private methods                  ////

}
