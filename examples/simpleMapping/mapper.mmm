/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package simpleMapping;

import metamodel.plt.yapitemplate.*;
import metamodel.plt.TTLtemplate.*;
import metamodel.plt.storage.*;
//import metamodel.plt.sharedMem.*;

public netlist mapper
{
    public mapper(String n)
    {
        func my_func = new func("my_func");
        addcomponent(my_func, this, "my_func");
        SimpleProcess [] procs = my_func.getProcs();

        int tasks_to_map = procs.length;

        arch my_arch = new arch("my_arch", tasks_to_map);
        addcomponent(my_arch, this, "my_arch");
        Task [] tasks = my_arch.getTasks();

        // one to one mapping between processes and tasks
        for (int i = 0; i < tasks_to_map; i++)
            {
                SimpleProcess this_proc = procs[i]; // collect functional processes
                Task this_task = tasks[i]; // collect architectural tasks
                LinkedList gs_list = new LinkedList(); // list to store storage elements

                //int out_ports = getportnum(this_proc, yapioutinterface);
                //int in_ports = getportnum(this_proc, yapiininterface);

                int out_ports = this_proc.numOut();
                int in_ports = this_proc.numIn();

                for (int j = 0; j < out_ports; j++)
                    {
                        medium m = getconnectiondest(this_proc, getnthport(this_proc, yapioutinterface-<yapiint>-, j));

                        if (getnthport(m, boundedfifooutinterface-<yapiint>-, 0) != null) // this is TTL
                            {
                                boundedfifo-<yapiint>- bf = getconnectiondest(m, getnthport(m, boundedfifooutinterface-<yapiint>-, 0));
                                gs_list.addLast((genericStorage-<yapiint>-)getconnectiondest(bf, getnthport(bf, storageinterface-<yapiint>-, 0)));

                            }
                        //                                else if (getnthport(m, sbfinterface-<yapiint>-, 0) != null) // this is shared mem
                        //                                {
                        //                                        sharedboundedfifo-<yapiint>- sbf = getconnectiondest(m, getnthport(m, sbfinterface-<yapiint>-, 0));
                        //                                        gs_list.addLast((genericStorage-<yapiint>-)getconnectiondest(sbf, getnthport(sbf, storageinterface-<yapiint>-, 0)));
                        //                                        gs_list.addLast((genericStorage-<yapiint>-)getconnectiondest(sbf, getnthport(sbf, storageinterface-<yapiint>-, 1)));
                        //                                        gs_list.addLast((genericStorage-<yapiint>-)getconnectiondest(sbf, getnthport(sbf, storageinterface-<yapiint>-, 2)));
                        //                                }
                        else
                            {
                                // FIXME: Can't have trailing semicolon
                                // after %% here, or we get:
                                // unreachable statement

                                blackbox(elaborator) %%
                                    throw new RuntimeException("Bad output port for i = " + i);
                                %%//;
                                    }

                    }

                for (int j = 0; j < in_ports; j++)
                    {
                        medium m = getconnectiondest(this_proc, getnthport(this_proc, yapiininterface-<yapiint>-, j));

                        if (getnthport(m, boundedfifoininterface-<yapiint>-, 0) != null) // this is TTL
                            {
                                boundedfifo-<yapiint>- bf = getconnectiondest(m, getnthport(m, boundedfifoininterface-<yapiint>-, 0));
                                gs_list.addLast((genericStorage-<yapiint>-)getconnectiondest(bf, getnthport(bf, storageinterface-<yapiint>-, 0)));
                            }
                        //                                else if (getnthport(m, sbfinterface-<yapiint>-, 0) != null) // this is shared mem
                        //                                {
                        //                                        sharedboundedfifo-<yapiint>- sbf = getconnectiondest(m, getnthport(m, sbfinterface-<yapiint>-, 0));
                        //                                        gs_list.addLast((genericStorage-<yapiint>-)getconnectiondest(sbf, getnthport(sbf, storageinterface-<yapiint>-, 0)));
                        //                                        gs_list.addLast((genericStorage-<yapiint>-)getconnectiondest(sbf, getnthport(sbf, storageinterface-<yapiint>-, 1)));
                        //                                        gs_list.addLast((genericStorage-<yapiint>-)getconnectiondest(sbf, getnthport(sbf, storageinterface-<yapiint>-, 2)));
                        //                                }
                        else
                            {
                                // FIXME: Can't have trailing semicolon
                                // after %% here, or we get:
                                // "unreachable statement"

                                blackbox(elaborator) %%
                                    throw new RuntimeException("Bad input port");
                                %%//;
                                    }

                    }

                if (gs_list.size() == 0)
                    {
                        continue;
                    }
                // at this point, gs_list contains all of the genericStorage instances
                // that this_proc has access to. Now we can emit constraints that
                // map all instances of read and write carried out this_proc to the
                // services provided by this_task

                event e_task_read_begin = beg(this_task, this_task.read);
                event e_task_read_end = end(this_task, this_task.read);
                event e_task_write_begin = beg(this_task, this_task.write);
                event e_task_write_end = end(this_task, this_task.write);

                int max_num = 20;

                event [] read_begin_array = new event[max_num];
                event [] read_end_array = new event[max_num];
                event [] write_begin_array = new event[max_num];
                event [] write_end_array = new event[max_num];

                for (int j = 0; j < gs_list.size(); j++) // go through all storage elements
                    {
                        genericStorage-<yapiint>- gs = gs_list.get(j);

                        event e_gs_read_begin = beg(this_proc, gs.read);
                        read_begin_array[j] = e_gs_read_begin;

                        event e_gs_read_end = end(this_proc, gs.read);
                        read_end_array[j] = e_gs_read_end;

                        event e_gs_write_begin = beg(this_proc, gs.write);
                        write_begin_array[j] = e_gs_write_begin;

                        event e_gs_write_end = end(this_proc, gs.write);
                        write_end_array[j] = e_gs_write_end;

                        constraint
                            {
                                ltl synch(e_gs_read_begin => e_task_read_begin:
                                        _baseAddr@(e_task_read_begin, i) == 0@(e_gs_read_begin, i),
                                        _offset@(e_task_read_begin, i) == offset@(e_gs_read_begin, i),
                                        _numObj@(e_task_read_begin, i) == items@(e_gs_read_begin, i),
                                        _sizeObj@(e_task_read_begin, i) == 1@(e_gs_read_begin, i));

                                ltl synch(e_gs_read_end => e_task_read_end);

                                ltl synch(e_gs_write_begin => e_task_write_begin:
                                        _baseAddr@(e_task_write_begin, i) == 0@(e_gs_write_begin, i),
                                        _offset@(e_task_write_begin, i) == offset@(e_gs_write_begin, i),
                                        _numObj@(e_task_write_begin, i) == items@(e_gs_write_begin, i),
                                        _sizeObj@(e_task_write_begin, i) == 1@(e_gs_write_begin, i));

                                ltl synch(e_gs_write_end => e_task_write_end);
                            }
                    }

                // duplicate the events
                for (int j = gs_list.size(); j < max_num; j++)
                    {
                        read_begin_array[j] = read_begin_array[gs_list.size() - 1];
                        read_end_array[j] = read_end_array[gs_list.size() - 1];
                        write_begin_array[j] = write_begin_array[gs_list.size() - 1];
                        write_end_array[j] = write_end_array[gs_list.size() - 1];
                    }
                constraint
                    {
                        ltl synch(e_task_read_begin =>
                                read_begin_array[0] ||
                                read_begin_array[1] ||
                                read_begin_array[2] ||
                                read_begin_array[3] ||
                                read_begin_array[4] ||
                                read_begin_array[5] ||
                                read_begin_array[6] ||
                                read_begin_array[7] ||
                                read_begin_array[8] ||
                                read_begin_array[9] ||
                                read_begin_array[10] ||
                                read_begin_array[11] ||
                                read_begin_array[12] ||
                                read_begin_array[13] ||
                                read_begin_array[14] ||
                                read_begin_array[15] ||
                                read_begin_array[16] ||
                                read_begin_array[16] ||
                                read_begin_array[17] ||
                                read_begin_array[18] ||
                                read_begin_array[19]
                                  );

                        ltl synch(e_task_read_end =>
                                read_end_array[0] ||
                                read_end_array[1] ||
                                read_end_array[2] ||
                                read_end_array[3] ||
                                read_end_array[4] ||
                                read_end_array[5] ||
                                read_end_array[6] ||
                                read_end_array[7] ||
                                read_end_array[8] ||
                                read_end_array[9] ||
                                read_end_array[10] ||
                                read_end_array[11] ||
                                read_end_array[12] ||
                                read_end_array[13] ||
                                read_end_array[14] ||
                                read_end_array[15] ||
                                read_end_array[16] ||
                                read_end_array[16] ||
                                read_end_array[17] ||
                                read_end_array[18] ||
                                read_end_array[19]
                                  );

                        ltl synch(e_task_write_begin =>
                                write_begin_array[0] ||
                                write_begin_array[1] ||
                                write_begin_array[2] ||
                                write_begin_array[3] ||
                                write_begin_array[4] ||
                                write_begin_array[5] ||
                                write_begin_array[6] ||
                                write_begin_array[7] ||
                                write_begin_array[8] ||
                                write_begin_array[9] ||
                                write_begin_array[10] ||
                                write_begin_array[11] ||
                                write_begin_array[12] ||
                                write_begin_array[13] ||
                                write_begin_array[14] ||
                                write_begin_array[15] ||
                                write_begin_array[16] ||
                                write_begin_array[16] ||
                                write_begin_array[17] ||
                                write_begin_array[18] ||
                                write_begin_array[19]
                                  );

                        ltl synch(e_task_write_end =>
                                write_end_array[0] ||
                                write_end_array[1] ||
                                write_end_array[2] ||
                                write_end_array[3] ||
                                write_end_array[4] ||
                                write_end_array[5] ||
                                write_end_array[6] ||
                                write_end_array[7] ||
                                write_end_array[8] ||
                                write_end_array[9] ||
                                write_end_array[10] ||
                                write_end_array[11] ||
                                write_end_array[12] ||
                                write_end_array[13] ||
                                write_end_array[14] ||
                                write_end_array[15] ||
                                write_end_array[16] ||
                                write_end_array[16] ||
                                write_end_array[17] ||
                                write_end_array[18] ||
                                write_end_array[19]
                                  );
                    }
            }
    }
}
