/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package dining_phil_live;


medium Chopstick implements ChopstickInterface, ChopstickCheckInterface, ChopstickUseInterface {

    // put variables here
    static final int NOTINUSE = 0;
    static final int INUSE = 1;

    parameter int ID;                //process id
    parameter String NAME;        //process name
    int usage;        //if object's in use

    port SchedReq _portSM;
    SchedReqClass src;

    // medium constructor
    public Chopstick(String name, int id) {
        NAME = name;        //medium name
        ID = id;        //medium id
        usage = NOTINUSE;
        src = new SchedReqClass();
    }

    // put medium interface functions here
    public eval int isInUse() {        //checks usage, returns 0 or 1
        await (true;
                this.ChopstickCheckInterface;
                this.ChopstickCheckInterface)
            return usage;
    }

    public update void cpUp() {        //sets chopstick usage to in use
        up{@{
            await (usage==NOTINUSE;
                    this.ChopstickUseInterface,this.ChopstickCheckInterface;
                    this.ChopstickUseInterface,this.ChopstickCheckInterface)
                usage = INUSE;

            blackbox(SystemCSim) %%
                cout << caller->name()<< ": got Chopstick" << ID << endl;
            %%;

        }

        {$
             beg{
            src.setSchedReqClass(beg(getthread(), this.up), false);
            _portSM.request(beg(getthread(), this.up), src);

            blackbox(SystemCSim)%%
                cout<<caller->name()<<" try to use the Chopstick"<<ID<<endl;
            %%;
        }

        end{ }
        $}@};
    }

    public update void cpDown() {//sets chopstick usage to not in use
        down{@{
            await (usage==INUSE;
                    this.ChopstickUseInterface,this.ChopstickCheckInterface;
                    this.ChopstickUseInterface,this.ChopstickCheckInterface)
                usage = NOTINUSE;

            blackbox(SystemCSim) %%
                cout << caller->name()<< "released Chopstick " << ID << endl;
            %%;
        }

        {$
             beg{
            src.setSchedReqClass(beg(getthread(), this.down), true);
            _portSM.request(beg(getthread(), this.down), src);

            blackbox(SystemCSim)%%
                cout<<caller->name()<<" try to release the Chopstick"<<ID<<endl;
            %%;
        }


        end{ }
        $}@};
    }
}
