/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package dining_phil_live;

public quantity DeadlockResolver implements QuantityManager {

    port StateMediumSched[] _portSM;
    private ArrayList _pendingList, _selectedList;
    int[] status;
    process[] owners;
    int num_sms, total_num;

    int num_deadlock;

    // Constructor
    public DeadlockResolver(String inst_name, int _total_num) {
        super(inst_name);

        total_num = _total_num;
        num_sms = total_num + total_num;

        _portSM= new StateMediumSched[num_sms];

        status = new int[total_num];
        owners = new process[total_num];

        for (int i=0; i<total_num; i++) {
            status[i] = 0;
            owners[i] = null;
        }

        _pendingList        = new ArrayList();
        _selectedList        = new ArrayList();
        _pendingList.clear();
        _selectedList.clear();

        num_deadlock = 0;
    }


    public eval void request(event e, RequestClass rc) {
        SchedReqClass src = (SchedReqClass)rc;
        _pendingList.add((Object)src.clone());

        blackbox(SystemCSim)%%
            //                        cout << "Process:- " << caller->name() << " Address :- " << caller << " Event:- " << e<<endl;
            %%;
    }

    public update void resolve() {
        int i, j, num_owners, smid;

        SchedReqClass pending_csr;
        event pending_event;

        num_owners = 0;
        for (i=0; i<total_num; i++) {
            if (status[i] == 1) {
                num_owners ++;
            }
        }

        for (i=0; i<_pendingList.size(); i++) {
            pending_csr          = (SchedReqClass)_pendingList.get(i);
            pending_event = pending_csr.getReqEvent();

            smid = _smID(pending_event);

            if (smid == -1) {
                continue;
            }

            if (pending_csr.isRelease()) {

                status[smid] = 0;
                owners[smid] = null;
                _selectedList.add((Object)pending_csr.clone());
                num_owners --;
            } else {
                if (num_owners < total_num-1) {
                    status[smid] = 1;
                    owners[smid] = getprocess(pending_event);
                    _selectedList.add((Object)pending_csr.clone());
                    num_owners ++;
                } else {
                    if (_isOwner(getprocess(pending_event))) {
                        status[smid] = 1;
                        owners[smid] = getprocess(pending_event);
                        _selectedList.add((Object)pending_csr.clone());
                        num_owners ++;
                    }
                    else {
                        num_deadlock ++;
                        process tmp = getprocess(pending_event);
                        blackbox(SystemCSim)%%
                            //                                                        cout << "Prevented the "<<num_deadlock<<"-th deadlock, all philosophers but " <<tmp->name()<<" should hold one chopstick now"<<endl;
                            %%;
                    }
                }
            }
        }
    }

    public update void postcond() {
        int i, smid;
        SchedReqClass pending_csr;
        event pending_event;

        for (i=0; i<_pendingList.size(); i++) {
            pending_csr          = (SchedReqClass)_pendingList.get(i);
            pending_event = pending_csr.getReqEvent();

            smid = _smID(pending_event);
            if (smid == -1) {
                continue;
            }

            if (!_isSelected(pending_event)) {
                _portSM[smid].setMustNotDo(pending_event);
            }
        }

        // need to free each request class instance in pending for simulation
        _pendingList.clear();
        _selectedList.clear();
    }

    public eval boolean stable() {
        return true;
    }

    static int A(event e, int i){return 0;}

    private boolean _isSelected(event e) {
        int i;
        SchedReqClass selected_csr;
        event selected_event;

        for (i=0; i<_selectedList.size(); i++) {
            selected_csr         = (SchedReqClass)_selectedList.get(i);
            selected_event = selected_csr.getReqEvent();

            if (e==selected_event) return true;
        }

        return false;
    }

    private int _smID(event e) {
        int i;

        for (i=0; i<num_sms; i++) {
            if (_portSM[i].isEventEnabled(e))        return i;
        }

        return -1;
    }

    private boolean _isOwner(process p) {
        for (int i=0; i<total_num; i++) {
            if (p == owners[i]) return true;
        }

        return false;

    }

}
