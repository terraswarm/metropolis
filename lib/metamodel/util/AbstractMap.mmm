/* An abstract map providing a generic implementation for some
   operations (see java.util.AbstractMap).

   Metropolis: Design Environment for Heterogeneus Systems.

   Copyright (c) 1998-2005 The Regents of the University of California.
   All rights reserved.

   Permission is hereby granted, without written agreement and without
   license or royalty fees, to use, copy, modify, and distribute this
   software and its documentation for any purpose, provided that the
   above copyright notice and the following two paragraphs appear in all
   copies of this software and that appropriate acknowledgments are made
   to the research of the Metropolis group.

   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
   THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.

   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
   ENHANCEMENTS, OR MODIFICATIONS.

   METROPOLIS_COPYRIGHT_VERSION_1
   COPYRIGHTENDKEY

*/

package metamodel.util;


public abstract class AbstractMap implements Map
{

    protected int modCount;

    protected AbstractMap()
    {
        modCount = 1;
    }

    public abstract int size();

    protected void modified()
    {
        modCount = modCount == 9999 ? 1 : modCount + 1;
    }

    public boolean isEmpty()
    {
        return (size() == 0);
    }
    /**
     */
    public boolean containsValue(Object value)
    {
        Set set = entrySet();
        Iterator iter = set.iterator();
        if (value != null)
            {
                while (iter.hasNext())
                    {
                        Map.Entry entry = (Map.Entry)iter.next();
                        if (value.equals(entry.getValue()))
                            return true;
                    }
            }
        else
            {
                while (iter.hasNext())
                    {
                        Map.Entry entry = (Map.Entry)iter.next();
                        if (entry.getValue() == null)
                            return true;
                    }
            }
        return false;
    }

    Map.Entry findKey(Object key)
    {
        Set set = entrySet();
        Iterator iter = set.iterator();
        if (key != null)
            {
                while (iter.hasNext())
                    {
                        Map.Entry entry = (Map.Entry)iter.next();
                        if (key.equals(entry.getKey()))
                            return entry;
                    }
            }
        else
            {
                while (iter.hasNext())
                    {
                        Map.Entry entry = (Map.Entry)iter.next();
                        if (entry.getKey() == null)
                            return entry;
                    }
            }
        return null;
    }

    /**
     */
    public boolean containsKey(Object key)
    {
        return findKey(key) != null;
    }

    /**
     */
    public Object get(Object key)
    {
        Map.Entry entry = findKey(key);
        return (entry == null ? null : entry.getValue());
    }

    /**
     * Java implementation allways throws UnsupportedOperationException. Since the exception mechanizm is absent so far the method is made abstract in the metamodel.
     */
    public abstract Object put(Object key, Object value);

    /**
     */
    public Object remove(Object key)
    {
        Set set = entrySet();
        Iterator iter = set.iterator();
        if (key != null)
            {
                while (iter.hasNext())
                    {
                        Map.Entry entry = (Map.Entry)iter.next();
                        if (key.equals(entry.getKey()))
                            {
                                iter.remove();
                                return entry.getValue();
                            }
                    }
            }
        else
            {
                while (iter.hasNext())
                    {
                        Map.Entry entry = (Map.Entry)iter.next();
                        if (entry.getKey() == null)
                            {
                                iter.remove();
                                return entry.getValue();
                            }
                    }
            }
        return null;
    }

    public void putAll(Map map)
    {
        Set entrySet = map.entrySet();
        Iterator iter = entrySet.iterator();
        while (iter.hasNext())
            {
                Map.Entry entry = (Map.Entry)iter.next();
                put(entry.getKey(), entry.getValue());
            }
    }

    /**
     */
    public void clear()
    {
        entrySet().clear();
    }

    /**
     */
    public boolean equals(Object ob)
    {
        if (ob == this)
            return true;
        if (ob == null)
            return false;
        Map map = (Map)ob;
        return entrySet().equals(map.entrySet());
    }

    /**
     */
    public int hashCode()
    {
        int hashCode = 0;
        Set set = entrySet();
        Iterator iter = set.iterator();
        while (iter.hasNext())
            {
                Map.Entry entry = (Map.Entry)iter.next();
                hashCode += entry.hashCode();
            }
        return hashCode;
    }

    /**
     */
    public String toString()
    {
        /*
        // implementation using StringBuffer
        StringBuffer buf = new StringBuffer();
        Set set = entrySet();
        Iterator iter = set.iterator();
        for (int i = 0; i < size(); i ++)
        {
        if (i > 0)
        buf.append(", ");
        Map.Entry entry = (Map.Entry)iter.next();
        String sKey = entry.getKey().toString();
        String sValue = entry.getValue() == null ? "null" : entry.getValue().toString();
        buf.append(sKey + "=" + sValue);
        }
        return buf.toString();
        */
        String buf = new String();
        buf += "{";
        Set set = entrySet();
        Iterator iter = set.iterator();
        Map.Entry entry;
        String sKey;
        String sValue;
        if (set.size() > 0)
            {
                while (true)
                    {
                        entry = (Map.Entry)iter.next();
                        //buf += entry.toString();
                        if (!iter.hasNext())
                            break;
                        buf += ", ";
                    }
            }
        buf += "}";
        return buf;
    }

    /**
     * WARNING: java implementation throws CloneNotSupportedException if the method is not implemented in the derived class - we oblige the method to me implemented
     */
    public abstract Object clone();

}
