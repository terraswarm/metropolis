/* An abstract list providing a generic implementation of some basic
   operations (see java.util.AbstractList).

   Metropolis: Design Environment for Heterogeneus Systems.

   Copyright (c) 1998-2005 The Regents of the University of California.
   All rights reserved.

   Permission is hereby granted, without written agreement and without
   license or royalty fees, to use, copy, modify, and distribute this
   software and its documentation for any purpose, provided that the
   above copyright notice and the following two paragraphs appear in all
   copies of this software and that appropriate acknowledgments are made
   to the research of the Metropolis group.

   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
   THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.

   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
   ENHANCEMENTS, OR MODIFICATIONS.

   METROPOLIS_COPYRIGHT_VERSION_1
   COPYRIGHTENDKEY

*/

package metamodel.util;


public abstract class AbstractList extends AbstractCollection implements List
{
    /**
     * modifications count
     */
    protected int modCount;

    /**
     */
    protected AbstractList()
    {
        modCount = 1;
    }

    protected void modified()
    {
        modCount = modCount == 9999 ? 1 : modCount + 1;
    }

    /**
     * WARNING: must throw UnsupportedOperationException - if the add method is not supported by this Set.
     * WARNING: must throw ClassCastException - if the class of the specified element prevents it from being added to this list.
     * WARNING: must throw IllegalArgumentException - some aspect of this element prevents it from being added to this collection.
     */
    public boolean add(Object ob)
    {
        add(size(), ob);
        return true;
    }

    /**
     */
    public abstract Object get(int index);

    /**
     * Java implementation checks for cast correctness, if the object is legal and the bounds throwing the corresponding exceptions and then allways throws UnsupportedOperationException. Since the exception mechanizm is absent so far the method is made abstract in the metamodel.
     */
    public abstract Object set(int index, Object ob);

    /**
     * Java implementation checks for cast correctness, if the object is legal and the bounds throwing the corresponding exceptions and then allways throws UnsupportedOperationException. Since the exception mechanizm is absent so far the method is made abstract in the metamodel.
     */
    public abstract void add(int index, Object ob) ;

    /**
     * Java implementation checks for the bounds throwing the corresponding exception and then allways throws UnsupportedOperationException. Since the exception mechanizm is absent so far the method is made abstract in the metamodel.
     */
    public abstract Object remove(int index);

    /**
     */
    public int indexOf(Object ob)
    {
        int index = 0;
        ListIterator lIter = listIterator(index);
        if (ob != null)
            {
                while (lIter.hasNext())
                    {
                        if (ob.equals(lIter.next()))
                            return index;
                        index ++;
                    }
            }
        else
            {
                while (lIter.hasNext())
                    {
                        if (lIter.next() == null)
                            return index;
                        index ++;
                    }
            }
        return -1;
    }

    /**
     */
    public int lastIndexOf(Object ob)
    {
        int index = size();
        ListIterator lIter = listIterator(index);
        if (ob != null)
            {
                while (lIter.hasPrevious())
                    {
                        index --;
                        if (ob.equals(lIter.previous()))
                            return index;
                    }
            }
        else
            {
                while (lIter.hasPrevious())
                    {
                        index --;
                        if (lIter.previous() == null)
                            return index;
                    }
            }
        return -1;
    }

    /**
     */
    public void clear()
    {
        removeRange(0, size());
    }

    /**
     * Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.
     * WARNING: must throw UnsupportedOperationException - if the addAll method is not supported by this list.
     * WARNING: must throw ClassCastException - if the class of an element of the specified collection prevents it from being added to this List.
     * WARNING: must throw IllegalArgumentException - some aspect an element of the specified collection prevents it from being added to this List.
     * WARNING: must throw IndexOutOfBoundsException - index out of range (index < 0 || index > size()).
     * WARNING: must throw NullPointerException - if the specified collection is null.
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is out of range (index < 0 || index > size()).
     */
    public boolean addAll(int index, Collection col)
    {
        if (index < 0 || index > size())
            return false; // must throw IndexOutOfBoundsException here
        int n = size();
        Iterator colIter = col.iterator();
        while (colIter.hasNext())
            {
                add(colIter.next());
            };
        return (n != size());
    }

    /**
     */
    public ListIterator listIterator()
    {
        return new AbstractList.ListItr(this);
    }

    /**
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is out of range (index < 0 || index > size()).
     */
    public ListIterator listIterator(int index)
    {
        return new AbstractList.ListItr(this, index);
    }

    /**
     * WARNING: must throw IndexOutOfBoundsException - endpoint index value out of range (fromIndex < 0 || toIndex > size)
     * WARNING: must throw IllegalArgumentException - endpoint indices out of order (fromIndex > toIndex)the out of bounds exception if ((fromIndex < 0) || (toIndex > size()) || (fromIndex > toIndex)) - returning null in the case
     */
    public List subList(int fromIndex, int toIndex)
    {
        if ((fromIndex < 0) || (toIndex > size()) || (fromIndex > toIndex))
            return null;
        return new AbstractList.SubList(this, fromIndex, toIndex);
    }

    /**
     */
    public boolean equals(Object ob)
    {
        if (ob == this)
            return true;
        if (ob == null)
            return false;
        List list = (List)ob;
        if (list.size() != size())
            return false;
        ListIterator lIter = listIterator();
        ListIterator listIter = list.listIterator();
        while (lIter.hasNext())
            {
                if (lIter.next() != listIter.next())
                    return false;
            }
        return true;
    }

    /**
     */
    public int hashCode()
    {
        int hashCode = 1;
        Iterator i = iterator();
        while (i.hasNext())
            {
                Object obj = i.next();
                hashCode = 31*hashCode + (obj==null ? 0 : obj.hashCode());
            }
        return hashCode;
    }

    /**
     */
    protected void removeRange(int indexFrom, int indexTo)
    {
        int index = indexFrom;
        if (indexFrom >= size())
            return;
        ListIterator lIter = listIterator(index);
        for (; (index < indexTo) && (size() > 0); index ++)
            {
                lIter.next();
                lIter.remove();
            }
    }

    /**
     */
    public Iterator iterator()
    {
        return new AbstractList.Itr(this);
    }

    class SubList extends AbstractList implements List
    {
        AbstractList m_list;
        int m_start;
        int m_end;

        SubList(AbstractList list, int from, int to)
        {
            m_list = list;
            m_start = from;
            m_end = to;
        }

        public int size()
        {
            return m_end - m_start;
        }

        public boolean isEmpty()
        {
            return size() == 0;
        }

        public boolean contains(Object ob)
        {
            return (indexOf(ob) >= 0);
        }

        public Iterator iterator()
        {
            return new AbstractList.ListItr(this);
        }

        public Object[] toArray()
        {
            Object array[] = new Object[size()];
            for (int i = m_start; i < m_end; i ++)
                array[i-m_start] = m_list.get(i);
            return array;
        }

        public Object[] toArray(Object[] array)
        {
            if (array.length < size())
                //in Java the array is allocated of the runtime of the array specified
                //array = array.getClass().newInstance();
                array = new Object[size()];
            else
                if (array.length > size())
                    array[size()] = null;
            for (int i = m_start; i < m_end; i ++)
                array[i-m_start] = m_list.get(i);
            return array;
        }

        /**
         * WARNING: must throw UnsupportedOperationException - if the add method is not supported by this Set.
         * WARNING: must throw ClassCastException - if the class of the specified element prevents it from being added to this list.
         * WARNING: must throw IllegalArgumentException - some aspect of this element prevents it from being added to this collection.
         */
        public boolean add(Object ob)
        {
            m_list.add(m_end, ob);
            m_end ++;
            return true;
        }

        /**
         * WARNING: must throw IndexOutOfBoundsException - index out of range (index < 0 || index > size()).
         * WARNING: must throw UnsupportedOperationException - if the add method is not supported by this list.
         * WARNING: must throw ClassCastException - if the class of the specified element prevents it from being added to this list.
         * WARNING: must throw IllegalArgumentException - if some aspect of the specified element prevents it from being added to this list.
         */
        public void add(int index, Object ob)
        {
            if (index < 0 || index > size())
                return; // must throw IndexOutOfBoundsException here
            m_list.add(m_start+index, ob);
            m_end ++;
        }

        /**
         * WARNING: must throw NullPointerException - if the specified collection is null.
         */
        public boolean addAll(Collection col)
        {
            if (col == null)
                return false; // must throw NullPointerException here
            m_list.addAll(m_end, col);
            m_end += col.size();
            return (col.size() != 0);
        }

        /**
         * WARNING: must throw NullPointerException - if the specified collection is null.
         * WARNING: must throw ArrayIndexOutOfBoundsException - index is out of range (index < 0 || index > size()).
         */
        public boolean addAll(int index, Collection col)
        {
            if (col == null)
                return false; // must throw NullPointerException here
            if (index < 0 || index > size())
                return false; // must throw ArrayIndexOutOfBoundsException here.
            m_list.addAll(index + m_start, col);
            m_end += col.size();
            return (col.size() != 0);
        }

        public boolean remove(Object ob)
        {
            int index = indexOf(ob);
            if (index < 0)
                return false;
            m_list.remove(index);
            m_end --;
            return true;
        }

        public boolean containsAll(Collection col)
        {
            Iterator iter = col.iterator();
            for (int i = 0; i < col.size(); i ++)
                //         while (iter.hasNext())
                if (!contains(iter.next()))
                    return false;
            return true;
        }

        public boolean removeAll(Collection col)
        {
            int n = size();
            Iterator iter = col.iterator();
            for (int i = 0; i < col.size(); i ++)
                remove(iter.next());
            return (n != size());
        }

        public boolean retainAll(Collection col)
        {
            int n = size();
            for (int i = m_end - 1; i >= m_start; i ++)
                if (!col.contains(m_list.get(i)))
                    remove(i);
            return (n != size());
        }

        public void clear()
        {
            m_list.removeRange(m_start, m_end);
            m_end = m_start;
        }

        public boolean equals(Object ob)
        {
            if (ob == this)
                return true;
            List list = (List)ob;
            Iterator iter = list.iterator();
            for (int i = m_start; i < m_end; i ++)
                if (m_list.get(i) == null)
                    {
                        if (iter.next() != null)
                            return false;
                    }
                else
                    {
                        if (!m_list.get(i).equals(iter.next()))
                            return false;
                    }
            return true;
        }

        public int hashCode()
        {
            int hashCode = 1;
            for (int i = m_start; i < m_end; i ++)
                hashCode = 31 * hashCode + (m_list.get(i) == null ? 0 : m_list.get(i).hashCode());
            return hashCode;
        }

        /**
         * WARNING: must throw IndexOutOfBoundsException - index out of range (index < 0 || index >= size()).
         */
        public Object get(int index)
        {
            if (index < 0 || index >= size())
                return null; // must throw IndexOutOfBoundsException here
            return m_list.get(m_start+index);
        }

        /**
         * WARNING: must throw IndexOutOfBoundsException - index out of range (index < 0 || index > size()).
         * WARNING: must throw UnsupportedOperationException - if the set method is not supported by this List.
         * WARNING: must throw ClassCastException - if the class of the specified element prevents it from being added to this list.
         * WARNING: must throw IllegalArgumentException - if some aspect of the specified element prevents it from being added to this list.
         */
        public Object set(int index, Object ob)
        {
            if (index < 0 || index >= size())
                return null; // must throw IndexOutOfBoundsException here
            return m_list.set(m_start+index, ob);
        }

        /**
         * WARNING: must throw IndexOutOfBoundsException - index out of range (index < 0 || index >= size()).
         */
        public Object remove(int index)
        {
            if (index < 0 || index >= size())
                return null; // must throw IndexOutOfBoundsException here
            m_end --;
            return m_list.remove(m_start+index);
        }

        public int indexOf(Object ob)
        {
            if (ob == null)
                {
                    for (int i = m_start; i < m_end; i ++)
                        if (m_list.get(i) == null)
                            return i - m_start;
                }
            else
                {
                    for (int i = m_start; i < m_end; i ++)
                        if (ob.equals(m_list.get(i)))
                            return i - m_start;
                }
            return -1;
        }

        public int lastIndexOf(Object ob)
        {
            if (ob == null)
                {
                    for (int i = m_end-1; i >= m_start; i --)
                        if (m_list.get(i) == null)
                            return i - m_start;
                }
            else
                {
                    for (int i = m_end-1; i >= m_start; i --)
                        if (ob.equals(m_list.get(i)))
                            return i - m_start;
                }
            return -1;
        }

        public ListIterator listIterator()
        {
            return new AbstractList.ListItr(this);
        }

        public ListIterator listIterator(int index)
        {
            return new AbstractList.ListItr(this, index);
        }

        public List subList(int fromIndex, int toIndex)
        {
            //         return new SubList(this, fromIndex, toIndex);
            return new AbstractList.SubList(m_list, m_start+fromIndex, m_start+toIndex);
        }
    }

    class Itr implements Iterator
    {
        protected int m_indexLast;
        protected int m_index;
        protected int modCount;
        protected AbstractList m_list;

        Itr(AbstractList aList)
        {
            m_list = aList;
            m_indexLast = -1;
            m_index = 0;
            this.modCount = aList.modCount;
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         */
        public boolean hasNext()
        {
            if (this.modCount != m_list.modCount)
                return false; // must throw ConcurrentModificationException here
            return ((m_index >= 0) && (m_index < m_list.size()));
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         * WARNING: must throw NoSuchElementException - iteration has no more elements.
         */
        public Object next()
        {
            if (this.modCount != m_list.modCount)
                return null; // must throw ConcurrentModificationException here
            if (hasNext() == false)
                return null; // must throw NoSuchElementException here
            m_indexLast = m_index;
            m_index ++;
            return m_list.get(m_indexLast);
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         * WARNING: must throw IllegalStateException - if the next method has not yet been called, or the remove method has already been called after the last call to the next method.
         */
        public void remove()
        {
            if (this.modCount != m_list.modCount)
                return; // must throw ConcurrentModificationException here
            if (m_indexLast < 0)
                return; // must throw IllegalStateException here
            m_list.remove(m_indexLast);
            m_indexLast = -1;
            m_index --;
            this.modCount = m_list.modCount;
        }
    }


    class ListItr extends Itr implements ListIterator
    {
        ListItr(AbstractList list)
        {
            super(list);
        }

        /**
         * WARNING: must throw IndexOutOfBoundsException - index out of range (index < 0 || index > size()).
         */
        ListItr(AbstractList list, int index)
        {
            super(list);
            if (index < 0 || index > list.size())
                return; // must throw IndexOutOfBoundsException here
            for (int i = 0; i < index; i ++)
                next();
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         */
        public boolean hasPrevious()
        {
            if (this.modCount != m_list.modCount)
                return false; // must throw ConcurrentModificationException here
            return ((m_index > 0) && (m_index <= m_list.size()));
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         * WARNING: must throw NoSuchElementException - iteration has no more elements.
         */
        public Object previous()
        {
            if (this.modCount != m_list.modCount)
                return null; // must throw ConcurrentModificationException here
            if (hasPrevious() == false)
                return null; // must throw NoSuchElementException here
            m_index --;
            m_indexLast = m_index;
            return m_list.get(m_indexLast);
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         */
        public int nextIndex()
        {
            if (this.modCount != m_list.modCount)
                return -1; // must throw ConcurrentModificationException here
            return m_index;
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         */
        public int previousIndex()
        {
            if (this.modCount != m_list.modCount)
                return -1; // must throw ConcurrentModificationException here
            return m_index-1;
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         * WARNING: must throw IllegalStateException - if the next method has not yet been called, or the remove method has already been called after the last call to the next method.
         */
        public void set(Object ob)
        {
            if (this.modCount != m_list.modCount)
                return; // must throw ConcurrentModificationException here
            if (m_indexLast < 0)
                return; // must throw IllegalStateException here
            m_list.set(m_indexLast, ob);
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         */
        public void add(Object ob)
        {
            if (this.modCount != m_list.modCount)
                return; // must throw ConcurrentModificationException here
            m_list.add(ob);
            this.modCount = m_list.modCount;
        }
    }
}
