/* A base class for all implementations of a list based on a sequential
   access (see java.util.AbstractSequentialList).

   Metropolis: Design Environment for Heterogeneus Systems.

   Copyright (c) 1998-2005 The Regents of the University of California.
   All rights reserved.

   Permission is hereby granted, without written agreement and without
   license or royalty fees, to use, copy, modify, and distribute this
   software and its documentation for any purpose, provided that the
   above copyright notice and the following two paragraphs appear in all
   copies of this software and that appropriate acknowledgments are made
   to the research of the Metropolis group.

   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
   THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.

   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
   ENHANCEMENTS, OR MODIFICATIONS.

   METROPOLIS_COPYRIGHT_VERSION_1
   COPYRIGHTENDKEY

*/

package metamodel.util;


public abstract class AbstractSequentialList extends AbstractList
{

    /**
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is is out of range (index < 0 || index >= size()).
     */
    public Object get(int index)
    {
        return listIterator(index).next();
    }

    /**
     * WARNING: must throw UnsupportedOperationException - set is not supported by this list.
     * WARNING: must throw NullPointerException - this list does not permit null elements and one of the elements of c is null.
     * WARNING: must throw ClassCastException - class of the specified element prevents it from being added to this list.
     * WARNING: must throw IllegalArgumentException - some aspect of the specified element prevents it from being added to this list.
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is is out of range (index < 0 || index >= size()).
     */
    public Object set(int index, Object ob)
    {
        ListIterator lIter = listIterator(index);
        Object tmpObj = lIter.next();
        lIter.set(ob);
        return tmpObj;
    }

    /**
     * WARNING: must throw UnsupportedOperationException - add is not supported by this list.
     * WARNING: must throw NullPointerException - this list does not permit null elements ob is null.
     * WARNING: must throw ClassCastException - class of ob prevents it from being added to this list.
     * WARNING: must throw IllegalArgumentException - some aspect of the specified element prevents it from being added to this list.
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is is out of range (index < 0 || index >= size()).
     */
    public void add(int index, Object ob)
    {
        listIterator(index).add(ob);
    }

    /**
     * WARNING: must throw UnsupportedOperationException - if the remove operation is not supported by this list.
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is out of range (index < 0 || index >= size()).
     */
    public Object remove(int index)
    {
        ListIterator lIter = listIterator(index);
        Object tmpObj = lIter.next();
        lIter.remove();
        return tmpObj;
    }

    /**
     * WARNING: must throw UnsupportedOperationException - if the addAll operation is not supported by this list.
     * WARNING: must throw NullPointerException - this list does not permit null elements and one of the elements of the specified collection is null.
     * WARNING: must throw ClassCastException - if the class of the specified element prevents it from being added to this list.
     * WARNING: must throw IllegalArgumentException - if some aspect of the specified element prevents it from being added to this list.
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is out of range (index < 0 || index > size()).
     */
    public boolean addAll(int index, Collection col)
    {
        int n = size();
        ListIterator lIter = listIterator(index);
        Iterator colIter = col.iterator();
        while (colIter.hasNext())
            {
                lIter.add(colIter.next());
                lIter.next();
            };
        return (n == size());
    }
}
