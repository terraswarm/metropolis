/* An implementation of a hashtable mapping keys to values
   (see java.util.Hashtable).

   Metropolis: Design Environment for Heterogeneus Systems.

   Copyright (c) 1998-2005 The Regents of the University of California.
   All rights reserved.

   Permission is hereby granted, without written agreement and without
   license or royalty fees, to use, copy, modify, and distribute this
   software and its documentation for any purpose, provided that the
   above copyright notice and the following two paragraphs appear in all
   copies of this software and that appropriate acknowledgments are made
   to the research of the Metropolis group.

   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
   THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.

   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
   ENHANCEMENTS, OR MODIFICATIONS.

   METROPOLIS_COPYRIGHT_VERSION_1
   COPYRIGHTENDKEY

*/

package metamodel.util;


public class Hashtable extends Dictionary implements Map
{
    private Hashtable.Entry m_table[];
    private int m_size;
    private int m_threshold;
    private float m_loadFactor;
    protected int modCount;

    /**
     * WARNING: muth throw null pointer exception if (map == null)
     */
    public Hashtable(Map map)
    {
        this((int)(map.size()/0.75)-1, (float)0.75);
        int initialCapacity = (int)(map.size()/0.75)-1; //TODO: check this (initial capacity)
        Set entrySet = map.entrySet();

        // copy the source map
        Iterator iter = entrySet.iterator();
        int i = 0;
        m_size = map.size();
        while (iter.hasNext())
            {
                Map.Entry srcEntry = (Map.Entry)iter.next();
                Object value = srcEntry.getValue();
                int hash = value.hashCode();
                int index = (hash & 0x7FFFFFFF) % m_table.length;

                // create and add the new entry.
                Hashtable.Entry newEntry = new Hashtable.Entry(srcEntry.getKey(), value, hash);
                newEntry.m_next = m_table[index];
                m_table[index] = newEntry;
                i ++;
            }
    }

    public Hashtable()
    {
        this(11, (float)0.75);
    }

    /**
     * WARNING: must throw IllegalArgumentException - if the initial capacity is less than zero.
     */
    public Hashtable(int initialCapacity)
    {
        this(initialCapacity, (float)0.75);
    }

    /**
     * WARNING: must throw IllegalArgumentException - if the initial capacity is less than zero, or if the load factor is nonpositive.
     */
    public Hashtable(int initialCapacity, float loadFactor)
    {
        m_size = 0;
        modCount = 1;
        m_table = new Hashtable.Entry[initialCapacity];
        m_loadFactor = loadFactor;
        m_threshold = (int)(initialCapacity * loadFactor);
    }

    protected void modified()
    {
        modCount = modCount == 9999 ? 1 : modCount + 1;
    }

    /**
     */
    public int size()
    {
        return m_size;
    }

    /**
     */
    public boolean isEmpty()
    {
        return (size() == 0);
    }

    /**
     */
    public Enumeration keys()
    {
        return size() == 0 ? (Enumeration)new Hashtable.EmptyEnumerator(this) : (Enumeration)new Hashtable.Enumerator(this, 2);
    }

    /**
     */
    public Enumeration elements()
    {
        return size() == 0 ? (Enumeration)new Hashtable.EmptyEnumerator(this) : (Enumeration)new Hashtable.Enumerator(this, 3);
    }

    /**
     * WARNING: muth throw null pointer exception if (value == null) since null values are not allowed in hashtable - this implementation does nothing (to ensure that null values are not inserted in the table)
     */
    public boolean contains(Object value)
    {
        return findValue(value) != null;
    }

    Map.Entry findValue(Object value)
    {
        if (value ==  null)
            return null; // muth throw NullPointerException here
        for (int i = 0; i < m_table.length; i ++)
            for (Hashtable.Entry entry = m_table[i]; entry != null; entry = entry.m_next)
                if (value.equals(entry.m_value))
                    return entry;
        return null;
    }

    /**
     * WARNING: muth throw NullPointerException - if the value is null.
     */
    public boolean containsValue(Object value)
    {
        return findValue(value) != null;
    }


    Map.Entry findKey(Object key)
    {
        if (key == null)
            return null; // muth throw NullPointerException here
        int hash = key.hashCode();
        int index = (hash & 0x7FFFFFFF) % m_table.length;
        for (Hashtable.Entry entry = m_table[index]; entry != null ; entry = entry.m_next)
            if ((entry.m_hash == hash) && entry.m_key.equals(key))
                return entry;
        return null;
    }

    /**
     * WARNING: muth throw NullPointerException - if the value is null.
     */
    public boolean containsKey(Object key)
    {
        return findKey(key) != null;
    }

    /**
     */
    public Object get(Object key)
    {
        Map.Entry e = findKey(key);
        return (e != null) ? e.getValue() : null;
    }

    /**
     */
    protected void rehash()
    {
        int oldCapacity = m_table.length;
        Hashtable.Entry oldTable[] = m_table;

        int newCapacity = oldCapacity * 2 + 1;

        m_threshold = (int)(newCapacity * m_loadFactor);
        m_table = new Hashtable.Entry[newCapacity];

        for (int i = oldCapacity - 1; i >= 0 ; i --)
            {
                for (Hashtable.Entry srcEntry = oldTable[i] ; srcEntry != null ; )
                    {
                        Hashtable.Entry entry = srcEntry;
                        srcEntry = srcEntry.m_next;

                        int index = (entry.m_hash & 0x7FFFFFFF) % newCapacity;
                        entry.m_next = m_table[index];
                        m_table[index] = entry;
                    }
            }
    }

    /**
     * WARNING: muth throw null pointer exception if (value == null) since null values are not allowed in hashtable - this implementation does nothing (to ensure that null values are not inserted in the table) returning null in the case
     */
    public Object put(Object key, Object value)
    {
        if (value == null)
            return null;

        // check if the key is already in the table
        int hash = key.hashCode();
        int index = (hash & 0x7FFFFFFF) % m_table.length;
        for (Hashtable.Entry entry = m_table[index] ; entry != null ; entry = entry.m_next)
            {
                if ((entry.m_hash == hash) && entry.m_key.equals(key))
                    {
                        Object obTmp = entry.m_value;
                        entry.m_value = value;
                        return obTmp;
                    }
            }

        if (size() >= m_threshold)
            {
                // rehash the table if the threshold is reached
                rehash();
                return put(key, value);
            }

        // create the new entry.
        Hashtable.Entry newEntry = new Hashtable.Entry(key, value, hash);
        newEntry.m_next = m_table[index];
        m_table[index] = newEntry;
        m_size ++;
        modified();
        return null;
    }

    /**
     */
    public Object remove(Object key)
    {
        if (key == null)
            return null;
        int hash = key.hashCode();
        int index = (hash & 0x7FFFFFFF) % m_table.length;
        for (Hashtable.Entry curEntry = m_table[index], prevEntry = null ; curEntry != null ; prevEntry = curEntry, curEntry = curEntry.m_next)
            {
                if ((curEntry.m_hash == hash) && curEntry.m_key.equals(key))
                    {
                        if (prevEntry != null)
                            prevEntry.m_next = curEntry.m_next;
                        else
                            m_table[index] = curEntry.m_next;
                        modified();
                        m_size --;
                        return curEntry.m_value;
                    }
            }
        return null;
    }

    /**
     * WARNING: must throw null pointer exception if (map == null)
     */
    public void putAll(Map map)
    {
        Set entrySet = map.entrySet();
        // copy the source map
        Iterator iter = entrySet.iterator();
        while (iter.hasNext())
            {
                Map.Entry entry = (Map.Entry)iter.next();
                put(entry.getKey(), entry.getValue());
            }
    }

    /**
     */
    public void clear()
    {
        for (int i = m_table.length - 1; i >= 0; i --)
            m_table[i] = null;
        modified();
        m_size = 0;
    }

    /**
     */
    public Object clone()
    {
        Hashtable newTable = new Hashtable(0, m_loadFactor);
        newTable.m_table = new Hashtable.Entry[m_table.length];
        newTable.m_threshold = (int)(m_table.length * m_loadFactor);
        newTable.m_size = m_size;
        for (int i = newTable.m_table.length - 1; i >= 0 ; i--)
            {
                Hashtable.Entry e = m_table[i];
                if (e != null)
                    {
                        Hashtable.Entry eNew = (Hashtable.Entry)e.clone();
                        newTable.m_table[i] = eNew;
                        while (e.m_next != null)
                            {
                                e = e.m_next;
                                eNew.m_next = (Hashtable.Entry)e.clone();
                                eNew = eNew.m_next;
                            }
                    }
                else
                    newTable.m_table[i] = null;
            }
        return newTable;
    }

    /**
     */
    public String toString()
    {
        /*
        // implementation using StringBuffer
        StringBuffer buf = new StringBuffer();
        Enumeration elts = elements();
        for (int i = 0; i < size(); i ++)
        {
        if (i > 0)
        buf.append(", ");
        Hashtable.Entry entry = (Hashtable.Entry)elts.nextElement();
        String sKey = entry.getKey().toString();
        String sValue = entry.getValue().toString();
        buf.append(sKey + "=" + sValue);
        }
        return buf.toString();
        */
        String buf = new String();
        buf += "{";
        Set set = entrySet();
        Iterator iter = set.iterator();
        if (set.size() > 0)
            {
                while (true)
                    {
                        Map.Entry entry = (Map.Entry)iter.next();
                        //buf += entry.toString();
                        if (!iter.hasNext())
                            break;
                        buf += ", ";
                    }
            }
        buf += "}";
        return buf;
    }

    /**
     */
    public Set keySet()
    {
        return new HashtableSet(this, 2);
    }

    /**
     */
    public Set entrySet()
    {
        return new HashtableSet(this, 1);
    }

    /**
     */
    public Collection values()
    {
        return new HashtableSet(this, 3);
    }

    /**
     */
    public boolean equals(Object ob)
    {
        //TODO: implementatiomn can be more efficient
        if (ob == this)
            return true;
        if (ob == null)
            return false;
        Map map = (Map)ob;
        return entrySet().equals(map.entrySet());
    }

    /**
     */
    public int hashCode()
    {
        int hashCode = 0;
        Enumeration enum = elements();
        while (enum.hasMoreElements())
            {
                Object obj = enum.nextElement();
                hashCode = hashCode + (obj == null ? 0 : obj.hashCode());
            }
        return hashCode;
    }

    abstract class AbstractEnumerator implements Enumeration, Iterator
    {
        /* private */ int expectedModCount;
        int m_type;                     /** enumeration type */
        Hashtable m_hashtable;          /** used only to update the m_size field during remove */
    }

    class EmptyEnumerator extends AbstractEnumerator implements Enumeration, Iterator
    {

        EmptyEnumerator(Hashtable hashtable)
        {
            m_hashtable = hashtable;
            expectedModCount = m_hashtable.modCount;
        }

        /**
         */
        public boolean hasMoreElements()
        {
            return false;
        }

        public boolean hasNext()
        {
            if (hasMoreElements() == false)
                return false; // must throw NoSuchElementException here
            return false;
        }

        /**
         * WARNING: must throw "no more" exception
         */
        public Object nextElement()
        {
            return null;
        }

        /**
         * WARNING: exception no more if (hasMoreElements() == false)
         * WARNING: must throw NoSuchElementException - iteration has no more elements.
         */
        public Object next()
        {
            if (hasMoreElements() == false)
                return null; // must throw NoSuchElementException here
            return null; // must throw NoSuchElementException here
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         * WARNING: must throw IllegalStateException - if the next method has not yet been called, or the remove method has already been called after the last call to the next method.
         */
        public void remove()
        {
            if (hasMoreElements() == false)
                return; // must throw NoSuchElementException here
            // must throw IllegalStateException here
        }
    }

    class Entry implements Map.Entry
    {
        int m_hash;
        Object m_key;
        Object m_value;
        Hashtable.Entry m_next;

        /**
         */
        Entry(Object key, Object value, int hash)
        {
            m_key = key;
            m_value = value;
            m_next = null;
            m_hash = hash;
        }

        /**
         */
        protected Entry(Object key, Object value)
        {
            m_key = key;
            m_value = value;
            m_next = null;
            m_hash = value.hashCode();
        }

        /**
         * Declared protected in Java but made public since the parent class
         * (metamodel.lang.Object) declared as public
         */
        public Object clone()
        {
            return new Hashtable.Entry(m_key, m_value, m_hash);
        }

        /**
         */
        public Object getKey()
        {
            return m_key;
        }

        /**
         */
        public Object getValue()
        {
            return m_value;
        }

        /**
         */
        public Object setValue(Object ob)
        {
            Object obTmp = m_value;
            m_value = ob;
            return obTmp;
        }

        /**
         */
        public boolean equals(Object ob)
        {
            if (ob == this)
                return true;
            if (ob == null)
                return false;
            Hashtable.Entry entry = (Hashtable.Entry)ob;
            return (entry.getKey() == null ? getKey() == null : entry.getKey().equals(getKey()))
                && (entry.getValue() == null ? getValue() == null : entry.getValue().equals(getValue()));
        }

        /**
         */
        public int hashCode()
        {
            return ((getKey() == null) ? 0 : getKey().hashCode())
                ^ ((getValue() == null) ? 0 : getValue().hashCode());
        }

        /**
         */
        public String toString()
        {
            return getKey() + "=" + getValue().toString();
        }
    }

    /**
     * ConcurrentModificationException must be thrown if the set is modified at any time after the iterator is created, in any way except through the iterator's own remove method
     */
    class Enumerator extends AbstractEnumerator implements Enumeration, Iterator
    {
        int m_tableIndex;               /** table position index */
        int m_index;                    /** map position index */
        Hashtable.Entry m_lastReturned; /** iterator position */
        Hashtable.Entry m_previous;     /** used to keep the previous element - for remove only */
        boolean m_stateValid;           /** used for determining if the state is valid for remove() */


        /**
         */
        Enumerator(Hashtable hashtable, int type)
        {
            m_hashtable = hashtable;
            expectedModCount = hashtable.modCount;
            m_type = type;
            m_lastReturned = null;
            m_previous = null;
            m_tableIndex = (m_hashtable.m_table.length > 0) ? 0 : -1;
            m_index = 0;
            m_stateValid = false;
        }

        /**
         */
        public boolean hasMoreElements()
        {
            return m_index < m_hashtable.size();
        }

        /**
         * WARNING: must throw NoSuchElementException - iteration has no more elements.
         */
        public Object nextElement()
        {
            if (hasMoreElements() == false)
                return null; // must throw NoSuchElementException here
            m_stateValid = true;
            m_index ++;
            m_previous = m_lastReturned;
            if (m_lastReturned != null)
                m_lastReturned = m_lastReturned.m_next;
            if (m_lastReturned == null)
                {
                    m_previous = null;
                    while ((m_tableIndex < m_hashtable.m_table.length) && (m_lastReturned == null))
                        {
                            m_lastReturned = m_hashtable.m_table[m_tableIndex];
                            m_tableIndex ++;
                        }
                }
            return m_type == 1 ? m_lastReturned : m_type == 2 ? m_lastReturned.m_key : m_lastReturned.m_value;
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         */
        public boolean hasNext()
        {
            if (expectedModCount != m_hashtable.modCount)
                return false; // must throw ConcurrentModificationException here
            return hasMoreElements();
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         */
        public Object next()
        {
            if (expectedModCount != m_hashtable.modCount)
                return null; // must throw ConcurrentModificationException here
            return nextElement();
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         * WARNING: must throw IllegalStateException - if the next method has not yet been called, or the remove method has already been called after the last call to the next method.
         */
        public void remove()
        {
            if (!m_stateValid)
                return; // must throw IllegalStateException here
            if (m_previous != null)
                {
                    m_previous.m_next = m_lastReturned.m_next;
                    m_lastReturned = m_previous;
                }
            else
                {
                    m_tableIndex --;
                    m_hashtable.m_table[m_tableIndex] = m_lastReturned.m_next;
                    m_lastReturned = null;
                }
            m_hashtable.m_size --;
            m_index --;
            m_stateValid = false;
            m_hashtable.modified();
            expectedModCount = m_hashtable.modCount;
        }
    }

    class HashtableSet extends AbstractSet implements Set
    {
        Hashtable m_map;  //underlying map object

        /**
         * type of the SubTreeSet content
         * 1 - entries;
         * 2 - keys;
         * 3 - values;
         */
        int m_type;

        HashtableSet(Hashtable map, int type)
        {
            m_map = map;
            m_type = type;
        }

        /**
         */
        public Iterator iterator()
        {
            return size() == 0 ? (Iterator)new Hashtable.EmptyEnumerator(m_map) : (Iterator)new Hashtable.Enumerator(m_map, m_type);
        }

        /**
         */
        public int size()
        {
            return m_map.size();
        }

        /**
         */
        public boolean isEmpty()
        {
            return (size() == 0);
        }

        /**
         * WARNING: must throw ClassCastException - if the type of the specified element is incompatible with this set (optional).
         * WARNING: must throw NullPointerException - if the specified element is null and this set does not support null elements (optional).
         */
        public boolean contains(Object ob)
        {
            if (ob == null)
                return false; // must throw NullPointerException here
            switch(m_type)
                {
                case 1:
                    return m_map.containsKey(((Map.Entry)ob).getKey());
                case 2:
                    return m_map.containsKey(ob);
                case 3:
                    return m_map.containsValue(ob);
                }
            return false; // this point must never be reached!
        }

        /**
         * WARNING: must throw UnsupportedOperationException - if the add method is not supported by this set (!m_supportsAddition).
         * WARNING: must throw ClassCastException - if the class of the specified element prevents it from being added to this set.
         * WARNING: must throw NullPointerException - if the specified element is null and this set does not support null elements.
         * WARNING: must throw IllegalArgumentException - if some aspect of the specified element prevents it from being added to this set.
         */
        public boolean add(Object ob)
        {
            return false; // must throw UnsupportedOperationException here
        }

        /**
         * WARNING: ClassCastException - if the type of the specified element is incompatible with this set (optional).
         * WARNING: NullPointerException - if the specified element is null and this set does not support null elements (optional).
         */
        public boolean remove(Object ob)
        {
            if (ob == null)
                return false; // must throw NullPointerException here
            int size = m_map.size();
            if (m_type == 3)
                {
                    Map.Entry e = m_map.findValue(ob);
                    if (e != null)
                        m_map.remove(e.getKey());
                }
            else
                m_map.remove(m_type == 1 ? ((Map.Entry)ob).getKey() : ob);
            return size != m_map.size();
        }
    }
}
