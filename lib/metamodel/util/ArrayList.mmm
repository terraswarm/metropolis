/* An array-based implementation of a list (see java.util.ArrayList).

Metropolis: Design Environment for Heterogeneus Systems.

Copyright (c) 1998-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package metamodel.util;


public class ArrayList extends AbstractList implements List
{
    protected int elementCount;
    protected int capacityIncrement;
    protected Object elementData[];

    public ArrayList()
    {
        this(0, 10);
    }

    /**
     */
    public ArrayList(Collection col)
    {
        this(0, 10);
        addAll(col);
    }

    /**
     */
    public ArrayList(int initialCapacity)
    {
        this(initialCapacity, 0);
    }

    ArrayList(int initialCapacity, int capacityIncrement)
    {
        this.capacityIncrement = capacityIncrement;
        this.elementData = new Object[initialCapacity];
        elementCount = 0;
    }

    public Object clone()
    {
        ArrayList newArrayList = new ArrayList(elementData.length, capacityIncrement);
        for (int i = 0; i < size(); i ++)
            newArrayList.elementData[i] = elementData[i];
        //     System.arraycopy(elementData, 0, newVector.elementData, 0, elementCount);
        //     copyInto(newVector.elementData);
        newArrayList.elementCount = elementCount;
        return newArrayList;
    }

    /**
     */
    public int size()
    {
        return elementCount;
    }

    public void ensureCapacity(int minCapacity)
    {
        if (elementData.length < minCapacity)
            {
                int newCapacity = elementData.length + ((capacityIncrement <= 0) ? elementData.length : capacityIncrement);
                if (newCapacity < minCapacity)
                    newCapacity = minCapacity;
                Object newTable[] = new Object[newCapacity];
                for (int i = 0; i < elementCount; i ++)
                    newTable[i] = elementData[i];
                elementData = newTable;
            }
    }

    public void trimToSize()
    {
        if (elementCount < elementData.length)
            {
                Object newTable[] = new Object[elementCount];
                for (int i = 0; i < elementCount; i ++)
                    newTable[i] = elementData[i];
                elementData = newTable;
            }
    }

    /**
     * WARNING: must throw IndexOutOfBoundsException - if index is out of range (index < 0 || index > size()).
     */
    public void add(int index, Object ob)
    {
        if (index < 0 || index > size())
            return; // must throw IndexOutOfBoundsException here.
        ensureCapacity(size() + 1);
        for (int i = size()-1; i >= index; i --)
            elementData[i+1] = elementData[i];
        /*     int elementsToShift = elementCount - index;
               if (elementsToShift > 0)
               System.arraycopy(elementData, index, elementData, index + 1, elementsToShift);
        */
        elementData[index] = ob;
        elementCount ++;
    }

    public boolean add(Object ob)
    {
        ensureCapacity(elementCount + 1);
        modified();
        elementData[elementCount] = ob;
        elementCount ++;
        return true;
    }

    /**
     * WARNING: must throw NullPointerException - if the specified collection is null.
     */
    public boolean addAll(Collection col)
    {
        if (col == null)
            return false; // must throw NullPointerException here
        return addAll(0, col);
    }

    /**
     * WARNING: must throw NullPointerException - if the specified collection is null.
     * WARNING: must throw ArrayIndexOutOfBoundsException - index is out of range (index < 0 || index > size()).
     */
    public boolean addAll(int index, Collection col)
    {
        if (col == null)
            return false; // must throw NullPointerException here
        if (index < 0 || index > size())
            return false; // must throw ArrayIndexOutOfBoundsException here.
        int newElementCount = elementCount + col.size();
        ensureCapacity(newElementCount);
        for (int i = size()-1; i >= index; i --)
            elementData[i+col.size()] = elementData[i];
        Iterator iter = col.iterator();
        for (int i = index; i < newElementCount; i ++)
            //     while (iter.hasNext())
            elementData[i] = iter.next();
        elementCount = newElementCount;
        if (col.size() != 0)
            {
                modified();
                return true;
            }
        return false;
    }

    public void clear()
    {
        modified();
        elementCount = 0;
    }

    /**
     */
    public boolean contains(Object ob)
    {
        return (indexOf(ob) >= 0);
    }

    /**
     */
    public int indexOf(Object ob)
    {
        if (ob == null)
            {
                for (int i = 0; i < size(); i ++)
                    if (elementData[i] == null)
                        return i;
            }
        else
            {
                for (int i = 0; i < size(); i ++)
                    if (elementData[i].equals(ob))
                        return i;
            }
        return -1;
    }

    public int lastIndexOf(Object ob)
    {
        if (ob == null)
            {
                for (int i = size() -1; i >= 0; i --)
                    if (elementData[i] == null)
                        return i;
            }
        else
            {
                for (int i = size() -1; i >= 0; i --)
                    if (ob.equals(elementData[i]))
                        return i;
            }
        return -1;
    }

    /**
     * WARNING: must throw ArrayStoreException - if the runtime type of a is not a supertype of the runtime type of every element in this list.
     */
    public Object[] toArray()
    {
        Object array[] = new Object[size()];
        for (int i = 0; i < elementCount; i ++)
            array[i] = elementData[i];
        //     System.arraycopy(elementData, 0, array, 0, elementCount);
        return array;
    }

    /**
     * WARNING: must throw ArrayStoreException if the runtime type of a is not a supertype of the runtime type of every element in this Vector.
     */
    public Object[] toArray(Object[] array)
    {
        if (array.length < size())
            {
                //in Java the array is allocated of the runtime of the array specified as a parameter
                //array = array.getClass().newInstance();
                array = new Object[size()];
            }
        else
            if (array.length > size())
                array[size()] = null;
        for (int i = 0; i < elementCount; i ++)
            array[i] = elementData[i];
        //     System.arraycopy(elementData, 0, array, 0, elementCount);
        return array;
    }
    /**
     */
    public Object get(int index)
    {
        return elementData[index];
    }

    /**
     * WARNING: must throw ArrayIndexOutOfBoundsException - index is out of range (index < 0 || index >= size()).
     */
    public Object set(int index, Object ob)
    {
        if (index < 0 || index >= size())
            return null; // must throw ArrayIndexOutOfBoundsException here
        Object prevOb = elementData[index];
        elementData[index] = ob;
        return prevOb;
    }

    /**
     */
    protected void removeRange(int fromIndex, int toIndex)
    {
        if (fromIndex >= toIndex || elementCount <= toIndex)
            // the operation has no effect
            return;
        modified();
        int diff = elementCount >= fromIndex ? toIndex - fromIndex : toIndex - elementCount;
        for (int i = toIndex; i < size(); i ++)
            elementData[i-diff] = elementData[i];
        /*     int elementsToShift = elementCount - index - diff;
               if (elementsToShift > 0)
               System.arraycopy(elementData, index + diff, elementData, index, elementsToShift);
        */
        elementCount = elementCount - diff;
        if (elementCount < elementData.length)
            elementData[elementCount] = null; /* to let gc do its work */
    }

    /**
     */
    public Iterator iterator()
    {
        return new ArrayListItr(this);
    }

    /**
     * WARNING: must throw IndexOutOfBoundsException - if index is out of range (index < 0 || index >= size()).
     */
    public Object remove(int index)
    {
        if (index < 0 || index >= size())
            return null; // must throw IndexOutOfBoundsException here.
        modified();
        Object obRemoved = elementData[index];
        for (int i = index + 1; i < size(); i ++)
            elementData[i-1] = elementData[i];
        /*     int elementsToShift = elementCount - index - 1;
               if (elementsToShift > 0)
               System.arraycopy(elementData, index + 1, elementData, index, elementsToShift);
        */
        elementCount --;
        elementData[elementCount] = null; /* to let gc do its work */
        return obRemoved;
    }

    class ArrayListItr implements Iterator
    {
        protected int modCount; /** used for failing safely if the parent collection is modifie outside the VectorItr's remove() method */
        ArrayList m_arrayList;  /** parent array object */
        boolean m_stateValid;   /** used for determining if the state is valid for remove() */
        int m_index;            /** current iterator state pointer */

        ArrayListItr(ArrayList arrayList)
        {
            m_arrayList = arrayList;
            m_index = 0;
            m_stateValid = false;
            this.modCount = m_arrayList.modCount;
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         */
        public boolean hasNext()
        {
            if (modCount != m_arrayList.modCount)
                return false; // must throw ConcurrentModificationException here
            return (m_index < m_arrayList.size());
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         * WARNING: must throw NoSuchElementException - iteration has no more elements.
         */
        public Object next()
        {
            if (modCount != m_arrayList.modCount)
                return null; // must throw ConcurrentModificationException here
            if (m_index >= m_arrayList.size())
                return null; //must throw NoSuchElementException here
            m_stateValid = true;
            return m_arrayList.get(m_index ++);
        }

        /**
         * WARNING: must throw ConcurrentModificationException if the parent collection is structurally changed to ensure that the iterator is fail-fast
         * WARNING: must throw IllegalStateException - if the next method has not yet been called, or the remove method has already been called after the last call to the next method.
         */
        public void remove()
        {
            if (modCount != m_arrayList.modCount)
                return; // must throw ConcurrentModificationException here
            if (!m_stateValid)
                return; // must throw IllegalStateException here
            m_stateValid = false;
            m_arrayList.remove(m_index-1);
            modCount = m_arrayList.modCount;
        }
    }
}
