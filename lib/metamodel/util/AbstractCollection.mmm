/* An abstract collection providing a generic implementation of some
   methods (see java.util.AbstractCollection).

   Metropolis: Design Environment for Heterogeneus Systems.

   Copyright (c) 1998-2005 The Regents of the University of California.
   All rights reserved.

   Permission is hereby granted, without written agreement and without
   license or royalty fees, to use, copy, modify, and distribute this
   software and its documentation for any purpose, provided that the
   above copyright notice and the following two paragraphs appear in all
   copies of this software and that appropriate acknowledgments are made
   to the research of the Metropolis group.

   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
   THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.

   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
   ENHANCEMENTS, OR MODIFICATIONS.

   METROPOLIS_COPYRIGHT_VERSION_1
   COPYRIGHTENDKEY

*/

package metamodel.util;


public abstract class AbstractCollection implements Collection
{

    /**
     */
    public abstract int size();

    /**
     */
    public boolean isEmpty()
    {
        return (size() == 0);
    }

    /**
     */
    public boolean contains(Object ob)
    {
        Iterator iter = iterator();
        if (ob != null)
            {
                while (iter.hasNext())
                    {
                        if (ob.equals(iter.next()))
                            return true;
                    }
            }
        else
            {
                while (iter.hasNext())
                    {
                        if (iter.next() == null)
                            return true;
                    }
            }
        return false;
    }

    /**
     */
    public Object[] toArray()
    {
        Object array[] = new Object[size()];
        Iterator iter = iterator();
        for (int i = 0; i < size(); i ++)
            array[i] = iter.next();
        return array;
    }

    /**
     * WARNING: must throw NullPointerException - if the specified array is null.
     * WARNING: must throw ArrayStoreException - if the runtime type of the specified array is not a supertype of the runtime type of every element in this collection.
     */
    public Object[] toArray(Object[] array)
    {
        if (array.length < size())
            {
                //in Java the array is allocated of the runtime of the array specified
                //array = array.getClass().newInstance();
                array = new Object[size()];
            }
        else
            if (array.length > size())
                array[size()] = null;
        Iterator iter = iterator();
        for (int i = 0; i < size(); i ++)
            array[i] = iter.next();
        return array;
    }

    /**
     * Java implementation checks for cast correctness, if the object is legal and the bounds throwing the corresponding exceptions and then allways throws UnsupportedOperationException. Since the exception mechanizm is absent so far the method is made abstract in the metamodel.
     */
    public abstract boolean add(Object ob);

    /**
     * WARNING: Iterator for the collection must support the remove method
     */
    public boolean remove(Object ob)
    {
        Iterator iter = iterator();
        if (ob != null)
            {
                while (iter.hasNext())
                    {
                        if (ob.equals(iter.next()))
                            {
                                iter.remove();
                                return true;
                            }
                    }
            }
        else
            {
                while (iter.hasNext())
                    {
                        if (iter.next() == null)
                            {
                                iter.remove();
                                return true;
                            }
                    }
            }
        return false;
    }

    /**
     * WARNING: must throw ClassCastException - if the types of one or more elements in the specified collection are incompatible with this set (optional).
     * WARNING: must throw NullPointerException - if the specified collection contains one or more null elements and this set does not support null elements (optional).
     */
    public boolean containsAll(Collection col)
    {
        Iterator iter = col.iterator();
        while (iter.hasNext())
            {
                if (!contains(iter.next()))
                    return false;
            }
        return true;
    }

    /**
     * WARNING: must throw UnsupportedOperationException - if this collection does not support the addAll method.
     */
    public boolean addAll(Collection col)
    {
        int n = size();
        Iterator colIter = col.iterator();
        while (colIter.hasNext())
            add(colIter.next());
        return (n != size());
    }

    /**
     * WARNING: must throw UnsupportedOperationException - if the removeAll method is not supported by this collection.
     */
    public boolean removeAll(Collection col)
    {
        int n = size();
        Iterator colIter = col.iterator();
        while (colIter.hasNext())
            remove(colIter.next());
        return (n != size());
    }

    /**
     * WARNING: must throw UnsupportedOperationException - if the retainAll method is not supported by this Collection.
     * WARNING: must throw NullPointerException - if the specified collection is null.    * WARNING: must check if col==null and throw exception in the case
     */
    public boolean retainAll(Collection col)
    {
        int n = size();
        Iterator iter = iterator();
        while (iter.hasNext())
            if (!col.contains(iter.next()))
                iter.remove();
        return (n != size());
    }

    /**
     */
    public void clear()
    {
        Iterator iter = iterator();
        //     for (int i = 0; i < size(); i ++)
        while (iter.hasNext())
            {
                iter.next();
                iter.remove();
            }
    }

    /**
     */
    public String toString()
    {
        /*
        // implementation using StringBuffer
        StringBuffer buf = new StringBuffer();
        Iterator iter = iterator();
        buf.append("[");
        for (int i = 0; i < size(); i ++)
        {
        if (i > 0)
        buf.append(", ");
        buf.append(iter.next().toString());
        }
        buf.append("]");
        return buf.toString();
        */
        String buf = new String();
        Object element;
        Iterator iter = iterator();
        buf += "[";
        if (size() > 0)
            {
                element = iter.next();
                buf += element == null ? "null" : element.toString();
            }
        while (iter.hasNext())
            {
                // this implementation is safe in the sense that if some collection element is null "null" will upper in its place in the string. The original Java implementation fails here.
                element = iter.next();
                buf += ", " + (element == null ? "null" : element.toString());
            }
        buf += "]";
        return buf;
    }

    /**
     */
    public abstract Iterator iterator();
}
