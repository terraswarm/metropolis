/* An implementation of a bit-vector (see java.util.BitSet).

Metropolis: Design Environment for Heterogeneus Systems.

Copyright (c) 1998-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package metamodel.util;


public class BitSet
{
    long m_bits[];
    int m_wordLength;

    /**
     * Creates a new bit set. All bits are initially false.
     */
    public BitSet()
    {
        this(0);
    }

    BitSet(BitSet bs)
    {
        m_bits = new long[bs.m_bits.length];
        m_wordLength = bs.m_wordLength;
        for (int i = 0; i < m_bits.length; i ++)
            m_bits[i] = bs.m_bits[i];
        //     System.arraycopy(bs.m_bits, 0, m_bits, 0, bs.m_bits.length);
    }

    /**
     * Creates a new bit set. All bits are initially false.
     * Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1. All bits are initially false.
     * WARNING: must throw NegativeArraySizeException if (initialLength < 0)
     */
    public BitSet(int initialLength)
    {
        m_wordLength = 64; // length of long according to the Java specification

        m_bits = new long[wordIndex(initialLength)+1];
        for (int i = 0; i < m_bits.length; i ++)
            m_bits[i] = 0;
    }

    private long bitMask(int bitIndex)
    {
        return (long)(1)<<(bitIndex%m_wordLength);
    }

    private long bitMask(int fromIndex, int toIndex)
    {
        long mask = 0;
        return (~((~mask)<<((toIndex%m_wordLength)-(fromIndex%m_wordLength))))<<(fromIndex%m_wordLength);
    }

    private int wordIndex(int bitIndex)
    {
        return bitIndex/m_wordLength;
    }

    private void ensureCapacity(int capacity)
    {
        int words = wordIndex(capacity-1) + 1;
        if (words > m_bits.length)
            {
                int newWords = (2 * m_bits.length) > words ? 2 * m_bits.length : words;
                long newBits[] = new long[newWords];
                for (int i = newWords-1; i >= m_bits.length; i--)
                    newBits[i] = 0;
                for (int i = 0; i < m_bits.length; i ++)
                    newBits[i] = m_bits[i];
                m_bits = newBits;
            }
    }

    /**
     */
    public int length()
    {
        for (int i = m_bits.length-1; i >= 0; i --)
            {
                long word = m_bits[i];
                if (word != 0)
                    {
                        int j = m_wordLength;
                        while (word > 1 || word < 0)
                            {
                                word >>>= 1;
                                j --;
                            }
                        return m_wordLength*(i+1)-j+1;
                    }
            }
        return 0;
    }

    public int cardinality()
    {        int cardinality = 0;
    for (int i = m_bits.length-1; i >= 0; i --)
        {
            long word = m_bits[i];
            while (word != 0)            {
                if ((word & (long)1) > 0)                    cardinality ++;
                word >>>= 1;
            }
        }
    return cardinality;
    }        public int nextSetBit(int fromIndex)    {        if (fromIndex < 0)
        return -1; // must throw IndexOutOfBoundsException here
    for (int i = wordIndex(fromIndex); i < m_bits.length; i ++)
        {
            long word = m_bits[i];
            if (word != 0)
                {                word >>>= fromIndex%m_wordLength;
                int j = fromIndex%m_wordLength;
                while ((word & 1) == 0 && j < m_wordLength)
                    {
                        word >>>= 1;
                        j ++;
                    }
                return m_wordLength*i+j;
                }
        }
    return -1;
    }

    public int nextClearBit(int fromIndex)    {        if (fromIndex < 0)
        return -1; // must throw IndexOutOfBoundsException here
    for (int i = wordIndex(fromIndex); i < m_bits.length; i ++)
        {
            long word = m_bits[i];            word >>>= fromIndex%m_wordLength;            int j = fromIndex%m_wordLength;            while ((word & 1) == 1 && j < m_wordLength)            {                word >>>= 1;                j ++;            }            return m_wordLength*i+j;        }
    return -1;
    }

    /**
     * Sets the bit at the specified index to to the complement of its current value.
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is negative.
     */
    public void flip(int bitIndex)
    {
        if (bitIndex < 0)
            return; // must throw IndexOutOfBoundsException here
        ensureCapacity(bitIndex+1);
        m_bits[wordIndex(bitIndex)] ^= bitMask(bitIndex);
    }

    /**
     * Sets each bit from the specified fromIndex(inclusive) to the specified toIndex(exclusive) to the complement of its current value.
     * WARNING: must throw IndexOutOfBoundsException - if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex.
     * fromIndex - index of the first bit to flip.
     * toIndex - index after the last bit to flip.
     */
    public void flip(int fromIndex, int toIndex)
    {
        if (toIndex < fromIndex)
            return; // must throw IndexOutOfBoundsException here
        ensureCapacity(toIndex+1);
        int fromWord = wordIndex(fromIndex);
        int toWord = wordIndex(toIndex);
        long mask;
        if (fromWord == toWord)
            m_bits[fromWord] ^= bitMask(fromIndex, toIndex);
        else
            {
                m_bits[fromWord] ^= bitMask(fromIndex, m_wordLength);
                m_bits[toWord] ^= bitMask(0, toIndex);
                for (int i = fromWord+1; i < toWord; i ++)
                    {
                        m_bits[i] ^= m_bits[i];
                    }
            }
    }

    /**
     * WARNING: must throw IndexOutOfBoundsException - if the specified index is negative.
     */
    public void set(int index)
    {
        if (index < 0)
            return; // must throw IndexOutOfBoundsException here
        ensureCapacity(index+1);
        m_bits[wordIndex(index)] |= bitMask(index);
    }

    public void set(int index, boolean value)
    {
        if (value)            set(index);        else
            clear(index);    }

    public void set(int fromIndex, int toIndex)
    {
        if (toIndex < fromIndex)
            return; // must throw IndexOutOfBoundsException here        ensureCapacity(toIndex+1);
        int fromWord = wordIndex(fromIndex);        int toWord = wordIndex(toIndex);
        long mask;
        if (fromWord == toWord)
            m_bits[fromWord] |= bitMask(fromIndex, toIndex);
        else
            {
                m_bits[fromWord] |= bitMask(fromIndex, m_wordLength);
                m_bits[toWord] |= bitMask(0, toIndex);
                for (int i = fromWord+1; i < toWord; i ++)
                    m_bits[i] |= m_bits[i];
            }
    }

    public void set(int fromIndex, int toIndex, boolean value)
    {
        if (value)            set(fromIndex, toIndex);        else
            clear(fromIndex, toIndex);    }

    public void clear()
    {        for (int i = 0; i < m_bits.length; i ++)            m_bits[i] = 0;
    }
    /**
     * WARNING: must throw IndexOutOfBoundsException - if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex
     */
    public void clear(int index)
    {
        if (index < 0)
            return; // must throw IndexOutOfBoundsException here
        m_bits[wordIndex(index)] &= ~bitMask(index);
    }

    public void clear(int fromIndex, int toIndex)
    {
        if (toIndex < fromIndex)
            return; // must throw IndexOutOfBoundsException here
        int fromWord = wordIndex(fromIndex);        if (fromWord > m_bits.length-1)            return; // no effect
        int toWord = wordIndex(toIndex);
        toWord = toWord > m_bits.length-1 ? m_bits.length-1 : toWord;
        long mask;
        if (fromWord == toWord)
            m_bits[fromWord] &= ~bitMask(fromIndex, toIndex);
        else
            {
                m_bits[fromWord] &= ~bitMask(fromIndex, m_wordLength);
                m_bits[toWord] &= ~bitMask(0, toIndex);
                for (int i = fromWord+1; i < toWord; i ++)
                    m_bits[i] &= ~m_bits[i];
            }
    }

    /**
     * WARNING: must throw IndexOutOfBoundsException - if fromIndex is negative, or toIndex is negative, or fromIndex is larger than toIndex.
     */
    public boolean get(int index)
    {
        if (index < 0)
            return false; // must throw IndexOutOfBoundsException here
        long mask = bitMask(index);
        return (m_bits[wordIndex(index)] & mask) == mask;
    }
    public BitSet get(int fromIndex, int toIndex)    {        if (toIndex < fromIndex)
        return null; // must throw IndexOutOfBoundsException here
    BitSet newBitSet = new BitSet(toIndex-fromIndex);        int fromWordIndex = wordIndex(fromIndex);        long mask;
    int i;        for (i = fromWordIndex; i < wordIndex(toIndex); i ++)        {
        newBitSet.m_bits[i-fromWordIndex] |= m_bits[i]>>>fromIndex%m_wordLength;
        newBitSet.m_bits[i-fromWordIndex] |= m_bits[i+1]<<(m_wordLength-fromIndex)%m_wordLength;
    }        if (newBitSet.m_bits.length-1 >= i-fromWordIndex)            newBitSet.m_bits[i-fromWordIndex] |= m_bits[i]>>>fromIndex%m_wordLength;
    newBitSet.m_bits[newBitSet.m_bits.length-1] &= ~bitMask(toIndex-fromIndex-1, m_wordLength);
    return newBitSet;    }
    public boolean intersects(BitSet bset)
    {        int minSize = bset.m_bits.length < m_bits.length ? bset.m_bits.length : m_bits.length;
    for (int i = 0; i < minSize; i ++)
        if ((m_bits[i] & bset.m_bits[i]) > 0)                return true;        return false;
    }

    public boolean isEmpty()
    {        for (int i = 0; i < m_bits.length; i ++)
        if (m_bits[i] > 0)                return false;        return true;
    }

    /**
     */
    public void and(BitSet bset)
    {
        ensureCapacity(bset.size()-1);
        for (int i = 0; i < bset.m_bits.length; i ++)
            m_bits[i] &= bset.m_bits[i];
    }

    /**
     */
    public void andNot(BitSet bset)
    {
        ensureCapacity(bset.size()-1);
        for (int i = 0; i < bset.m_bits.length; i ++)
            m_bits[i] &= ~bset.m_bits[i];
    }

    /**
     */
    public void or(BitSet bset)
    {
        ensureCapacity(bset.size()-1);
        for (int i = 0; i < bset.m_bits.length; i ++)
            m_bits[i] |= bset.m_bits[i];
    }

    /**
     */
    public void xor(BitSet bset)
    {
        ensureCapacity(bset.size()-1);
        for (int i = 0; i < bset.m_bits.length; i ++)
            m_bits[i] ^= ~bset.m_bits[i];
    }

    /**
     */
    public int hashCode()
    {
        long h = 1234;
        for (int i = m_bits.length; --i >= 0; )
            {
                h ^= m_bits[i] * (i + 1);
            }
        return (int)((h >> 32) ^ h);
    }

    /**
     */
    public int size()
    {
        return m_bits.length*m_wordLength;
    }

    /**
     */
    public boolean equals(Object ob)
    {
        if (ob == null)
            return false;
        if (ob == this)
            return true;
        BitSet bs = (BitSet)ob;
        if (bs.length() != length())
            return false;
        for (int i = 0; i < length(); i ++)
            if (bs.get(i) != get(i))
                return false;
        return true;
    }

    /**
     */
    public Object clone()
    {
        return new BitSet(this);
    }

    /**
     */
    public String toString()
    {
        // alternative implementation printing out the row of 0s and 1s
        // separating with space symbol every 10 bits
        String buf = new String();
        for (int j = 0 ; j < size()/10+1; j++)
            {
                buf += " ";
                for (int i = 0 ; (i < 10) && (i+10*j < size()); i++)
                    buf += get(i+10*j) ? "1" : "0";
            }
        return buf;

        /*        // implementation in accordance to Java specification
                  String buf = new String();
                  boolean separate = false;
                  buf += "{";
                  for (int i = 0; i < length(); i++)
                  {
                  if (get(i))
                  {
                  if (separate)
                  buf += ", ";
                  separate = true;
                  buf += i;
                  }
                  }
                  buf += "}";
                  return buf;
        */
    }
}
