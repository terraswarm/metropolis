/* A hashtable-base implementation of a Set (see java.util.HashSet).

Metropolis: Design Environment for Heterogeneus Systems.

Copyright (c) 1998-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

*/

package metamodel.util;

public class HashSet extends AbstractSet implements Set
{
    HashMap m_map;  //underlying map object

    /**
     * type of the SubTreeSet content
     * 1 - entries;
     * 2 - keys;
     * 3 - values;
     */
    int m_type;

    boolean m_supportsAddition; //true if the set supports add and addAll operations (if it is not created by keySet or entrySet for some map
    boolean m_supportsNull;     //true if the set supports null elements

    public HashSet()
    {
        this(16, (float)0.75);
    }

    /**
     * WARNING: must throw IllegalArgumentException if (initialCapacity < 0)
     */
    public HashSet(int initialCapacity)
    {
        this(initialCapacity, (float)0.75);
    }

    /**
     * WARNING: must throw IllegalArgumentException if ((initialCapacity < 0) || (loadFactor <= 0))
     */
    public HashSet(int initialCapacity, float loadFactor)
    {
        m_supportsAddition = true;
        m_supportsNull = true;
        m_type = 2;
        m_map = new HashMap(initialCapacity, loadFactor);
    }

    HashSet(HashMap map, int type)
    {
        m_map = map;
        m_type = type;
        m_supportsAddition = false;
    }

    /**
     * WARNING: must throw NullPointerException - if the specified collection is null.
     */
    public HashSet(Collection col)
    {
        m_supportsAddition = true;
        m_supportsNull = true;
        m_type = 2; // collection elements are stored as keys in the underlying map for easy access
        m_map = new HashMap(col.size() == 0 ? 16 : (int)(col.size()/0.75)-1, (float)0.75);
        Iterator iter = col.iterator();
        while (iter.hasNext())
            {
                Object ob = iter.next();
                m_map.put(ob, null);
            }
    }

    /**
     */
    public Iterator iterator()
    {
        return m_map.iterator(m_type);
    }

    /**
     */
    public int size()
    {
        return m_map.size();
    }

    /**
     */
    public boolean isEmpty()
    {
        return (size() == 0);
    }

    /**
     * WARNING: must throw ClassCastException - if the type of the specified element is incompatible with this set (optional).
     * WARNING: must throw NullPointerException - if the specified element is null and this set does not support null elements (optional).
     */
    public boolean contains(Object ob)
    {
        switch(m_type)
            {
            case 1:
                if (ob == null)
                    return false; // must throw NullPointerException here
                return m_map.containsKey(((Map.Entry)ob).getKey());
            case 2:
                return m_map.containsKey(ob);
            case 3:
                return m_map.containsValue(ob);
            }
        return false; // this point must never be reached!
    }

    /**
     * WARNING: must throw UnsupportedOperationException - if the add method is not supported by this set (!m_supportsAddition).
     * WARNING: must throw ClassCastException - if the class of the specified element prevents it from being added to this set.
     * WARNING: must throw NullPointerException - if the specified element is null and this set does not support null elements.
     * WARNING: must throw IllegalArgumentException - if some aspect of the specified element prevents it from being added to this set.
     */
    public boolean add(Object ob)
    {
        if (!m_supportsAddition)
            return false; // must throw UnsupportedOperationException here
        if (!m_supportsNull && ob == null)
            return false; // must throw NullPointerException here
        int sizeIni = m_map.size();
        m_map.put(ob, null);
        return (sizeIni == m_map.size());
    }

    /**
     * WARNING: ClassCastException - if the type of the specified element is incompatible with this set (optional).
     * WARNING: NullPointerException - if the specified element is null and this set does not support null elements (optional).
     */
    public boolean remove(Object ob)
    {
        if (!m_supportsNull && ob == null)
            return false; // must throw NullPointerException here
        int size = m_map.size();
        if (m_type == 3)
            {
                Map.Entry e = m_map.findValue(ob);
                if (e == null)
                    return false;
                m_map.remove(e.getKey());
            }
        m_map.remove(m_type == 1 ? ((Map.Entry)ob).getKey() : ob);
        return size != m_map.size();
    }

    /**
     * WARNING: must throw UnsupportedOperationException - if the clear method is not supported by this set.
     */
    public void clear()
    {
        m_map.clear();
    }

    /**
     */
    public Object clone()
    {
        return new HashSet(m_supportsAddition ? (HashMap)((HashMap)m_map).clone() : m_map, m_type);
    }
}
