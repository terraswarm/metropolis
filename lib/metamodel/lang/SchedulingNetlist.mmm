/* An interface that identifies a netlist to be a scheduling netlist.
   It also provides methods to users to do scheduling.

   Metropolis: Design Environment for Heterogeneus Systems.

   Copyright (c) 1998-2005 The Regents of the University of California.
   All rights reserved.

   Permission is hereby granted, without written agreement and without
   license or royalty fees, to use, copy, modify, and distribute this
   software and its documentation for any purpose, provided that the
   above copyright notice and the following two paragraphs appear in all
   copies of this software and that appropriate acknowledgments are made
   to the research of the Metropolis group.

   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
   THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.

   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
   ENHANCEMENTS, OR MODIFICATIONS.

   METROPOLIS_COPYRIGHT_VERSION_1
   COPYRIGHTENDKEY

   Version: $Id: SchedulingNetlist.mmm,v 1.9 2005/11/22 20:13:35 allenh Exp $

*/

package metamodel.lang;

public netlist SchedulingNetlist extends Netlist implements SchedulingNetlistIntfc {
    private boolean _top;

    public SchedulingNetlist(String name, boolean top) {
        _top = top;
    }

    public eval boolean ifTop() {
        return _top;
    }

    public update void top() {
        // All backends should implement the default behavior of top().
        // i.e. call recursively the top functions of all sub-netlists.
    }

    public update void resolve() {
        // All backends should implement the default behavior of resolve().
        // i.e. call recursively the resolve functions of all sub-netlists.
    }

    public update void postcond() {
        // All backends should implement the default behavior of postcond().
        // i.e. call recursively the postcond functions of all sub-netlists.
    }
}
