/* A class for describing time, related to actions.

Metropolis: Design Environment for Heterogeneus Systems.

Copyright (c) 1998-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

Version: $Id: GlobalTime.mmm,v 1.32 2006/10/12 14:23:00 cxh Exp $

*/

package metamodel.lang;

public final quantity GlobalTime implements GlobalTimeManager
{
    String _name;
    double _gtime;
    public update double sub(double t1, double t2) { return t1 - t2; }
    public eval boolean equal(double t1, double t2) { return t1 == t2; }
    public eval boolean less(double t1, double t2) { return t1 < t2; }
    public eval double A(event e, int i) { return 0.0; }
    // YW: 082103: beg

    // Xi: 090304: Change the request method to its orinigal one
    //  to avoid error from method effect checking.
    public eval void request(event e, RequestClass rc) {}
    //    public eval void request(event e, double t) {}
    //public eval void request(event e, GlobalTimeRequestClass rc) {}
    public eval void requestI(event e, GlobalTimeRequestClass rc) {}
    public elaborate String getName(){ return _name; }
    // YW: 082103: end
    public update void resolve() {}
    public update void postcond() {}
    public eval boolean stable() { return true; }
    public eval double getCurrentTime() { return _gtime; }

    public elaborate eval Quantity getQuantity(int id) { return this; }
    public update void registerLOC(int type, event e1, event e2, RequestClass r) {}
    public update void unregisterLOC(process p) {}

    public GlobalTime(String name) {
        super(name);

        _name = name;

        //xichen: temporarily comment out the questionable constraint
        /*constraint {
          ltl (        forall(event a1, event a2, int i, int j) (
          (GXI(A(a1,i)) == GXI(A(a2,j)) -> equal(A(a1,i),A(a2,j))) &&
          (GXI(A(a1,i)) <  GXI(A(a2,j)) ->
          (less(A(a1,i),A(a2,j)) || equal(A(a1,i),A(a2,j)))))
          );
          }*/
    }
}
