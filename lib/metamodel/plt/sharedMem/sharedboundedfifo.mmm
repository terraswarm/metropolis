/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package metamodel.plt.sharedMem;
import metamodel.plt.yapitemplate.*;
import metamodel.plt.storage.*;

template(T)
        public interface sbfinterface extends Port
        {
            update LinkedList allocate(int id, int spaces, T[] data);
            update void free(int id, LinkedList intervals, T[] data);
        }
//*****************************************************************************
interface sbfLock extends Port{}
//*****************************************************************************

template(T)
        public medium sharedboundedfifo implements sbfinterface-<T>-, sbfLock
{
    port storageinterface-<T>-                        data_storage;
    port storageinterface-<yapiint>-        header_storage;
    port storageinterface-<yapiint>-        control_storage;

    int _mem_size;
    LinkedList _names;
    LinkedList _criticality;

    static final int TOTAL_ALLOCATED        = 0;
    static final int START_LOOKING = 1;
    static final int CRITICAL = 2;

    //*****************************************************************************
    public sharedboundedfifo(String name, int size)
        {
            super(name);
            _mem_size = size;

            _names = new LinkedList();
            _criticality = new LinkedList();
        }

    //*****************************************************************************
    public elaborate int reg(String name)
        {
            _names.addLast(name);
            _criticality.addLast(new yapiint(0));
            return _names.size() - 1;
        }

    //*****************************************************************************
    //        store the data (of size "spaces_needed") in the shared memory, and return
    //        an ordered linked list or the locations written to
    //        if there isn't enough space, the number of items in the linked list
    //        will be less than "spaces_needed"

    public update LinkedList allocate(int id, int spaces_needed, T[] data)
        {

            LinkedList retlist = new LinkedList();

            int spaces_found = 0;

            await
                {
                    (true; this.sbfLock; this.sbfLock)
                        {
                            yapiint allocated = control_storage.read_one(TOTAL_ALLOCATED);
                            yapiint start_index = control_storage.read_one(START_LOOKING);
                            yapiint critical = control_storage.read_one(CRITICAL); // global
                            yapiint current_index = start_index.clone();

                            if (critical.d == 1) // in the global critical range
                                {
                                    // see if our critical slot is taken or not
                                    yapiint this_critical = _criticality.get(id);
                                    if (this_critical.d == 0) // can write one thing
                                        {
                                            spaces_needed = 1;
                                        }
                                    else // can't write anything
                                        {
                                            return null;
                                        }
                                }

                            // search through the headers and fill up
                            while (spaces_found < spaces_needed)
                                {
                                    yapiint this_header = header_storage.read_one(current_index.d);

                                    if (this_header.d == 0) // empty spot found
                                        {
                                            data_storage.write_one(current_index.d, data[spaces_found]);
                                            this_header.d = 1; // now it has been written to
                                            header_storage.write_one(current_index.d, this_header);

                                            retlist.addLast(new yapiint(current_index.d));
                                            spaces_found++;

                                            // determine if we need to set the critical flag
                                            if (critical.d)
                                                {
                                                    ((yapiint)_criticality.get(id)).d = 1; // cannot write anymore
                                                }
                                            if (allocated.d + spaces_found == _mem_size - _names.size())
                                                {
                                                    critical.d = 1;
                                                    control_storage.write_one(CRITICAL, critical);
                                                }
                                        }

                                    current_index.d++; // go to next spot
                                    if (current_index.d >= _mem_size) // wrap around
                                        {
                                            current_index.d = 0;
                                        }

                                    // if we've gone through the entire space
                                    if (current_index.d == start_index.d)
                                        {
                                            break; // we didn't find enough space for all items
                                        }
                                }
                            // update the counter

                            allocated.d += spaces_found;
                            control_storage.write_one(TOTAL_ALLOCATED, allocated);

                            control_storage.write_one(START_LOOKING, current_index);

                        }
                }
            return retlist;
        }
    //*****************************************************************************
    public update void free(int id, LinkedList places, T[] data)
        {

            if (places == null || places.size() < 1)
                {
                    return; // can return immediately
                }
            else if (((yapiint)_criticality.get(id)).d == 1)
                {
                    _criticality.set(id, new yapiint(0));
                }

            await
                {
                    (true; this.sbfLock; this.sbfLock)
                        {
                            // get the critical flag
                            yapiint critical = control_storage.read_one(CRITICAL); // global
                            yapiint allocated = control_storage.read_one(TOTAL_ALLOCATED);

                            if (allocated.d - places.size() < _mem_size - _names.size())
                                {
                                    critical.d = 0;
                                    control_storage.write_one(CRITICAL, critical);
                                }

                            allocated.d -= places.size();
                            control_storage.write_one(TOTAL_ALLOCATED, allocated);

                            for (int i = 0; i < places.size(); i++)
                                {
                                    yapiint this_place = places.get(i);
                                    data[i] = data_storage.read_one(this_place.d);
                                    header_storage.write_one(this_place.d, new yapiint(0));        // now free
                                }
                        }
                }

        }
    //*****************************************************************************
}

template(T)
        public netlist sbfnetlist
        {
            sharedboundedfifo-<T>- sbf;
            genericStorage-<T>- ds;
            genericStorage-<yapiint>- hs;
            genericStorage-<yapiint>- cs;

            public sbfnetlist(String n, int size)
            {
                super(n);

                ds = new genericStorage-<T>-(n+"ds", 1, size);
                addcomponent(ds, this, n + "ds");

                hs = new genericStorage-<yapiint>-(n+"hs", 1, size);
                addcomponent(hs, this, n + "hs");

                // none of the spaces is allocated yet
                for (int i = 0; i < size; i++)
                    {
                        hs.load(i, new yapiint(0));
                    }

                cs = new genericStorage-<yapiint>-(n+"cs", 1, 3);
                addcomponent(cs, this, n + "cs");

                for (int i = 0; i < 3; i++)
                    {
                        cs.load(i, new yapiint(0));
                    }

                sbf = new sharedboundedfifo-<T>-(n+ "_sbf", size);
                addcomponent(sbf, this, n + "_sbf_inst");

                connect(sbf, data_storage, ds);
                connect(sbf, header_storage, hs);
                connect(sbf, control_storage, cs);

            }

            public elaborate sharedboundedfifo-<T>- getsbf()
            {
                return sbf;
            }
        }

//*****************************************************************************
