/*
  Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package metamodel.plt.yapiintdoublescaled;
//superclass
interface yapiinterface extends Port {
    eval boolean checkfifoint(int n,int dir);
    eval boolean checkfifodouble(int n,int dir);
}

//input port interface
public interface yapioutinterface extends yapiinterface {
    update void write(int data);
    update void write(double data);
    update void write(int[] data,int n);
    update void write(double[] data,int n);
    update void write(int[][] data,int n,int m);
    update void write(double[][] data,int n,int m);
}

//output port interface
public interface yapiininterface extends yapiinterface {
    update void read(int data);
    update void read(double data);
    update void read(int[] data,int n);
    update void read(double[] data,int n);
    update void read(int[][] data,int n,int m);
    update void read(double[][] data,int n,int m);
}

interface semaphore extends Port{
}

public medium yapichannel implements yapiininterface,yapioutinterface {

    //Memory buffer to store the incoming data
    int[] fifobufferint;
    double[] fifobufferdouble;
    int ntokensint;
    int ntokensdouble;
    int numberofinputs;
    int numberofoutputs;

    //Constructor
    public yapichannel() {
        super("");
        numberofinputs=0;
        numberofoutputs=0;
    }

    constraint{
        ltl(G(getconnectionnum(this,yapioutinterface) < 2));
        ltl(G(getconnectionnum(this,yapioutinterface)==1));
    }

    //Write and read methods
    //All the write functions follow the same structure

    public update void write(int data) {

        //1.Await until nobody is reading form the buffer
        //      then set the reading interface so that nobody will read
        //2.Resize the array by using a temp array fifobuffercopy
        //3.Increment the number of tokens in the buffer

        await{
            (true;this.semaphore;this.semaphore)
                {
                    int[] fifobuffercopy = new int[ntokensint+1];
                    for (int i= 0; i<ntokensint ; i++)
                        fifobuffercopy[i] = fifobufferint[i];
                    fifobuffercopy[ntokensint] = data;
                    fifobufferint = fifobuffercopy;
                    ntokensint++;
                }
        }
    }

    public update void write(int[] data,int n) {
        await{
            (true;this.semaphore;this.semaphore)
                {
                    int[] fifobuffercopy = new int[ntokensint + n];
                    for (int i= 0; i<ntokensint ; i++)
                        fifobuffercopy[i] = fifobufferint[i];
                    for (int i= 0; i< n ; i++)
                        fifobuffercopy[ntokensint + i] = data[i];
                    fifobufferint = fifobuffercopy;
                    ntokensint = ntokensint + n;
                }
        }
    }

    public update void write(int[][] data,int n,int m) {
        await{
            (true;this.semaphore;this.semaphore)
                {
                    int[] fifobuffercopy = new int[ntokensint + n*m];
                    for (int i= 0; i<ntokensint ; i++)
                        fifobuffercopy[i] = fifobufferint[i];
                    for (int i= 0; i< n ; i++)
                        for (int j=0;j<m;j++)
                            fifobuffercopy[ntokensint + i*m + j] = data[i][j];
                    fifobufferint = fifobuffercopy;
                    ntokensint = ntokensint + n*m;
                }
        }
    }

    public update void write(double data) {
        await{
            (true;this.semaphore;this.semaphore)
                {
                    double[] fifobuffercopy = new double[ntokensdouble+1];
                    for (int i= 0; i<ntokensdouble ; i++)
                        fifobuffercopy[i] = fifobufferdouble[i];
                    fifobuffercopy[ntokensdouble] = data;
                    fifobufferdouble = fifobuffercopy;
                    ntokensdouble++;
                }
        }
    }

    public update void write(double[] data,int n) {
        await{
            (true;this.semaphore;this.semaphore)
                {
                    double[] fifobuffercopy = new double[ntokensdouble + n];
                    for (int i= 0; i<ntokensdouble ; i++)
                        fifobuffercopy[i] = fifobufferdouble[i];
                    for (int i= 0; i< n ; i++)
                        fifobuffercopy[ntokensdouble + i] = data[i];
                    fifobufferdouble = fifobuffercopy;
                    ntokensdouble = ntokensdouble + n;
                }
        }
    }

    public update void write(double[][] data,int n,int m) {
        await{
            (true;this.semaphore;this.semaphore)
                {
                    double[] fifobuffercopy = new double[ntokensdouble + n*m];
                    for (int i= 0; i<ntokensdouble ; i++)
                        fifobuffercopy[i] = fifobufferdouble[i];
                    for (int i= 0; i< n ; i++)
                        for (int j=0;j<m;j++)
                            fifobuffercopy[ntokensdouble + i*m + j] = data[i][j];
                    fifobufferdouble = fifobuffercopy;
                    ntokensdouble = ntokensdouble + n*m;
                }
        }
    }



    //All the read functions follow the same structure
    public update void read(int data) {

        //1.Await until nobody is writing
        //        then set the writing interface so that nobody will write
        //2.Pop the fisrt n elemnts form the array
        //  and assign them to the data variable
        //3.Resize the array using a temp fifobuffercopy array
        //4.Update the number of tokens in the buffer

        await{
            (ntokensint > 0;this.semaphore;this.semaphore)
                {
                    data = fifobufferint[0];
                    if ((ntokensint - 1) == 0) {
                        fifobufferint = null;
                        ntokensint = 0;
                    }
                    else {
                        int[] fifobuffercopy = new int[ntokensint - 1];
                        for (int i = 0;i < ntokensint -1 ; i++)
                            fifobuffercopy[i] = fifobufferint[i+1];
                        fifobufferint = fifobuffercopy;
                        ntokensint--;
                    }
                }
        }
    }

    public update void read(double data) {
        await{
            (ntokensdouble > 0;this.semaphore;this.semaphore)
                {
                    data = fifobufferdouble[0];
                    if ((ntokensdouble - 1) == 0) {
                        fifobufferdouble = null;
                        ntokensdouble = 0;
                    }
                    else {
                        double[] fifobuffercopy = new double[ntokensdouble - 1];

                        for (int i = 0;i < ntokensdouble -1 ; i++)
                            fifobuffercopy[i] = fifobufferdouble[i+1];
                        fifobufferdouble = fifobuffercopy;
                        ntokensdouble--;
                    }
                }
        }
    }

    public update void read(int[] data,int n) {
        await{
            (ntokensint > n-1;this.semaphore;this.semaphore)
                {
                    for (int i=0 ; i<n ; i++)
                        data[i] = fifobufferint[i];
                    if ((ntokensint - n) == 0) {
                        fifobufferint = null;
                        ntokensint = 0;
                    }
                    else {
                        int[] fifobuffercopy = new int[ntokensint - n];

                        for (int i = 0;i < ntokensint -n ; i++)
                            fifobuffercopy[i] = fifobufferint[i+n];
                        fifobufferint = fifobuffercopy;
                        ntokensint = ntokensint - n;
                    }
                }
        }
    }

    public update void read(double[] data,int n) {
        await{
            (ntokensdouble > n -1;this.semaphore;this.semaphore)
                {
                    for (int i=0 ; i<n ; i++)
                        data[i] = fifobufferdouble[i];
                    if ((ntokensdouble - n) == 0) {
                        fifobufferdouble = null;
                        ntokensdouble = 0;
                    }
                    else {
                        double[] fifobuffercopy = new double[ntokensdouble - n];

                        for (int i = 0;i < ntokensdouble -n ; i++)
                            fifobuffercopy[i] = fifobufferdouble[i+n];
                        fifobufferdouble = fifobuffercopy;
                        ntokensdouble = ntokensdouble - n;
                    }
                }
        }
    }

    public update void read(int[][] data,int n,int m) {
        await{
            (ntokensint > n*m-1;this.semaphore;this.semaphore)
                {
                    for (int i=0 ; i<n ; i++)
                        for (int j=0; j< m ;j++)
                            data[i][j] = fifobufferint[i*m + j];
                    if ((ntokensint - n*m) == 0) {
                        fifobufferint = null;
                        ntokensint = 0;
                    }
                    else {
                        int[] fifobuffercopy = new int[ntokensint - n*m];

                        for (int i = 0;i < ntokensint -n*m ; i++)
                            fifobuffercopy[i] = fifobufferint[i+n*m];
                        fifobufferint = fifobuffercopy;
                        ntokensint = ntokensint - n*m;
                    }
                }
        }
    }

    public update void read(double[][] data,int n,int m) {
        await{
            (ntokensdouble > n*m-1;this.semaphore;this.semaphore)
                {
                    for (int i=0 ; i<n ; i++)
                        for (int j=0; j< m ;j++)
                            data[i][j] = fifobufferdouble[i*m + j];
                    if ((ntokensdouble - n*m) == 0) {
                        fifobufferdouble = null;
                        ntokensdouble = 0;
                    }
                    else {
                        double[] fifobuffercopy = new double[ntokensdouble - n*m];

                        for (int i = 0;i < ntokensdouble -n*m ; i++)
                            fifobuffercopy[i] = fifobufferdouble[i+n*m];
                        fifobufferdouble = fifobuffercopy;
                        ntokensdouble = ntokensdouble - n*m;
                    }
                }
        }
    }

    //This is used in the select function
    //n number of tokens
    //dir is direction (0 means input, others' means output)
    //if n is -1 then it just returns false (menas that the port
    //was input/output and I'm considering it as output/input
    //then is it is input the function checks for availabel tokens
    //if it is output the return true (unbounded fifo)


    public eval boolean checkfifoint(int n,int dir) {
        await{
            (true;this.semaphore;this.semaphore)
                {
                    if (n == -1)
                        return false;
                    else
                        if (dir == 0) //input
                            return ntokensint >= n;
                        else
                            return true; //output is never blocked
                }
        }
    }

    public eval boolean checkfifodouble(int n,int dir) {
        await{
            (true;this.semaphore;this.semaphore)
                {
                    if (n == -1)
                        return false;
                    else
                        if (dir == 0) //input
                            return ntokensdouble >= n;
                        else
                            return true; //output is never blocked
                }
        }
    }



}

public process yapiprocess{
    port yapiininterface inport0;
    port yapiininterface inport1;
    port yapiininterface inport2;
    port yapiininterface inport3;

    port yapioutinterface outport0;
    port yapioutinterface outport1;
    port yapioutinterface outport2;
    port yapioutinterface outport3;

    public yapiprocess() {
        super("");
    }

    //Select fucation always select over all
    //inputs and outputs.
    //-1 for number of tokens/spaces means do not consider that input/output
    //the returned value is from 0 to 7 where 0-3 are inputs
    //and 4-7 are outputs


    int selectint(int nin0,int nin1,int nin2,int nin3,int nout0, int nout1, int nout2,int nout3) {
        await{
            (inport0.checkfifoint(nin0,0);;)
                return 0;
            (inport1.checkfifoint(nin1,0);;)
                return 1;
            (inport2.checkfifoint(nin2,0);;)
                return 2;
            (inport3.checkfifoint(nin3,0);;)
                return 3;
            (outport0.checkfifoint(nout0,1);;)
                return 4;
            (outport1.checkfifoint(nout1,1);;)
                return 5;
            (outport2.checkfifoint(nout2,1);;)
                return 6;
            (outport3.checkfifoint(nout3,1);;)
                return 7;
        }
    }

    int selectdouble(int nin0,int nin1,int nin2,int nin3,int nout0, int nout1, int nout2,int nout3) {
        await{
            (inport0.checkfifodouble(nin0,0);;)
                return 0;
            (inport1.checkfifodouble(nin1,0);;)
                return 1;
            (inport2.checkfifodouble(nin2,0);;)
                return 2;
            (inport3.checkfifodouble(nin3,0);;)
                return 3;
            (outport0.checkfifodouble(nout0,1);;)
                return 4;
            (outport1.checkfifodouble(nout1,1);;)
                return 5;
            (outport2.checkfifodouble(nout2,1);;)
                return 6;
            (outport3.checkfifodouble(nout3,1);;)
                return 7;
        }
    }

    void thread() {
        execute();
    }
    void execute(){}
}

public netlist yapinetlist {

    //medium[] mediumarray;
    //int numberofmedium;

    public yapinetlist() {
        super("");
    }


    //  constraint {
    //  int i;
    //medium m;
    //for (i=0;i<numberofmedium;i++) {
    //  m = mediumarray[i];

    //ltl(G(getconnectionnum(m,yapioutinterface) < 2));
    //ltl(getconnectionnum(m,yapioutinterface)==1);
    //        }
    //  }

}
