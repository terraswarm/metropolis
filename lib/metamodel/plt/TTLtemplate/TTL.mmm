/*
  @Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package metamodel.plt.TTLtemplate;

import metamodel.plt.yapitemplate.*;
import metamodel.plt.storage.*;

template(T)
        public interface boundedfifointerface extends Port {
        }

template(T)
        public interface boundedfifooutinterface extends boundedfifointerface-<T>- {
            eval int claim_space();
            eval int query_space();
            eval int guard_query_space();  // added by YW
            update void release_data(T data);
            update void release_data(T[] data);
        }

template(T)
        public interface boundedfifoininterface extends boundedfifointerface-<T>- {
            eval T claim_data();
            eval void claim_data(T[] data);
            eval int query_data();
            eval int guard_query_data();
            update void release_space();
        }

interface ttlwri extends Port{}
interface ttlrdi extends Port{}

template(T)
        public medium boundedfifo implements boundedfifoininterface-<T>-,boundedfifooutinterface-<T>-,ttlwri,ttlrdi {

    port storageinterface-<T>- data_storage;

    parameter int tokensize;
    parameter int numberoftokens;

    int ntokens, rp, wp;

    int DataSize;

    public boundedfifo(String n,int ts,int nt,int it, int ds) {
        super(n);
        tokensize = ts;
        numberoftokens = nt;
        DataSize = ds;

        ntokens = 0;
        rp = 0;
        wp = 0;
    }

    public elaborate int getTokenSize() {
        return tokensize;
    }


    public elaborate int getNumberOfTokens() {
        return numberoftokens;
    }

    public elaborate int getDataSize() {
        return DataSize;
    }



    //Claim space is blocking and the process can go ahead
    //only if there is at least the space for one token
    public eval int claim_space() {
        await{
            (ntokens < numberoftokens;this.ttlrdi;this.ttlwri) {
                blackbox(SystemCSim)%%
                    // cout << name() << ": claim_space: space="
                    //   << (numberoftokens - ntokens) << endl;
                    %%;
                return (numberoftokens - ntokens);
            }
        }
    }


    //As before but non-blocking
    public eval int query_space() {
        await{
            (true;this.ttlrdi;this.ttlwri) {
                blackbox(SystemCSim)%%
                    // cout << name() << ": query_space: space="
                    //   << (numberoftokens - ntokens) << endl;
                    %%;
                return (numberoftokens - ntokens);
            }
        }
    }

    public eval int guard_query_space() {
        blackbox(SystemCSim)%%
            // cout << name() << ": guard_query_space: space="
            //   << (numberoftokens - ntokens) << endl;
            %%;
        return (numberoftokens - ntokens);
    }


    //Algorithm
    //1.Await until nobody is reading from the other side
    //  then prevent reading access
    //2.ttlwrite the data in the circular buffer
    //  pay attention to the ttlwrite pointer update
    //3.update the number of tokens in the buffer

    public update void release_data(T data) {
        await{
            (true;this.ttlrdi;this.ttlwri)
                {
                    data_storage.write_one(wp, (T)data.clone());

                    blackbox(SystemCSim)%%
                        // cout << name() << ": release_data: data written" << endl;
                        %%;
                    wp = (wp + 1)%(tokensize*numberoftokens);

                    ntokens++;
                }
        }
    }

    public update void release_data(T[] data) {
        await{
            (true;this.ttlrdi;this.ttlwri)
                {
                    for (int i=0;i<tokensize;i++) {

                        data_storage.write_one(wp, (T)data[i].clone());

                        wp = (wp + 1)%(tokensize*numberoftokens);
                    }
                    blackbox(SystemCSim)%%
                        // cout << name() << ": release_data: data written: tokensize = "
                        //   << tokensize << endl;
                        %%;
                    ntokens++;
                }
        }
    }


    public eval int query_data(){
        await{
            (true;this.ttlwri;this.ttlrdi) {
                blackbox(SystemCSim)%%
                    // cout << name() << ": query_data: ntokens=" << ntokens << endl;
                    %%;
                return ntokens;
            }
        }
    }

    public eval int guard_query_data(){
        blackbox(SystemCSim)%%
            // cout << name() << ": guard_query_data: ntokens=" << ntokens << endl;
            %%;
        return ntokens;
    }

    //Algorithm
    //1.Await until nobody is ttlwriting then
    //  prevent wirting operation
    //2.Decrease the number of tokens in the fifobuffer

    public update void release_space() {
        await{
            (true;this.ttlwri;this.ttlrdi) {
                ntokens--;
                blackbox(SystemCSim)%%
                    // cout << name() << ": release_space: space released" << endl;
                    %%;
            }
        }
    }


    //Algorithm
    //1.Await until nobody is ttlwriting then
    //  prevent wirting operation
    //2.Read the token from the fifobuffer
    //  update the read pointer of the circular buffer

    public eval T claim_data() {
        await{
            (ntokens > 0;this.ttlwri;this.ttlrdi)
                {
                    T data;
                    data = data_storage.read_one(rp);
                    rp = (rp + 1)%(tokensize*numberoftokens);
                    return data;
                }
        }
    }

    public eval void claim_data(T[] data) {
        await{
            (ntokens > 0;this.ttlwri;this.ttlrdi)
                {
                    for (int i=0;i<tokensize;i++)
                        {
                            data[i] = data_storage.read_one(rp);
                            rp = (rp + 1)%(tokensize*numberoftokens);
                        }
                    blackbox(SystemCSim)%%
                        // cout << name() << ": claim_data: data read: tokensize = "
                        //   << tokensize << endl;
                        %%;
                }
        }
    }

}

template(T)
        public medium boundedfifo_primitive implements boundedfifoininterface-<T>-,boundedfifooutinterface-<T>-,ttlwri,ttlrdi {

    port storageinterface-<T>- data_storage;

    parameter int tokensize;
    parameter int numberoftokens;

    int ntokens, rp, wp;

    int DataSize;

    public boundedfifo_primitive(String n,int ts,int nt,int it, int ds) {
        super(n);
        tokensize = ts;
        numberoftokens = nt;
        DataSize = ds;

        ntokens = 0;
        rp = 0;
        wp = 0;
    }

    public elaborate int getTokenSize() {
        return tokensize;
    }


    public elaborate int getNumberOfTokens() {
        return numberoftokens;
    }

    public elaborate int getDataSize() {
        return DataSize;
    }



    //Claim space is blocking and the process can go ahead
    //only if there is at least the space for one token
    public eval int claim_space() {
        await{
            (ntokens < numberoftokens;this.ttlrdi;this.ttlwri) {
                blackbox(SystemCSim)%%
                    // cout << name() << ": claim_space: space="
                    //   << (numberoftokens - ntokens) << endl;
                    %%;
                return (numberoftokens - ntokens);
            }
        }
    }


    //As before but non-blocking
    public eval int query_space() {
        await{
            (true;this.ttlrdi;this.ttlwri) {
                blackbox(SystemCSim)%%
                    // cout << name() << ": query_space: space="
                    //   << (numberoftokens - ntokens) << endl;
                    %%;
                return (numberoftokens - ntokens);
            }
        }
    }

    public eval int guard_query_space() {
        blackbox(SystemCSim)%%
            // cout << name() << ": guard_query_space: space="
            //   << (numberoftokens - ntokens) << endl;
            %%;
        return (numberoftokens - ntokens);
    }


    //Algorithm
    //1.Await until nobody is reading from the other side
    //  then prevent reading access
    //2.ttlwrite the data in the circular buffer
    //  pay attention to the ttlwrite pointer update
    //3.update the number of tokens in the buffer

    public update void release_data(T data) {
        await{
            (true;this.ttlrdi;this.ttlwri)
                {
                    data_storage.write_one(wp, (T)data);

                    blackbox(SystemCSim)%%
                        // cout << name() << ": release_data: data written" << endl;
                        %%;
                    wp = (wp + 1)%(tokensize*numberoftokens);

                    ntokens++;
                }
        }
    }

    public update void release_data(T[] data) {
        await{
            (true;this.ttlrdi;this.ttlwri)
                {
                    for (int i=0;i<tokensize;i++) {

                        data_storage.write_one(wp, (T)data[i]);

                        wp = (wp + 1)%(tokensize*numberoftokens);
                    }
                    blackbox(SystemCSim)%%
                        // cout << name() << ": release_data: data written: tokensize = "
                        //   << tokensize << endl;
                        %%;
                    ntokens++;
                }
        }
    }


    public eval int query_data(){
        await{
            (true;this.ttlwri;this.ttlrdi) {
                blackbox(SystemCSim)%%
                    // cout << name() << ": query_data: ntokens=" << ntokens << endl;
                    %%;
                return ntokens;
            }
        }
    }

    public eval int guard_query_data(){
        blackbox(SystemCSim)%%
            // cout << name() << ": guard_query_data: ntokens=" << ntokens << endl;
            %%;
        return ntokens;
    }

    //Algorithm
    //1.Await until nobody is ttlwriting then
    //  prevent wirting operation
    //2.Decrease the number of tokens in the fifobuffer

    public update void release_space() {
        await{
            (true;this.ttlwri;this.ttlrdi) {
                ntokens--;
                blackbox(SystemCSim)%%
                    // cout << name() << ": release_space: space released" << endl;
                    %%;
            }
        }
    }


    //Algorithm
    //1.Await until nobody is ttlwriting then
    //  prevent wirting operation
    //2.Read the token from the fifobuffer
    //  update the read pointer of the circular buffer

    public eval T claim_data() {
        await{
            (ntokens > 0;this.ttlwri;this.ttlrdi)
                {
                    T data;
                    data = data_storage.read_one(rp);
                    rp = (rp + 1)%(tokensize*numberoftokens);
                    return data;
                }
        }
    }

    public eval void claim_data(T[] data) {
        await{
            (ntokens > 0;this.ttlwri;this.ttlrdi)
                {
                    for (int i=0;i<tokensize;i++)
                        {
                            data[i] = data_storage.read_one(rp);
                            rp = (rp + 1)%(tokensize*numberoftokens);
                        }
                    blackbox(SystemCSim)%%
                        // cout << name() << ": claim_data: data read: tokensize = "
                        //   << tokensize << endl;
                        %%;
                }
        }
    }

}

template(T)
        public process TTLprocess{
    port boundedfifoininterface-<T>- inport0;
    port boundedfifoininterface-<T>- inport1;
    port boundedfifoininterface-<T>- inport2;
    port boundedfifoininterface-<T>- inport3;

    port boundedfifooutinterface-<T>- outport0;
    port boundedfifooutinterface-<T>- outport1;
    port boundedfifooutinterface-<T>- outport2;
    port boundedfifooutinterface-<T>- outport3;

    public TTLprocess(String n) {
        super(n);
    }

    //Select fucation always select over all
    //inputs and outputs.
    //-1 for number of tokens/spaces means do not consider that input/output
    //the returned value is from 0 to 7 where 0-3 are inputs
    //and 4-7 are outputs


    int select(int nin0,int nin1,int nin2,int nin3,int nout0, int nout1, int nout2,int nout3) {
        await{
            ((nin0!=-1)&&(inport0.query_data()>= nin0);;)
                return 0;
            ((nin1!=-1)&&(inport1.query_data()>= nin1);;)
                return 1;
            ((nin2!=-1)&&(inport2.query_data()>= nin2);;)
                return 2;
            ((nin3!=-1)&&(inport3.query_data()>= nin3);;)
                return 3;
            ((nout0!=-1)&&(outport0.query_space()>= nout0);;)
                return 4;
            ((nout1!=-1)&&(outport1.query_space()>= nout1);;)
                return 5;
            ((nout2!=-1)&&(outport2.query_space()>= nout2);;)
                return 6;
            ((nout3!=-1)&&(outport3.query_space()>= nout3);;)
                return 7;
        }
    }



    void thread() {
        execute();
    }

    void execute() {
    }
}

public netlist TTLnetlist {

    //medium[] mediumarray;
    //int numberofmedium;

    public TTLnetlist(String n) {
        super(n);
    }


    //  constraint {
    //  int i;
    //medium m;
    //for (i=0;i<numberofmedium;i++) {
    //  m = mediumarray[i];

    //ltl(G(getconnectionnum(m,boundedfifoininterface) < 2));
    //ltl(getconnectionnum(m,boundedfifooutinterface)==1);
    //        }
    //  }

}
