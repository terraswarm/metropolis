/* Communication channel between synchronous processes

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

@ProposedRating yellow apinto@eecs.berkeley.edu

*/


package metamodel.plt.polychronyscaled;

//////////////////////////////////////////////////////////////////////////
//// SynchSignal
/**
   SynchSignal is a medium that is used to connect synchronous processes
   ( @see metamodel.plt.polychronyscaled.SynchProcess ). It implements
   interfaces for reading and writing.

   @author Alessandro Pinto
   @version $Id: SynchSignal.mmm,v 1.10 2006/10/12 14:23:58 cxh Exp $
*/


public medium SynchSignal implements SynchWritable, SynchReadable {

    /** Contructs a synchronous signal. The signal name is the
     *  only parameter needed
     */
    public SynchSignal(String n) {
        super(n);
        _signalname = n;
        presenttoken = null;
    }

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    /** SynchWrite copies the parameter data into the private variable
     *  presenttoken. The stored value can be used by a reader. Note
     *  that the parameter can be null. This special value is used to
     *  encode absence of signal. Since this platform is synchronous
     *  absence of signals is necessary. The SynchSignal is basically
     *  a oneplace buffer and writing is non-clocking meaning that
     *  data can be overwritten if nobody is ready to consume it.
     *  Finally, SynchSignal is supposed to be used as a
     *  single-input-single-output medium.
     */

    public update void synchWrite(Object data) {
        await{
            (true;this.SynchReadable;this.SynchWritable) {
                if (data == null)
                    presenttoken = null;
                else
                    presenttoken = data.clone();
            }
        }
    }

    /** SynchRead returns the current value of the of private variable
     *  presenttoken. If the current value is null then the method returns
     *  null, or better, absence of signal. SynchRead is non-blocking and
     *  consumes the token meaning that, after reading, the value of the
     *  internal storage is null.
     */

    public eval Object synchRead() {
        Object res;
        await{
            (true;this.SynchWritable;this.SynchReadable) {
                if (presenttoken != null) {
                    res = presenttoken.clone();
                    presenttoken = null;
                }
                else
                    res = null;
                return res;
            }
        }
    }


    /**Returns the address of the source port*/
    public elaborate int getInPortNumber() {
        return _ipn;
    }

    /**Sets the address of the source port*/
    public elaborate void setInPortNumber(int pn) {
        _ipn = pn;
    }

    /**Returns the address of the destination port*/
    public elaborate int getOutPortNumber() {
        return _opn;
    }

    /**Sets the address of the source port*/
    public elaborate void setOutPortNumber(int pn) {
        _opn = pn;
    }

    /**Returns the medium name*/
    public elaborate String getName() {
        return _signalname;
    }

    /**Returns the address of the source process*/
    public elaborate void setSourceNumber(int nm) {
        _sourcenumber = nm;
    }

    /**Sets the address of the source process*/
    public elaborate int getSourceNumber() {
        return _sourcenumber;
    }

    /**Sets the address of the destination process*/
    public elaborate void setDestNumber(int nm) {
        _destnumber = nm;
    }

    /**Returns the address of the destination process*/
    public elaborate int getDestNumber() {
        return _destnumber;
    }

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    /**Internal storage for writing and reading data*/
    Object presenttoken;

    /**Unique integer assigned to the source port*/
    int _ipn;

    /**Unique integer assigned to the destination port*/
    int _opn;

    /**Copy of the medium name (the same passed to the constructor)*/
    String _signalname;

    /**Unique integer assigned to the source process*/
    int _sourcenumber;

    /**Unique integer assigned to the destination process*/
    int _destnumber;
}
