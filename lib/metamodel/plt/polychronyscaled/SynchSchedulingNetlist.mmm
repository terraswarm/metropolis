/* Scheduling netlist of a synchronous system

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

@ProposedRating yellow apinto@eecs.berkeley.edu

*/


package metamodel.plt.polychronyscaled;

//////////////////////////////////////////////////////////////////////////
//// SynchSchedulingNetlist
/**
   SynchSchedulingNetlist is the mastar scheduler of the process in a
   SynchScheduledNetlist (@see metamodel.plt.polychronyscaled SynchScheduledNetlist).
   This netlist is completely transparent to the user. A user of
   this platform just describe the scheduled netlist and instantiate it
   in a top netlist, all the rest is done automatically by the
   platform itself.

   @author Alessandro Pinto
   @version $Id: SynchSchedulingNetlist.mmm,v 1.11 2006/10/12 14:23:56 cxh Exp $
*/


public netlist SynchSchedulingNetlist extends SchedulingNetlist {

    ///////////////////////////////////////////////////////////////////
    ////                      Constructors                         ////

    /**The constructor takes as usual a name, a list of clock assistants,
     *a list of processes, and the number of processes.
     *It instanciates a scheduler
     *(@see metamodel.plt.polychronyscaled.SynchScheduler) and
     *then connects each clock assistant to the scheduler through statemedia.
     *It also connects the scheduler back to process.
     */
    public SynchSchedulingNetlist(String n, SynchClockAssistant[] clockassistantlist, SynchProcess[] processlist,int nproc) {
        super(n,true);
        int i;
        _sr = new SynchScheduler(n+ "SynchScheduler",0,nproc);
        addcomponent(_sr, this, n + "SynchSchedulerInst");
        _synchsm =  new SynchStatemedium[nproc];
        for (i=0; i<nproc; i++) {
            _synchsm[i] = new SynchStatemedium("Statemedium" + i,i);
            addcomponent(_synchsm[i],this,"SynchStatemedium" + i + "Inst");
            connect(_synchsm[i],synchronizer,_sr);
            connect(_sr,synchprocesses[i],_synchsm[i]);
            connect(processlist[i],SmPort,_synchsm[i]);
            connect(clockassistantlist[i],tostatemedium,_synchsm[i]);
        }
    }

    ///////////////////////////////////////////////////////////////////
    ////                  Elaboration Methods                      ////

    /**This method retunrs the name of this netlist*/
    public elaborate String getName() {
        return _name;
    }

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    /**The top method calls the scheduler resolve function until
     *a stable situation is reached.
     */
    public update void top() {
        do {
            _sr.resolve();
        } while (!_sr.stable());
    }

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////


    /**An array of statemedia in the netlist*/
    SynchStatemedium _synchsm[];

    /**The round quantity manager in the netlist*/
    SynchScheduler   _sr;



}
