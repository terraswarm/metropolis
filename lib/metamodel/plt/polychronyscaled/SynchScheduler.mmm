/* Round Quantity Manager

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

@ProposedRating yellow apinto@eecs.berkeley.edu

Axioms to be added
*/

package metamodel.plt.polychronyscaled;

//////////////////////////////////////////////////////////////////////////
////         SynchScheduler
/**SynchScheduler schedules all process that want to execute in this cycle.

@author Alessandro Pinto
@version $Id: SynchScheduler.mmm,v 1.13 2006/10/12 15:14:05 cxh Exp $
*/




quantity SynchScheduler implements QuantityManager {

    ///////////////////////////////////////////////////////////////////
    ////                         Ports                             ////

    /**Array of ports to the processes in the scheduled netlist*/
    port StateMediumSched[] synchprocesses;


    ///////////////////////////////////////////////////////////////////
    ////                      Constructors                         ////


    /**Contructor takes an integer as scheduler type (st) and the
     *number of processes in the scheduled netlist.
     */
    public SynchScheduler(String n,int st,int nproc) {
        super(n);
        _pending = new ArrayList();
        _werepending = new ArrayList();
        _doevents = new ArrayList();
        _notdoevents = new ArrayList();
        _pending.clear();
        _werepending.clear();
        synchprocesses = new StateMediumSched[nproc];
        _numberofsynchprocesses = nproc;
        _round = 0;
        _st = st;
        _inround = false;
        _waiting = true;
    }


    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    /**This method adds the request to the pending list.*/
    public eval void request(event e, RequestClass rc) {
        SynchRequest sr = (SynchRequest)rc;
        int clock,id;
        clock = sr.getClock();
        id = sr.getId();
        //blackbox(SystemCSim)%%
        //    cout << "Received request id : " << id << "  clock : "  << clock << endl;
        //%%;
        _pending.add((Object)sr.clone());
    }

    /**Resolve function implements the scheduling algorithm.
     *Resolve method has to understand few things before
     *scheduling processes. Firs of all he has to understand if a round
     *was completed or if processes are still executing. In fact, before
     *scheduling processes, all of them have to be waiting in a request
     *section. It is important to consider the fact that a process can
     *request to be executed 2 times while another one 4 times.
     *So inround is true if there are still processes that have not
     *completed a round yet.
     *If we are not in a round and all the processes have made a request
     *then we copy the pendind request in an internal buffer and we proceed
     *with the scheduling
     *otherwise, if we are in a round, we just proceed with the scheduling.
     */

    public update void resolve() {
        //blackbox(SystemCSim)%%
        //    cout << "Resolve is called with "  << this->_pending->size((process *)&_mng) << "requests pending" << endl;
        //%%;

        if ((!_inround) && (_pending.size() == _numberofsynchprocesses)) {
            _inround = true;
            toWerePending();
            fairScheduling();
        }else
            if (_pending.size() == _numberofsynchprocesses) {
                if (_st == 0) {
                    fairScheduling();
                };
            }else {
                SynchRequest sr;
                for (int i=0;i<_werepending.size();i++) {

                    sr = (SynchRequest)_werepending.get(i);
                    _notdoevents.add((Object)sr.clone());
                }

            }

    }



    void fairScheduling() {
        int currentpriority,subround;
        _inround = false;

        SynchRequest sr;

        currentpriority = findMaxPriority(_werepending);

        for (int i=0;i<_werepending.size();i++) {

            sr = (SynchRequest)_werepending.get(i);
            subround = sr.getClock();

            if ((subround >0) && (sr.getP() == currentpriority) ) {
                _inround = true;
                sr.setClock(subround - 1);
                _doevents.add((Object)sr.clone());
            }else {
                _notdoevents.add((Object)sr.clone());
            };
        };
    }


    void toWerePending() {
        SynchRequest sr;
        _werepending.clear();
        for (int i=0;i<_pending.size();i++) {
            sr = (SynchRequest)_pending.get(i);
            _werepending.add((Object)sr.clone());
        };
    }

    int findMaxPriority(ArrayList l) {
        SynchRequest sr;
        int p,maxp;
        maxp = 0;
        for (int i=0;i<l.size();i++) {
            if (((SynchRequest)l.get(i)).getClock() > 0)
                p = ((SynchRequest)l.get(i)).getP();
            if (maxp < p) {
                maxp = p;
            }
        }
        return maxp;
    }

    public update void postcond() {
        int i;
        int id;
        SynchRequest sr;
        event e;

        for (i = 0; i < _doevents.size();i++) {
            sr = (SynchRequest)_doevents.get(i);
            e = sr.getEvent();
            synchprocesses[sr.getId()].setMustDo(e);
            id = sr.getId();
            blackbox(SystemCSim)%%
                cout << "Now Scheduling Process id: "  << id  << endl;
            %%;
        };
        for (i = 0; i < _notdoevents.size();i++) {
            sr = (SynchRequest)_notdoevents.get(i);
            e = sr.getEvent();
            synchprocesses[sr.getId()].setMustNotDo(e);
        };
        _doevents.clear();
        _notdoevents.clear();
        _pending.clear();
    }


    public eval boolean stable() {
        return true;
    }



    ArrayList _pending;
    ArrayList _werepending;
    ArrayList _doevents;
    ArrayList _notdoevents;
    int _numberofsynchprocesses;
    boolean _waiting;
    boolean _inround;
    int _round;
    int _st;

}
