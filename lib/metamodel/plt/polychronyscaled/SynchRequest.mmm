/* Synchronous request class

Copyright (c) 2004-2005 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the
above copyright notice and the following two paragraphs appear in all
copies of this software and that appropriate acknowledgments are made
to the research of the Metropolis group.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

METROPOLIS_COPYRIGHT_VERSION_1
COPYRIGHTENDKEY

@ProposedRating yellow apinto@eecs.berkeley.edu

*/


package metamodel.plt.polychronyscaled;

//////////////////////////////////////////////////////////////////////////
//// SynchRequestClass
/**
   Requst class for requesting permission to advance. When a process finishes with
   the current computation, it will request to advance to the next clock cycle.
   The SynchRequestClass is used to pass the request to the round quantity manager.

   @author Alessandro Pinto
   @version $Id: SynchRequest.mmm,v 1.11 2006/10/12 14:23:52 cxh Exp $
*/

class SynchRequest extends RequestClass {

    /**Default constructor*/
    SynchRequest(){}

    /**This constructor is used to directly
     *initialize all the internal field during contruction.
     *@param e is the event for which the request is made
     *@param clock is the process clock rate
     *@param p is the priority
     */
    SynchRequest(event e,int clock,int p) {
        _e = e;
        _clock = clock;
        _p = p;
    }


    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    /**This method sets the event*/
    public void setEvent(event e) {
        _e = e;
    }

    /**This method returns the event*/
    public event getEvent() {
        return _e;
    }

    /**This method sets the clock rate*/
    public void setClock(int clock) {
        _clock = clock;
    }

    /**This method returns the clock rate*/
    public int getClock() {
        return _clock;
    }

    /**This method sets the priority*/
    public void setP(int p) {
        _p = p;
    }

    /**This method returnss the priority*/
    public int getP() {
        return _p;
    }

    /**This method clones the request class*/
    public Object clone() {
        SynchRequest sr = new SynchRequest(_e,_clock,_p);
        sr.setId(_id);
        return sr;
    }

    /**This method sets the request id which coincides
     *with the unique process identifier.
     */
    public void setId(int id) {
        _id = id;
    }

    /**This method returns the request id which coincides
     *with the unique process identifier.
     */
    public int getId() {
        return _id;
    }

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    /**Request clock rate*/
    int _clock;

    /**Event to be annotated*/
    event _e;

    /**Process priority*/
    int _p;

    /**Process id*/
    int _id;
}
