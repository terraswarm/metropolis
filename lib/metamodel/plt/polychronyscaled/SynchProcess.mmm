/* Synchronous process: allows to specify computation in the synch
   platform

   Copyright (c) 2004-2005 The Regents of the University of California.
   All rights reserved.

   Permission is hereby granted, without written agreement and without
   license or royalty fees, to use, copy, modify, and distribute this
   software and its documentation for any purpose, provided that the
   above copyright notice and the following two paragraphs appear in all
   copies of this software and that appropriate acknowledgments are made
   to the research of the Metropolis group.

   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
   ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
   THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.

   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
   ENHANCEMENTS, OR MODIFICATIONS.

   METROPOLIS_COPYRIGHT_VERSION_1
   COPYRIGHTENDKEY

   @ProposedRating yellow apinto@eecs.berkeley.edu

*/

package metamodel.plt.polychronyscaled;


//////////////////////////////////////////////////////////////////////////
////
/** SynchProcess represent the computation part of the synchronous platform.
 *  The user has only to extend this process and overload the execute function.
 *  When the execute function is called, the input snapshot is stable. The user
 *  uses the snapshot to compute the output and writes them in an internal
 *  output buffer. This behavior is equivalent to a function executed in zero
 *  time.

 @author Alessandro Pinto
 @version $Id: SynchProcess.mmm,v 1.12 2006/10/12 14:23:50 cxh Exp $
*/

public process SynchProcess {

    ///////////////////////////////////////////////////////////////////
    ////                         Ports                             ////

    /**Port to the stamedium that is connected to the quantity manager*/
    port StateMediumProc SmPort;

    /**Port to a medium that handles the request to the quantity manager*/
    port SynchClockRequestable roundmanager;

    /**Array of input ports*/
    port SynchReadable    synchin[];

    /**Array of output ports*/
    port SynchWritable   synchout[];


    /** Constructs a synchronous process.
     *  Contructor takes a name, the number of inputs and outputs, the
     *  activation rate and the priority. The synchronous platform
     *  advances by rounds. In each round, a process executes as many
     *  times as specified by its rate. Priority can be given to estabilish
     *  the order in which the processes are executed. Processes with the
     *  same priority are executed concurrently.
     */

    public SynchProcess(String n,int ninput,int noutput,int rate,int pr) {
        super(n);
        _numberofinput  = ninput;
        _numberofoutput = noutput;
        _rate          = rate;
        _pr = pr;
        _sr             = new SynchRequest();
        synchin       = new SynchReadable[_numberofinput];
        synchout      = new SynchWritable[_numberofoutput];
        _currentinput  = new Object[_numberofinput];
        _currentoutput = new Object[_numberofoutput];
        _outputevent   = new boolean[_numberofoutput];
        for (int i=0;i<_numberofoutput;i++) {
            _outputevent[i]=false;
            _currentoutput[i] = null;
        };
        for (int i=0;i<_numberofinput;i++) {
            _currentinput[i] = null;
        };

        _rounds = 0;
    }

    ///////////////////////////////////////////////////////////////////
    ////                    Elaboration Methods                    ////

    /**Returns the process name*/
    public elaborate String getName() {
        return _name;
    }

    /**Returns the number of input ports*/
    public elaborate int getNumberOfInput() {
        return _numberofinput;
    }

    /**Returns the number of output ports*/
    public elaborate int getNumberOfOutput() {
        return _numberofoutput;
    }

    /**Retunrs the unique integer associated with each process*/
    public elaborate int getProcessNumber() {
        return _processnumber;
    }

    /**Sets the unique integer associated with each process*/
    public elaborate void setProcessNumber(int nm) {
        _processnumber = nm;
    }

    ///////////////////////////////////////////////////////////////////
    ////                     Thread of Execution                   ////

    /** In the synchronous platform a process doe the following: writs the
     *  content of the internal output buffer to the output; reads the
     *  input and stores them in an internal buffer; call the execute
     *  function; waits for another clock tick; finally increments the
     *  current execution index (it is not really needed since the
     *  global index in already provided by the metamodel).
     */
    public void thread() {
        while (true) {
            writeOutput();
            readInput();
            execute();
            requestClock();
            _rounds++;
        }
    }

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                    ////

    /**Method that the user has to overload otherwise the process
     *behavior will be emtpy.
     */
    public void execute (){}

    /**Reads the data form the media connected to the input ports
     *and stores the data in an input buffer.
     */
    public void readInput() {
        for (int i=0;i<_numberofinput;i++) {
            //blackbox(SystemCSim)%%
            //        cerr << "reading snapshot of inputs " << endl;
            //%%;
            _currentinput[i] = synchin[i].synchRead();
        };
    }

    /**Reads the data form an internal output buffer
     *and writes them in the media connected to the
     *output ports. Only output that are written by th user
     *in the current round are written. There in an internal
     *array of boolean that keep track of all the output events.
     *If an event in not present at an output then an absence of
     *signal is written.
     */
    public void writeOutput() {
        //blackbox(SystemCSim)%%
        //   cout << "Executing  " << caller->name() << endl;
        //   %%;

        for (int i=0;i<_numberofoutput;i++) {
            // blackbox(SystemCSim)%%
            //cerr << "writing snapshot of outputs " << endl;
            //%%;
            if (_outputevent[i] == true) {
                synchout[i].synchWrite(_currentoutput[i]);
                _outputevent[i] = false;
            }
            else
                synchout[i].synchWrite(null);
        };
    }

    /**The Value method is used to read the value of
     *a specific input. The parameter represent the unique integer
     *associated with an input port. Note that the value is the one
     *stored in the input snapshot.
     */
    public Object Value(int pn) {
        //blackbox(SystemCSim)%%
        //        cerr << "Value has been called " << endl;
        //   %%;
        return _currentinput[pn];
    }

    /**Post method is used to write a data on the internal output
     *buffer. The parameters are: the unique integer value associated
     *with the output port and the data to be written. Also an
     *event for that output is set.
     */
    public void Post (int pn,Object data) {
        Integer index;
        // blackbox(SystemCSim)%%
        //        cerr << "Post has been called " << endl;
        //   %%;
        _currentoutput[pn] = data.clone();
        _outputevent[pn]   = true;
    }

    /**Checks if a input is present or not. Since absence is
     *encoded by null, this function retunrs true if the value is
     *different from null.
     */
    public boolean isPresent(int pn) {
        // blackbox(SystemCSim)%%
        //cerr << "isPresent has been called " << endl;
        //   %%;
        if (Value(pn) == null)
            return false;
        else
            return true;
    }

    /**Requests a new execution of the process. A process
     *will be blocked here until a master scheduler
     *(the round quantity manager) will decided to reschedule it.
     */
    public void requestClock() {
        _sr.setP(_pr);
        _sr.setClock(_rate);
        roundmanager.request(_sr);
    }

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////


    SynchRequest _sr;

    /**Stores the snapshot of the inputs*/
    Object       _currentinput[];

    /**Stores the output events*/
    boolean      _outputevent[];

    /**Stores the snapshot of the output*/
    Object       _currentoutput[];

    /**Number of input ports*/
    int          _numberofinput;

    /**Number of output ports*/
    int          _numberofoutput;

    /**Process activation rate*/
    int          _rate;

    /**Number of executions of the process*/
    int _rounds;

    /**Process priority*/
    int _pr;

    /**Unique integer identifier of this process*/
    int _processnumber;
}
