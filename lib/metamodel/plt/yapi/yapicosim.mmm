/*
  Copyright (c) 2004-2005 The Regents of the University of California.
  All rights reserved.

  Permission is hereby granted, without written agreement and without
  license or royalty fees, to use, copy, modify, and distribute this
  software and its documentation for any purpose, provided that the
  above copyright notice and the following two paragraphs appear in all
  copies of this software and that appropriate acknowledgments are made
  to the research of the Metropolis group.

  IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
  FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
  ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
  THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.

  THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
  PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
  CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
  ENHANCEMENTS, OR MODIFICATIONS.

  METROPOLIS_COPYRIGHT_VERSION_1
  COPYRIGHTENDKEY
*/
package metamodel.plt.yapi;

interface yapiCosiminterface extends Port {
    eval boolean checkfifo(int n, int id);
}

public interface yapioutCosiminterface extends yapiCosiminterface {
    update void write(Object data, int id);
    update void write(Object[] data,int n,int id);
    update void write(Object[][] data,int n,int m,int id);
    update void write(int data,int id);
    update void write(int[] data,int n,int id);
    update void write(int[][] data,int n,int m,int id);
    update void write(short data,int id);
    update void write(short[] data,int n,int id);
    update void write(short[][] data,int n,int m,int id);
    update void write(double data,int id);
    update void write(double[] data,int n,int id);
    update void write(double[][] data,int n,int m,int id);
}

public interface yapiinCosiminterface extends yapiCosiminterface {
    update Object read(int id);
    update void read(Object[] data,int n, int id);
    update void read(Object[][] data,int n,int m, int id);
    update int readint(int id);
    update void read(int[] data, int n, int id);
    update void read(int[][] data,int n,int m, int id);
    update short readshort(int id);
    update void read(short[] data,int n, int id);
    update void read(short[][] data,int n,int m, int id);
    update double readdouble(int id);
    update void read(double[] data,int n, int id);
    update void read(double[][] data,int n,int m, int id);
}

public medium yapicosimchannel implements yapiininterface, yapioutinterface{
    port yapiinCosiminterface in;
    port yapioutCosiminterface out;
    parameter int id;

    //Constructor
    public yapicosimchannel(String n, int idnum) {
        super(n);
        id = idnum;
    }

    public update void write(Object data) {
        out.write(data, id);
    }

    public update void write(Object[] data,int n) {
        out.write(data, n, id);
    }

    public update void write(Object[][] data,int n,int m) {
        out.write(data, n, m, id);
    }

    public update void write(int data) {
        out.write(data, id);
    }

    public update void write(int[] data,int n) {
        out.write(data, n, id);
    }

    public update void write(int[][] data,int n,int m) {
        out.write(data, n, m, id);
    }

    public update void write(short data) {
        out.write(data, id);
    }

    public update void write(short[] data,int n) {
        out.write(data, n, id);
    }

    public update void write(short[][] data,int n,int m) {
        out.write(data, n, m, id);
    }

    public update void write(double data) {
        out.write(data, id);
    }

    public update void write(double[] data,int n) {
        out.write(data, n, id);
    }

    public update void write(double[][] data,int n,int m) {
        out.write(data, n, m, id);
    }

    public update void read(Object[] data,int n) {
        in.read(data, n, id);
    }

    public update void read(Object[][] data,int n,int m) {
        in.read(data, n, m, id);
    }

    public update Object read() {
        return in.read(id);
    }

    public update int readint() {
        return in.readint(id);
    }

    public update void read(int[] data,int n) {
        in.read(data, n, id);
    }

    public update void read(int[][] data,int n,int m) {
        in.read(data, n, m, id);
    }

    public update short readshort() {
        return in.readshort(id);
    }

    public update void read(short[] data,int n) {
        in.read(data, n, id);
    }

    public update void read(short[][] data,int n,int m) {
        in.read(data, n, m, id);
    }

    public update double readdouble() {
        return in.readdouble(id);
    }

    public update void read(double[] data,int n) {
        in.read(data, n, id);
    }

    public update void read(double[][] data,int n,int m) {
        in.read(data, n, m, id);
    }

    public eval boolean checkfifo(int n,int dir) {
        if (n == -1) return false;
        else if (dir != 0) return true;
        else return in.checkfifo(n, id);
    }
}

public medium yapinativewrap implements yapiinCosiminterface, yapioutCosiminterface {
    //Constructor
    public yapinativewrap(String n) {
        super(n);
    }

    public update void write(Object data, int id){ }

    public update void write(Object[] data,int n,int id){ }

    public update void write(Object[][] data,int n,int m,int id){ }

    public update void write(int data,int id){ }

    public update void write(int[] data,int n,int id){ }

    public update void write(int[][] data,int n,int m,int id){ }

    public update void write(short data,int id){ }

    public update void write(short[] data,int n,int id){ }

    public update void write(short[][] data,int n,int m,int id){ }

    public update void write(double data,int id){ }

    public update void write(double[] data,int n,int id){ }

    public update void write(double[][] data,int n,int m,int id){ }

    public update void read(Object[] data,int n, int id) {
    }

    public update void read(Object[][] data,int n,int m, int id) {
    }

    public update Object read(int id) {
    }

    public update int readint(int id) {
    }

    public update void read(int[] data,int n, int id) {
    }

    public update void read(int[][] data,int n,int m, int id) {
    }

    public update short readshort(int id) {
    }

    public update void read(short[] data,int n, int id) {
    }

    public update void read(short[][] data,int n,int m, int id) {
    }

    public update double readdouble(int id) {
    }

    public update void read(double[] data,int n, int id) {
    }

    public update void read(double[][] data,int n,int m, int id) {
    }

    public eval boolean checkfifo(int n, int id) {
    }
}
