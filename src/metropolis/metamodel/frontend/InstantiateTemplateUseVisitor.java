/* A visitor that replaces uses of templates by the names of the template
 instances.

 Metropolis: Design Environment for Heterogeneus Systems.

 Copyright (c) 1998-2005 The Regents of the University of California.
 All rights reserved.

 Permission is hereby granted, without written agreement and without
 license or royalty fees, to use, copy, modify, and distribute this
 software and its documentation for any purpose, provided that the
 above copyright notice and the following two paragraphs appear in all
 copies of this software and that appropriate acknowledgments are made
 to the research of the Metropolis group.

 IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
 ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

 THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
 CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 ENHANCEMENTS, OR MODIFICATIONS.


 METROPOLIS_COPYRIGHT_VERSION_1
 COPYRIGHTENDKEY


 */

package metropolis.metamodel.frontend;

import metropolis.metamodel.MetaModelStaticSemanticConstants;
import metropolis.metamodel.MetaModelVisitor;
import metropolis.metamodel.TreeNode;
import metropolis.metamodel.nodetypes.AbsentTreeNode;
import metropolis.metamodel.nodetypes.NameNode;
import metropolis.metamodel.nodetypes.TemplateParametersNode;
import metropolis.metamodel.nodetypes.TypeNameNode;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

// ////////////////////////////////////////////////////////////////////////
// // InstantiateTemplateUseVisitor
/**
 * A visitor that traverses a compile unit replacing instances of templates by
 * the name of the instantiated template generated by the template elimination
 * step.
 * <p>
 * The visit() methods of this visitor do not use any arguments, so the list of
 * arguments can safely be set to null. The return value is also ignored, so
 * null can be returned as well.
 * <p>
 * Portions of this code were derived from sources developed under the auspices
 * of the Ptolemy II project.
 *
 * @author Robert Clariso
 * @version $Id: InstantiateTemplateUseVisitor.java,v 1.14 2004/09/07 20:33:30
 *          cxh Exp $
 */
public class InstantiateTemplateUseVisitor extends MetaModelVisitor implements
        MetaModelStaticSemanticConstants {

    // /////////////////////////////////////////////////////////////////
    // // constructors ////

    /**
     * Create a new visitor that traverses a compile unit replacing instances of
     * templates by the name of the instantiated template. The traversal method
     * is set to TM_SELF_FIRST, as many nodes will be traversed.
     */
    public InstantiateTemplateUseVisitor() {
        super(TM_SELF_FIRST);
    }

    // /////////////////////////////////////////////////////////////////
    // // public methods ////

    /**
     * Visit a name node. If the name node is an instance of a template, replace
     * it with the name of the instantiated template.
     *
     * @param node
     *            NameNode being visited.
     * @param args
     *            List of arguments (unused).
     * @return null (unused).
     */
    public Object visitNameNode(NameNode node, LinkedList args) {
        TreeNode parameters = node.getParameters();
        if (parameters == AbsentTreeNode.instance) {
            // This is not an instance of a template
            return null;
        }
        // Instance of a template
        // Get the name of the instantiated template replace the name
        TemplateParametersNode pars = (TemplateParametersNode) parameters;
        List types = pars.getTypes();

        ObjectDecl decl = (ObjectDecl) MetaModelDecl.getDecl(node);
        String newName = null;
        if (decl != null)
            newName = TemplateHandler.buildNewName(decl, types);
        else
            newName = TemplateHandler.buildNewName(node.getIdent(), types);

        if (node.getParent() instanceof TypeNameNode) {
            TypeNameNode type = (TypeNameNode) node.getParent();
            TypeNameNode dup = null;
            try {
                dup = (TypeNameNode) type.clone();
            } catch (CloneNotSupportedException ex) {
                throw new RuntimeException("Clone of TypeNameNode '" + type
                        + "' not supported.", ex);
            }

            type.setProperty(ORIGTYPE_KEY, dup);

            List paramTypes = ((TemplateParametersNode) dup.getName()
                    .getParameters()).getTypes();
            Iterator typeIter = paramTypes.iterator();
            while (typeIter.hasNext()) {
                TreeNode paramType = (TreeNode) typeIter.next();
                if (paramType instanceof TypeNameNode) {
                    TypeNameNode origType = (TypeNameNode) paramType
                            .getProperty(ORIGTYPE_KEY);
                    if (origType != null) {
                        paramTypes.add(paramTypes.indexOf(paramType), origType);
                        paramTypes.remove(paramType);
                    }
                }
            }
        }

        // Remove the decl of the node
        if (decl != null)
            node.removeProperty(DECL_KEY);

        // Replace the template instance by a reference to the
        // instantiated template
        node.setIdent(newName);
        node.setParameters(AbsentTreeNode.instance);

        return null;
    }

    // /////////////////////////////////////////////////////////////////
    // // protected methods ////

    /**
     * Default visit method. This node is not an instance of a template, so it
     * does not have to be modified.
     *
     * @param node
     *            Node being visited (unused).
     * @param args
     *            List of arguments (unused).
     * @return null (unused).
     */
    protected Object _defaultVisit(TreeNode node, LinkedList args) {
        return null;
    }

}
