# Tests for Modifier
#
# @Author: Christopher Brooks
#
# @Version: $Id: makeModifierAuto.tcl,v 1.5 2005/11/22 20:05:31 allenh Exp $
#
# @Copyright (c) 2004-2005 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software and that appropriate acknowledgments are made
# to the research of the Metropolis group.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Load up the test definitions.
if {[string compare test [info procs test]] == 1} then {
    source testDefs.tcl
} {}

if {[info procs iterToObjects] == "" } then {
    source [ file join $METRO util testsuite enums.tcl]
}

# Uncomment this to get a full report, or set in your Tcl shell window.
# set VERBOSE 1



# Get the list of all of the check* methods
set modifierMethods [java::info methods -static metropolis.metamodel.Modifier]
foreach modifierMethod $modifierMethods {
    if [regexp {^check} $modifierMethod] {
	lappend checkMethods [lindex $modifierMethod 0]
    }
}

# Given a method name, apply all the modifiers and return
# a list
proc checkModifier {checkMethod} {
    set semanticConstants {NO_MOD PUBLIC_MOD PROTECTED_MOD PRIVATE_MOD \
			       ABSTRACT_MOD FINAL_MOD STATIC_MOD}
    set results {} 
    foreach semanticConstant $semanticConstants {
	if [catch {
	    set id [java::field \
			metropolis.metamodel.MetaModelStaticSemanticConstants \
			$semanticConstant]
	    java::call metropolis.metamodel.Modifier $checkMethod $id
	} errMsg ] {
	    if ![regexp {RuntimeException: Illegal modifier} $errMsg] {
		error "Error message did not contain 'RuntimeException: Illegal modifier':\n$checkMethod $semanticConstant\n$errMsg"
	    }
	    lappend results [list $checkMethod $semanticConstant $errMsg]
	} else {
	    lappend results [list $checkMethod $semanticConstant]
	}
    }
    return $results
}

puts "# Auto generated by makeModifer.tcl"
puts "proc checkModifier {checkMethod} {"
puts [info body checkModifier]
puts "}"
puts ""

set count 0
set semanticConstants {NO_MOD PUBLIC_MOD PROTECTED_MOD PRIVATE_MOD \
		   ABSTRACT_MOD FINAL_MOD STATIC_MOD}
foreach checkMethod $checkMethods {
    set results [checkModifier $checkMethod]
    incr count
    puts "####"
    puts "#"
    puts "test Modifier-Auto-$count {Modifier check test of $checkMethod} { "
    puts "    checkModifier $checkMethod"
    puts "} {$results}"
    puts ""
}
