#!/bin/sh
# Shell script that starts up Metro tools
# Author:  Christopher Brooks
# Version: $Id: metroinvoke.in,v 1.13 2005/01/13 21:19:44 cxh Exp $
#
# Copyright (c) 1998-2004 The Regents of the University of California.
# 	All Rights Reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software and that appropriate acknowledgments are made
# to the research of the Metropolis group.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# 						METRO_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY

# If this script is named 'javasim', 'metacomp', or 'metroshell',
# 'prometheus', 'simulator', or 'systemc',  don't edit it!
# instead, edit metroinvoke.in and run make
# make runs configure, which reads in $METRO/bin/metroinvoke.in, 
# and substitutes in variables that are surrounded with @,
# and generates $METRO/bin/metroinvoke.
# Most of the scripts in $METRO/bin are actually symbolic links to
# $METRO/bin/metroinvoke.  Thus, all the scripts share the same body
# but the $0 argument is different depending on how this script
# was invoked.

# Run 'vergil -helpall' for a short description of what
# commands can be run.

#### Generic stuff.
# Location of the Metropolis tree.  The bin directory should be found
# at $METRODEFAULT/bin
METRO_DEFAULT="@METRO_DEFAULT@"

# Protect arguments that contain whitespace (like Windows directory names):
quote_args() {
    for i in "${@}"; do
	echo '"'${i}'" '
    done
}

# Check that METRO is set, and that we can find the proper sources
if [ -z "$METRO" ]; then
    if [ -d "$METRO_DEFAULT" ]; then
	METRO="$METRO_DEFAULT"
	export METRO
    fi
    if [ ! -d "$METRO/$javasourcedir" ]; then
	echo "$0: Could not find '$METRO/$javasourcedir'.  Perhaps your METRO"
	echo " variable is not set properly?"
    fi
fi

# $METRO with forward slashes
METRO_CLEAN="`echo "$METRO" | sed 's@\\\@/@g'`"

# Default JDK Home, may have /cygdrive in it
METRO_JDK="@METRO_JDK@"

# METRO_JDK without /cygdrive
METRO_JDK_CLEAN="`echo "$METRO_JDK" | sed 's@/cygdrive/\([a-z]\)@\1:@'`"

# Java CLASSPATH separator
# For Unix, this would be :
# For Cygwin, this would be ;
CLASSPATHSEPARATOR="@CLASSPATHSEPARATOR@"

##################################################################
# Below here, we set up for each of the optional packages.
# In general, for each package Foo, we end up setting FOO_JARS
# to the list of jars that are need.  FOO_JARS should start
# with ${CLASSPATHSEPARATOR} if Foo is present.  If Foo
# is not present, then FOO_JARS is set to the empty string.
#
# The basic idea here is that if a user does not have a bunch of
# optional packages, then when they start up, they should not see
# mention of these jar files.
#
# The downside of this is that users need to rerun configure if
# they add an optional package.
##################################################################

#### Jacl stuff
# Location of ptjacl.jar
# PTJACL_JAR is set to the location ptjacl.jar if configure found ptjacl
PTJACL_JAR=@PTJACL_JAR@
if [ -f "$PTJACL_JAR" ]; then
    PTJACL_JARS="${CLASSPATHSEPARATOR}@PTJACL_JAR@"
fi


# JDK Version determined by running confTest.class and getting java.version
JVERSION=@JVERSION@

# See if we are running under JDK1.4.1 with XP
if test "`uname -s`" = "CYGWIN_NT-5.1"; then
   case "$JVERSION" in
	1.4.1)  
        # There is a bug under JDK1.4.1 XP with Radeon display cards
        # that causes XP to hang when exiting.  For details, see
        # http://developer.java.sun.com/developer/bugParade/bugs/4713003.html
        # The workaround is to start the java interpreter with 
        # -Dsun.java2d.d3d=false 
        # or
        # -Dsun.java2d.noddraw=true
        # T30's seem to be happier with noddraw than with only d3d, at least
	# under 1.4.1-beta-b14
#	   J141BUGWORKAROUND=-Dsun.java2d.d3d=false
	   J141BUGWORKAROUND=
#-Dsun.java2d.noddraw=true
	;;     
	1.4.1_01)  
	   J141BUGWORKAROUND=-Dsun.java2d.noddraw=true
	;;     
	1.4.1_02)  
	   # 1.4.1_02 and later does not have the bug.
	;;    
   esac
fi


#### All the jar files.
#
# Note that CALTROP_JARS should be before SOOT_JARS because
# CALTROP_JARS contains java_cup.jar and jasminclasses.jar contains
# a version of java cup
ALL_JAR=
ALL_JFLAG=

# Default invocation help string, used by -help, overridden as necessary.
invokeHelp="$0: Usage: $0 [commonOptions] [commandSpecificOptions] [modelOrClass]"

# Set to no if we should not pass the -help argument to the exec'd process
# For example, ptjacl does not handle the -help arg, so we exit rather
# than passing -help to the exec'd processes
passHelpArgument=yes

# Optional jar file
jarfile="$ALL_JAR"

# The Java process to run.
javac="\$JAVAHOME/bin/java"

# javaflag contains optional flags passed to java that may be
# set by this script
# JAVAFLAGS may be set by the user to pass a user selected flag
# to java.  For example
# setenv JAVAFLAGS -Djava.compiler=
# ptolemy foo.xml
# will turn off the Just In Time (JIT) compiler, which will
# result in exception messages with line numbers.
# To see what sort of options are available, type 'java -h'
# To see what sort of properties are available, type
# echo "source $METRO/util/testsuite/jdktools.tcl; jdkProperties; exit" | ptjacl
#
javaflag="$ALL_JFLAG"

if [ "x$METRO_CLASSPATH" != "x" ]; then
    PACKAGES="${CLASSPATHSEPARATOR}$METRO_CLASSPATH" 
else
    PACKAGES=
fi

LIBRARIES=$METRO/lib

# Keep these alphabetical
case `basename "$0"` in
    javasim)
        applicationflags="-classpath \"${LIBRARIES}${PACKAGES}\" -javasim"
	help="Generate java simulation code (semantics 3.0)"
	javastartupclass=metropolis.metamodel.Compiler
        ;;
    metacomp)
        applicationflags="-classpath \"${LIBRARIES}${PACKAGES}\""
	help="Meta-model compiler"
	javastartupclass=metropolis.metamodel.Compiler
        ;;
    metroshell)
        applicationflags="-classpath \"${LIBRARIES}${PACKAGES}\""
	help="Bring up Jacl (a 100% Java implementation of Tcl) in the \
	    current window"
	invokeHelp="$0: Usage: $0 [commonOptions] [tclOptions] [TclFile]"
	passHelpArgument=no
	javastartupclass=metropolis.metamodel.shell.Shell
	javasourcedir=
	jarfile="$PTJACL_JAR${CLASSPATHSEPARATOR}$ALL_JAR${CLASSPATHSEPARATOR}$SOOT_JAR"
	javaflag="$PTJACL_FLAG"
	;;
    prometheus)
        applicationflags="-classpath \"${LIBRARIES}\" -classpath \"$METRO_CLASSPATH\" -prometheus"
	help="Perform compositional verification"
	javastartupclass=metropolis.metamodel.Compiler
	javaflag=-Djava.library.path=$METRO/metropolis/metamodel/backends/prometheus
        ;;
    simulator)
        applicationflags="-classpath \"${LIBRARIES}\" -simulator"
	help="Generate java simulation code"
	javastartupclass=metropolis.metamodel.Compiler
        ;;
    systemc)
        applicationflags="-classpath \"${LIBRARIES}${PACKAGES}\" -systemc"
	help="Generate SystemC simulation code"
	javastartupclass=metropolis.metamodel.Compiler
        ;;
esac

# Determine if we are on windows and try to set JAVAHOME
windows=no
if [ "${OSTYPE-no}" = "no" ]; then
    case "`uname -s`" in
    CYGWIN*) 
	windows=yes;;
    # Tcsh
    Windows*)
	windows=yes;;
    esac
else    
    case "${OSTYPE-no}" in
    # Cygwin Bash
    cygwin*)
	windows=yes;;
    # Tcsh
    Windows*)
	windows=yes;;
    esac
fi

# If JAVAHOME is not set, then try to set it
if [ -z "$JAVAHOME" ]; then
    if [ -d "$METRO_JDK" ]; then
	JAVAHOME="$METRO_JDK"
	export JAVAHOME
    else
	if [ "$windows" = "yes" ]; then
	    searchfile=java.exe
	else
	    searchfile=java
	fi
	oldifs="$IFS"; IFS=":"
	for i in $PATH
	do
	    if [ -x "$i/$searchfile" -a ! -d "$i/$searchfile" ]; then
		JAVAHOME=`dirname $i`
		export JAVAHOME
		break
	    fi
	done
	IFS="$oldifs"
    fi
    if [ -z "$JAVAHOME" ]; then
	if [ -d "/usr/eesww/lang/jdk1.1latest" ]; then
		# Locally, Java can sometimes be found here.
		JAVAHOME=/usr/eesww/lang/jdk1.1latest
	fi
    fi
    if [ -z "$JAVAHOME" ]; then
	echo "$0: Could not find $searchfile in your \$PATH"
	echo " Please set \$JAVAHOME to the directory that contains your"
	echo " Java distribution"
	exit 3
    fi
fi

jdbflags=""
quiet=0
# ${1#-} will not work under Solaris 8
#while [ "${1#-}" != "$1" ]; do
# jode takes a -d argument, which causes problems unless we use "x..."
while [ "x$1" != "x" -a  "x`echo $1 | egrep '^-'`" = "x$1" ]; do
    if [ "$1" = "-help" ]; then
	echo $invokeHelp
	if [ "$help"x != "x" ]; then
	    # Deal with multiline help messages
	    echo "$help" | sed 's/   */ \
/g'
	fi    
	echo " Where commonOptions is one or more of:"
	echo " -debug   Enable debugging, see \$METRO/doc/coding/debugging.htm"
	echo " -help    Print this help message"
	echo " -helpall List the Metropolis commands that can be invoked"
	echo " -jdb     Run jdb instead of java, see \$METRO/doc/coding/debugging.htm"
	echo " -profiler Run under cpu sample profiling"
        echo " -q       Do not echo the command being run"
	echo " -sandbox Run model under tight security, see \$METRO/bin/sandbox.policy" 
	echo " Note that not all combinations above the above arguments make sense."
	# Most commands have their own help built in, but some do not. 
	if [ "$passHelpArgument" = "no" ]; then
	    exit
	else    
	    echo ""
	    echo "Now invoking $0 -help for further help and usage information"
	    echo ""
	fi    

	# Don't echo the command, it confuses users and scares the horses.
        quiet=1
	
	# We do not shift the -help argument away so that we can pass
	# it to the exec'd subprocess

	# Since we are not shifting the -help argument, we do not call
	# continue, we break out down below.
	# continue
    fi
    if [ "$1" = "-helpall" ]; then
	cat <<EOF
Below is a list of Metropolis scripts that can be invoked from the
command line if Cygwin is present.

  javasim	Generate java simulation code (semantics 3.0)
  metacomp
  metroshell
  prometheus	Perform compositional verification
  simulator     Generate java simulation code
  systemc       Generate SystemC simulation code

Each of the above commands takes a '-help' command line argument
that will display usage information for that command. For example:
    vergil -help
EOF
	exit
    fi
    if [ "$1" = "-debug" ]; then
	# If -debug is supplied then allow debugger attaches to java VM.
	echo "For details about debugging, see $METRO/doc/coding/debugging.htm"
	if  [ "$windows" = "yes" ]; then
	    echo "Note: Run 'jdb -attach javadebug' to attach debugger to JVM."
	    jdbflags="-Xdebug -Xrunjdwp:transport=dt_shmem,server=y,suspend=y"
	else
	    jdbAddress=8000
	    echo "Note: Run 'jdb -attach $jdbAddress' to attach debugger to JVM."
     	    jdbflags="-Xdebug -Xrunjdwp:transport=dt_socket,address=$jdbAddress,server=y,suspend=y"
	fi    
        shift
        continue
    fi
    # If -jdb is supplied then run jdb instead of java.
    if [ "$1" = "-jdb" ]; then
        javac="\$JAVAHOME/bin/jdb"
        shift
        continue
    fi
    if [ "$1" = "-profiler" ]; then
        # This could be done "manually" through JAVAFLAGS, but here it is canned
        javaflag="-Xrunhprof:cpu=samples,format=a $javaflag"
        shift
        continue
    fi
    if [ "$1" = "-q" ]; then
        # Do not echo the command. Useful for batch mode (repeated test runs)
        # to reduce stdout clutter
        quiet=1
        shift
        continue
    fi
    # If we get to here, we saw an argument with a leading -, but it
    # was not one of the args we were looking for.
    break;
done

# Unfortunately, there are issues around setting METRO if your
# Cygwin installation is installed in c:/cygwin.  
# Briefly, if Cygwin is installed in c:/cygwin, and your METRO tree
# is installed in c:/METRO, then if you cd to c:/METRO and do 'pwd',
# in bash, you will get something like /cygdrive/c/METRO/, which
# will not work with the JDK.  For details, see
# $METRO/doc/install.htm#setting.htm 
if [ "$windows" = "yes" ]; then
    # Windows via Cygwin32
    # chdir prints the current directory in DOS format.
    # The tr command deletes the \r at the end
    case "`uname -s`" in
    CYGWIN_ME-*) 
	# Windows ME is not a real os, and it does not have CMD.
        # So, we punt
	METRO_DIR=$METRO;;
    CYGWIN_98-*) 
	# Windows 98 is not a real os, and it does not have CMD.
        # So, we punt
	METRO_DIR=$METRO;;
    *)
	METRO_DIR=`(cd "$METRO"; cmd /c chdir) | tr -d '\r'`
    esac

    # Set the path to include $METRO/bin so that the Matlab interface
    # will work.  

    # Unfortunately, we need to change things like d: to /cygdrive/d,
    # and deal with backslashes.  Note that java does not understand
    # /cygdrive, so we can't use METRO_CYGDRIVE when we invoke java.
    METRO_CYGDRIVE=`echo "$METRO_DIR" | sed 's@^\([a-zA-Z]\):@/cygdrive/\1@' | sed 's@\\\\@//@'`
    
    # It would be nice to check if the METRO_CYGDRIVE was already in the PATH.
    PATH="${METRO_CYGDRIVE};$PATH"
    export PATH
    base=`/usr/bin/basename "$0"`
else
    METRO_DIR=$METRO
    base=`basename "$0"`
fi

# Add the user classpath (we prepend to be able to override classes,
# but Berkeley prefers to append, so append)
if [ "$CLASSPATH" != "" ]; then
	# $CLASSPATH may have double quotes in it.  Sadly, installing
	# the Quicktime Java tool sets CLASSPATH to something like
        # .:"C:\Program Files\Java\j2re1.4.2_06\lib\ext\QTJava.zip"
        # FIXME: Need to have /bin/sed instead of sed in case the
        # user is under Windows + Cygwin but does not have c:/cygwin/bin
        # in the Windows path.
    CLASSPATH="$METRO_DIR/src${CLASSPATHSEPARATOR}$jarfile${CLASSPATHSEPARATOR}`echo "${CLASSPATH}" | /bin/sed 's/"/\\\\"/g'`"
else
    CLASSPATH="$METRO_DIR/src${CLASSPATHSEPARATOR}$jarfile"
fi


if [ "$base" = "decompile" -a ! -f "$JODE_JAR" ]; then
    str="\"$JAVAHOME/bin/javap\" -classpath \"$CLASSPATH\" ${1+"$@"}"

else
    # If JAVAHOME has spaces in it, we need to jump through hoops
    str="\"$javac\" $jdbflags $javaflag $USERJAVAPROPERTIES $JAVAFLAGS
	$J141BUGWORKAROUND -classpath \"$CLASSPATH\" $javastartupclass
	$applicationflags "${1+`quote_args "${@}"`}
fi 
if [ "$quiet" = "0" ]; then echo "$str"; fi
eval exec $str
