# $Id: mgdb.ini,v 1.24 2005/02/10 00:54:24 allenh Exp $
# Author: Allen Hopkins
# A gdb initialization command file for the Metropolis metamodel debugger.
#

set prompt (mgdb) 
# %%%
set pagination off

#
# Start redirecting output to a file, hiding it from the user.
#
define z_hideOutput
    # %%%
    # set pagination off
    set logging redirect on
    set logging overwrite on
    shell echo "xxTMP_DIRxx/hidden" > xxTMP_DIRxx/currentOutput
    set logging file xxTMP_DIRxx/hidden
    set logging on
end
document z_hideOutput
    Used internally by mgdb.
end

#
# Stop hiding output from user.
#
define z_unhideOutput
    set logging off
    shell echo "" > xxTMP_DIRxx/currentOutput
    # %%%
    # set pagination on
end
document z_unhideOutput
    Used internally by mgdb.
end
  
# Stop hiding output and show hidden output to user.
define z_showOutput
    set logging off
    shell { \
        outputFile=`cat xxTMP_DIRxx/currentOutput`; \
        if [ "${outputFile}" ]; then \
            cat ${outputFile}; \
        fi; \
    }
    # %%%
    # set pagination on
end
document z_showOutput
    Used internally by mgdb.
end

#
# Record what breakpoints are currently set, to preserve them.
#
define z_getPrevBkpts
    # First record the breakpoints that are set before we do anything:
    shell touch xxTMP_DIRxx/prevbrkpts.log
    set logging redirect on
    set logging overwrite on
    shell echo "xxTMP_DIRxx/prevbrkpts.log" > xxTMP_DIRxx/currentOutput
    set logging file xxTMP_DIRxx/prevbrkpts.log
    set logging on
    info breakpoints
    set logging off
    shell echo "" > xxTMP_DIRxx/currentOutput
end
document z_getPrevBkpts
    Used internally by mgdb.
end

#
# Delete all breakpoints that were not previously set.
#
define z_deleteMyBkpts
    # Get all the current breakpoints:
    set logging redirect on
    set logging overwrite on
    shell echo "xxTMP_DIRxx/currbrkpts.log" > xxTMP_DIRxx/currentOutput
    set logging file xxTMP_DIRxx/currbrkpts.log
    set logging on
    info breakpoints
    set logging off
    shell echo "" > xxTMP_DIRxx/currentOutput

    # Delete all breakpoints that weren't there before we started.
    shell awk '$1 ~ /[0-9][0-9]*/ {print $1}' xxTMP_DIRxx/prevbrkpts.log | sort > xxTMP_DIRxx/prevbrkpts
    shell awk '$1 ~ /[0-9][0-9]*/ {print $1}' xxTMP_DIRxx/currbrkpts.log | sort > xxTMP_DIRxx/currbrkpts
    shell comm -13 xxTMP_DIRxx/prevbrkpts xxTMP_DIRxx/currbrkpts | awk '{print "delete", $1}' > xxTMP_DIRxx/delete.cmd
    source xxTMP_DIRxx/delete.cmd
    shell rm -f xxTMP_DIRxx/delete.cmd
end
document z_deleteMyBkpts
    Used internally by mgdb.
end

#
# pnext - Stop at the next process swap.
#
define pnext
    # %%% ???
    # set var gDontBreakInAwaitTest = false

    z_getPrevBkpts
    z_hideOutput
    break DebuggerInfo::processSwitchBreakpoint(ProgramCounter*)
    continue
    z_unhideOutput
    mwhere
    z_deleteMyBkpts
end
document pnext
    Stop at the next process swap.
end

define next

    # First record the breakpoints that are set before we do anything:
    z_getPrevBkpts

    # Create the commands to set the desired breakpoints:
    set logging redirect on
    set logging overwrite on
    shell echo "xxTMP_DIRxx/setbrkpts.cmd" > xxTMP_DIRxx/currentOutput
    set logging file xxTMP_DIRxx/setbrkpts.cmd
    set logging on

    set var gPCNextLines = pc->getNextLines()
    if (gPCNextLines != 0)
        set var gMGDBCounter = 0
        while (gMGDBCounter < gPCNextLines->size())
            set var gNextLine = gPCNextLines->at(gMGDBCounter)
            printf "break %s if strcmp(gProcessName,", gNextLine->data()
            printf "\"%s\") == 0\n", gProcessName
            set var gMGDBCounter = gMGDBCounter + 1
        end

        set logging off

        # Set the breakpoints:
        z_hideOutput
        source xxTMP_DIRxx/setbrkpts.cmd
        z_unhideOutput

        # Go to the next breakpoint:
        continue

        # Get all the current breakpoints:
        z_deleteMyBkpts
    else
        set logging off
        continue
    end

    shell rm -f xxTMP_DIRxx/*.log
    shell rm -f xxTMP_DIRxx/setbrkpts.cmd
end

# xxDEFINE_Nxx

document next
    Continue execution, stopping at the next executable metamodel statement,
    in the current stack frame or higher.
end

# FIXME: This is duplicated code:
define mnext

    set var gDontBreakInAwaitTest = true

    # First record the breakpoints that are set before we do anything:
    z_getPrevBkpts

    # Create the commands to set the desired breakpoints:
    set logging redirect on
    set logging overwrite on
    shell echo "xxTMP_DIRxx/setbrkpts.cmd" > xxTMP_DIRxx/currentOutput
    set logging file xxTMP_DIRxx/setbrkpts.cmd
    set logging on

    set var gPCNextLines = pc->getNextLines()
    if (gPCNextLines != 0)
        set var gMGDBCounter = 0
        while (gMGDBCounter < gPCNextLines->size())
            set var gNextLine = gPCNextLines->at(gMGDBCounter)
            printf "break %s if strcmp(gProcessName,", gNextLine->data()
            printf "\"%s\") == 0\n", gProcessName
            # printf "commands\nz_showOutput\nend\n"
            set var gMGDBCounter = gMGDBCounter + 1
        end

        set logging off

        # Set the breakpoints:
        z_hideOutput
        source xxTMP_DIRxx/setbrkpts.cmd
        source xxTMP_DIRxx/procSwBrk.cmd
        z_unhideOutput

        # Go to the next breakpoint:
        continue

        # Get all the current breakpoints:
        z_deleteMyBkpts
    else
        set logging off
        continue
    end

    shell rm -f xxTMP_DIRxx/*.log
    shell rm -f xxTMP_DIRxx/setbrkpts.cmd
end

#
# pname - Print the name of the current process.
#
define pname
    printf "Current process = \"%s\"\n", gProcessName
end
document pname
    Display the name of the current process.
end

#
# mwhere - Display the current source-code line and status of all processes.
#
define mwhere
    # %%%
    # set pagination off
    set var gMGDBCounter = 0
    set logging redirect on
    set logging overwrite on
    shell echo "xxTMP_DIRxx/mwhere.script" > xxTMP_DIRxx/currentOutput
    set logging file xxTMP_DIRxx/mwhere.script
    set logging on
    printf "awk 'BEGIN   { s = 0\n"
    printf "                 PROC_HDR = \"proc\"\n"
    printf "                 LNUM_HDR = \"line\"\n"
    printf "                 ETAG_HDR = \"event\"\n"
    printf "                 STATE_HDR = \"state\"\n"
    printf "                 maxProcLen = length(PROC_HDR)\n"
    printf "                 maxETagLen = length(ETAG_HDR)\n"
    printf "                 maxStateLen = length(STATE_HDR)\n"
    printf "                 dashes = \"------------------------------------------------\"\n"
    printf "               }\n"
    printf "       />>1<</ { s = 1; next }\n"
    printf "       />>2<</ { s = 2; next }\n"
    printf "       />>3<</ { s = 3; next }\n"
    printf "       />>4<</ { s = 4; next }\n"
    printf "       s == 0  { split($0,a,\":\")\n"
    printf "                 files[a[1]]=a[2]\n"
    printf "                 lines[a[1]]=a[3]\n"
    printf "                 if (length(a[1])>maxProcLen) maxProcLen = length(a[1])\n"
    printf "                 if (length(a[2])>maxFileLen) maxFileLen = length(a[2])\n"
    printf "                 if (length(a[3])>maxLnumLen) maxLnumLen = length(a[3]) }\n"
    printf "       s == 1  { split($0,a,\":\")\n"
    printf "                 events[a[1]]=a[2]\n"
    printf "                 if (length(a[2])>maxETagLen) maxETagLen = length(a[2]) }\n"
    printf "       s == 2  { split($0,a,\":\")\n"
    printf "                 states[a[1]]=a[2]\n"
    printf "                 if (length(a[2])>maxStateLen) maxStateLen = length(a[2]) }\n"
    printf "       s == 3  { proc = $1;\n"
    printf "                 if (length(proc)>maxProcLen) maxProcLen = length(proc);\n"
    printf "                 next }\n"
    #   If "where" doesn't include a ".mmm:xx" line, initialize the line
    #   number to "??". (I don't think this actually ever gets displayed.)
    printf "       s == 4  { lines[proc] = \"??\"\n"
    printf "                 if ($NF !~ /.*mmm:[0-9][0-9]*/) next\n"
    printf "                 files[proc]=\"\"\n"
    printf "                 here = $NF; split(here,a,\":\")\n"
    printf "                 thisFileName = a[1]; lines[proc] = a[2]\n"
    printf "                 if (length(a[2])>maxLnumLen) maxLnumLen = length(a[2]);\n"
    printf "                 nPathElements = split(thisFileName,a,\"/\")\n"
    printf "                 files[proc] = a[nPathElements]\n"
    printf "                 if (length(files[proc])>maxFileLen) maxFileLen = length(files[proc]);\n"
    printf "                 exit\n"
    printf "                 }\n"
    printf "       END     { hdrFmt = \"  %s-\" maxProcLen \"s %s-\" maxFileLen + maxLnumLen + 1 ", "%", "%"
    printf "\"s %s-\" maxETagLen \"s %s-\" maxStateLen \"s\\n\"\n", "%", "%"
    printf "                 fmt = \"%ss %s-\" maxProcLen \"s %s\" maxFileLen \"s:%s-\" maxLnumLen ", "%", "%", "%", "%"
    printf "\"s %s-\" maxETagLen \"s %s-\" maxStateLen \"s\\n\"\n", "%", "%"
    printf "                 printf hdrFmt, PROC_HDR, LNUM_HDR, ETAG_HDR, STATE_HDR\n"
    printf "                 printf hdrFmt, substr(dashes,1,maxProcLen), "
    printf "substr(dashes,1,maxFileLen + maxLnumLen + 1), substr(dashes,1,maxETagLen), "
    printf "substr(dashes,1,maxStateLen)\n"
    printf "                 printf \"\" >\"xxTMP_DIRxx/mwhere.tmp\"\n"
    printf "                 for (i in files) {\n"
    printf "                    star = \" \"\n"
    printf "                    if (files[i]) {\n"
    printf "                       if (i == proc) star = \"*\"\n"
    printf "                       printf fmt, star, i, files[i], lines[i], events[i], states[i] >>\"xxTMP_DIRxx/mwhere.tmp\"\n"
    printf "                    }\n"
    printf "                 }\n"
    printf "                 exit }' << END\n"
    call DebuggerInfo::updateGlobals(pc)
    while (gMGDBCounter < gAllCurrentLines.size())
	set var gCurrentLine = gAllCurrentLines[gMGDBCounter]
	printf "%s\n", gCurrentLine->data()
	set var gMGDBCounter = gMGDBCounter + 1
    end
    printf ">>1<<\n"
    set var gMGDBCounter = 0
    while (gMGDBCounter < gAllEventTags.size())
	set var gEventTag = gAllEventTags[gMGDBCounter]
	printf "%s\n", gEventTag->data()
	set var gMGDBCounter = gMGDBCounter + 1
    end
    printf ">>2<<\n"
    set var gMGDBCounter = 0
    while (gMGDBCounter < gAllSchedStates.size())
	set var gPCState = gAllSchedStates[gMGDBCounter]
	printf "%s\n", gPCState->data()
	set var gMGDBCounter = gMGDBCounter + 1
    end
    printf ">>3<<\n"
    printf "%s\n", gProcessName
    printf ">>4<<\n"
    where
    printf "END\n"
    printf "sort xxTMP_DIRxx/mwhere.tmp\n"
    set logging off
    shell echo "" > xxTMP_DIRxx/currentOutput
    # %%%
    # set pagination off
    shell sh xxTMP_DIRxx/mwhere.script
end
document mwhere
    Display location and status of all processes.
end

#
# delog - In case of a bus error, etc., while output is redirected to some
# file, turn off redirection and dump that file.
#
define delog
    set logging off
    shell { \
        outputFile=`cat xxTMP_DIRxx/currentOutput`; \
        if [ "${outputFile}" ]; then \
            cat ${outputFile}; \
        else \
            echo "Nothing to show."; \
        fi; \
    }
end
document delog
    Show the most recent hidden output.
    Some mgdb commands produce output that is hidden from the user because
    it would only be distracting, or it is used internally.
    If a bus error, etc. happens while output is being hidden, all
    subsequent output will continue to be hidden.
        If the command "where", for example, produces no output, this is
    probably the case.
        The "delog" command will display all hidden output and stop
    hiding it.
end

define dnl
    call pc->dumpNextLines()
end

# Putting these commands in a source-able file is
# necessary because the "end" in "break ... commands ... end" inside
# a user-defined command definition is taken as the "end" that ends
# the definition.

shell echo "break DebuggerInfo::processSwitchBreakpoint(ProgramCounter*)" > xxTMP_DIRxx/procSwBrk.cmd
shell echo "commands" >> xxTMP_DIRxx/procSwBrk.cmd
shell echo "silent" >> xxTMP_DIRxx/procSwBrk.cmd
shell echo "printf \"\nProcess \\\"%s\\\" active at %s\n\", gProcessName, pc->getCurrentLineNumber()->data()" >> xxTMP_DIRxx/procSwBrk.cmd
shell echo "next" >> xxTMP_DIRxx/procSwBrk.cmd
shell echo "end" >> xxTMP_DIRxx/procSwBrk.cmd

z_hideOutput
source bkpts.cmd
delete
z_unhideOutput
